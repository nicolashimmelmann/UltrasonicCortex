
build/UltrasonicCortex.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <Reset_Handler>:
 80000c0:	b672      	cpsid	i
 80000c2:	4822      	ldr	r0, [pc, #136]	; (800014c <endfiniloop+0x4>)
 80000c4:	f380 8809 	msr	PSP, r0
 80000c8:	2002      	movs	r0, #2
 80000ca:	f380 8814 	msr	CONTROL, r0
 80000ce:	f3bf 8f6f 	isb	sy
 80000d2:	f002 f925 	bl	8002320 <__core_init>
 80000d6:	f004 ff93 	bl	8005000 <__early_init>
 80000da:	481d      	ldr	r0, [pc, #116]	; (8000150 <endfiniloop+0x8>)
 80000dc:	491d      	ldr	r1, [pc, #116]	; (8000154 <endfiniloop+0xc>)
 80000de:	4a1e      	ldr	r2, [pc, #120]	; (8000158 <endfiniloop+0x10>)

080000e0 <msloop>:
 80000e0:	4291      	cmp	r1, r2
 80000e2:	da02      	bge.n	80000ea <endmsloop>
 80000e4:	6008      	str	r0, [r1, #0]
 80000e6:	3104      	adds	r1, #4
 80000e8:	e7fa      	b.n	80000e0 <msloop>

080000ea <endmsloop>:
 80000ea:	491c      	ldr	r1, [pc, #112]	; (800015c <endfiniloop+0x14>)
 80000ec:	4a17      	ldr	r2, [pc, #92]	; (800014c <endfiniloop+0x4>)

080000ee <psloop>:
 80000ee:	4291      	cmp	r1, r2
 80000f0:	da02      	bge.n	80000f8 <endpsloop>
 80000f2:	6008      	str	r0, [r1, #0]
 80000f4:	3104      	adds	r1, #4
 80000f6:	e7fa      	b.n	80000ee <psloop>

080000f8 <endpsloop>:
 80000f8:	4919      	ldr	r1, [pc, #100]	; (8000160 <endfiniloop+0x18>)
 80000fa:	4a1a      	ldr	r2, [pc, #104]	; (8000164 <endfiniloop+0x1c>)
 80000fc:	4b1a      	ldr	r3, [pc, #104]	; (8000168 <endfiniloop+0x20>)

080000fe <dloop>:
 80000fe:	429a      	cmp	r2, r3
 8000100:	da04      	bge.n	800010c <enddloop>
 8000102:	6808      	ldr	r0, [r1, #0]
 8000104:	6010      	str	r0, [r2, #0]
 8000106:	3104      	adds	r1, #4
 8000108:	3204      	adds	r2, #4
 800010a:	e7f8      	b.n	80000fe <dloop>

0800010c <enddloop>:
 800010c:	2000      	movs	r0, #0
 800010e:	4917      	ldr	r1, [pc, #92]	; (800016c <endfiniloop+0x24>)
 8000110:	4a17      	ldr	r2, [pc, #92]	; (8000170 <endfiniloop+0x28>)

08000112 <bloop>:
 8000112:	4291      	cmp	r1, r2
 8000114:	da02      	bge.n	800011c <endbloop>
 8000116:	6008      	str	r0, [r1, #0]
 8000118:	3104      	adds	r1, #4
 800011a:	e7fa      	b.n	8000112 <bloop>

0800011c <endbloop>:
 800011c:	f002 f918 	bl	8002350 <__init_ram_areas>
 8000120:	f002 f906 	bl	8002330 <__late_init>
 8000124:	4c13      	ldr	r4, [pc, #76]	; (8000174 <endfiniloop+0x2c>)
 8000126:	4d14      	ldr	r5, [pc, #80]	; (8000178 <endfiniloop+0x30>)

08000128 <initloop>:
 8000128:	42ac      	cmp	r4, r5
 800012a:	da03      	bge.n	8000134 <endinitloop>
 800012c:	6821      	ldr	r1, [r4, #0]
 800012e:	4788      	blx	r1
 8000130:	3404      	adds	r4, #4
 8000132:	e7f9      	b.n	8000128 <initloop>

08000134 <endinitloop>:
 8000134:	f005 f88c 	bl	8005250 <main>
 8000138:	4c10      	ldr	r4, [pc, #64]	; (800017c <endfiniloop+0x34>)
 800013a:	4d11      	ldr	r5, [pc, #68]	; (8000180 <endfiniloop+0x38>)

0800013c <finiloop>:
 800013c:	42ac      	cmp	r4, r5
 800013e:	da03      	bge.n	8000148 <endfiniloop>
 8000140:	6821      	ldr	r1, [r4, #0]
 8000142:	4788      	blx	r1
 8000144:	3404      	adds	r4, #4
 8000146:	e7f9      	b.n	800013c <finiloop>

08000148 <endfiniloop>:
 8000148:	490e      	ldr	r1, [pc, #56]	; (8000184 <endfiniloop+0x3c>)
 800014a:	4708      	bx	r1
 800014c:	20000c00 	.word	0x20000c00
 8000150:	55555555 	.word	0x55555555
 8000154:	20000000 	.word	0x20000000
 8000158:	20000400 	.word	0x20000400
 800015c:	20000400 	.word	0x20000400
 8000160:	08009990 	.word	0x08009990
 8000164:	20000c00 	.word	0x20000c00
 8000168:	200015bc 	.word	0x200015bc
 800016c:	200015c0 	.word	0x200015c0
 8000170:	20001e68 	.word	0x20001e68
 8000174:	080000c0 	.word	0x080000c0
 8000178:	080000c0 	.word	0x080000c0
 800017c:	080000c0 	.word	0x080000c0
 8000180:	080000c0 	.word	0x080000c0
 8000184:	08002341 	.word	0x08002341
	...

08000190 <_port_switch>:
 8000190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000192:	4644      	mov	r4, r8
 8000194:	464d      	mov	r5, r9
 8000196:	4656      	mov	r6, sl
 8000198:	465f      	mov	r7, fp
 800019a:	b4f0      	push	{r4, r5, r6, r7}
 800019c:	466b      	mov	r3, sp
 800019e:	60cb      	str	r3, [r1, #12]
 80001a0:	68c3      	ldr	r3, [r0, #12]
 80001a2:	469d      	mov	sp, r3
 80001a4:	bcf0      	pop	{r4, r5, r6, r7}
 80001a6:	46a0      	mov	r8, r4
 80001a8:	46a9      	mov	r9, r5
 80001aa:	46b2      	mov	sl, r6
 80001ac:	46bb      	mov	fp, r7
 80001ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b0 <_port_thread_start>:
 80001b0:	f002 fb96 	bl	80028e0 <_dbg_check_unlock>
 80001b4:	b662      	cpsie	i
 80001b6:	1c28      	adds	r0, r5, #0
 80001b8:	47a0      	blx	r4
 80001ba:	2000      	movs	r0, #0
 80001bc:	f003 fa80 	bl	80036c0 <chThdExit>

080001c0 <_port_switch_from_isr>:
 80001c0:	f002 fb76 	bl	80028b0 <_dbg_check_lock>
 80001c4:	f003 f88c 	bl	80032e0 <chSchDoReschedule>
 80001c8:	f002 fb8a 	bl	80028e0 <_dbg_check_unlock>

080001cc <_port_exit_from_isr>:
 80001cc:	4a01      	ldr	r2, [pc, #4]	; (80001d4 <_port_exit_from_isr+0x8>)
 80001ce:	4b02      	ldr	r3, [pc, #8]	; (80001d8 <_port_exit_from_isr+0xc>)
 80001d0:	6013      	str	r3, [r2, #0]
 80001d2:	e7fe      	b.n	80001d2 <_port_exit_from_isr+0x6>
 80001d4:	e000ed04 	.word	0xe000ed04
 80001d8:	80000000 	.word	0x80000000
 80001dc:	00000000 	.word	0x00000000

080001e0 <__udivsi3>:
 80001e0:	2200      	movs	r2, #0
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d374      	bcc.n	80002d2 <__udivsi3+0xf2>
 80001e8:	0903      	lsrs	r3, r0, #4
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d35f      	bcc.n	80002ae <__udivsi3+0xce>
 80001ee:	0a03      	lsrs	r3, r0, #8
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d344      	bcc.n	800027e <__udivsi3+0x9e>
 80001f4:	0b03      	lsrs	r3, r0, #12
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d328      	bcc.n	800024c <__udivsi3+0x6c>
 80001fa:	0c03      	lsrs	r3, r0, #16
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d30d      	bcc.n	800021c <__udivsi3+0x3c>
 8000200:	22ff      	movs	r2, #255	; 0xff
 8000202:	0209      	lsls	r1, r1, #8
 8000204:	ba12      	rev	r2, r2
 8000206:	0c03      	lsrs	r3, r0, #16
 8000208:	428b      	cmp	r3, r1
 800020a:	d302      	bcc.n	8000212 <__udivsi3+0x32>
 800020c:	1212      	asrs	r2, r2, #8
 800020e:	0209      	lsls	r1, r1, #8
 8000210:	d065      	beq.n	80002de <__udivsi3+0xfe>
 8000212:	0b03      	lsrs	r3, r0, #12
 8000214:	428b      	cmp	r3, r1
 8000216:	d319      	bcc.n	800024c <__udivsi3+0x6c>
 8000218:	e000      	b.n	800021c <__udivsi3+0x3c>
 800021a:	0a09      	lsrs	r1, r1, #8
 800021c:	0bc3      	lsrs	r3, r0, #15
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x46>
 8000222:	03cb      	lsls	r3, r1, #15
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0b83      	lsrs	r3, r0, #14
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x52>
 800022e:	038b      	lsls	r3, r1, #14
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0b43      	lsrs	r3, r0, #13
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x5e>
 800023a:	034b      	lsls	r3, r1, #13
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	0b03      	lsrs	r3, r0, #12
 8000242:	428b      	cmp	r3, r1
 8000244:	d301      	bcc.n	800024a <__udivsi3+0x6a>
 8000246:	030b      	lsls	r3, r1, #12
 8000248:	1ac0      	subs	r0, r0, r3
 800024a:	4152      	adcs	r2, r2
 800024c:	0ac3      	lsrs	r3, r0, #11
 800024e:	428b      	cmp	r3, r1
 8000250:	d301      	bcc.n	8000256 <__udivsi3+0x76>
 8000252:	02cb      	lsls	r3, r1, #11
 8000254:	1ac0      	subs	r0, r0, r3
 8000256:	4152      	adcs	r2, r2
 8000258:	0a83      	lsrs	r3, r0, #10
 800025a:	428b      	cmp	r3, r1
 800025c:	d301      	bcc.n	8000262 <__udivsi3+0x82>
 800025e:	028b      	lsls	r3, r1, #10
 8000260:	1ac0      	subs	r0, r0, r3
 8000262:	4152      	adcs	r2, r2
 8000264:	0a43      	lsrs	r3, r0, #9
 8000266:	428b      	cmp	r3, r1
 8000268:	d301      	bcc.n	800026e <__udivsi3+0x8e>
 800026a:	024b      	lsls	r3, r1, #9
 800026c:	1ac0      	subs	r0, r0, r3
 800026e:	4152      	adcs	r2, r2
 8000270:	0a03      	lsrs	r3, r0, #8
 8000272:	428b      	cmp	r3, r1
 8000274:	d301      	bcc.n	800027a <__udivsi3+0x9a>
 8000276:	020b      	lsls	r3, r1, #8
 8000278:	1ac0      	subs	r0, r0, r3
 800027a:	4152      	adcs	r2, r2
 800027c:	d2cd      	bcs.n	800021a <__udivsi3+0x3a>
 800027e:	09c3      	lsrs	r3, r0, #7
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xa8>
 8000284:	01cb      	lsls	r3, r1, #7
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0983      	lsrs	r3, r0, #6
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xb4>
 8000290:	018b      	lsls	r3, r1, #6
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0943      	lsrs	r3, r0, #5
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__udivsi3+0xc0>
 800029c:	014b      	lsls	r3, r1, #5
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0903      	lsrs	r3, r0, #4
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__udivsi3+0xcc>
 80002a8:	010b      	lsls	r3, r1, #4
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	08c3      	lsrs	r3, r0, #3
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__udivsi3+0xd8>
 80002b4:	00cb      	lsls	r3, r1, #3
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0883      	lsrs	r3, r0, #2
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__udivsi3+0xe4>
 80002c0:	008b      	lsls	r3, r1, #2
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0843      	lsrs	r3, r0, #1
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__udivsi3+0xf0>
 80002cc:	004b      	lsls	r3, r1, #1
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	1a41      	subs	r1, r0, r1
 80002d4:	d200      	bcs.n	80002d8 <__udivsi3+0xf8>
 80002d6:	4601      	mov	r1, r0
 80002d8:	4152      	adcs	r2, r2
 80002da:	4610      	mov	r0, r2
 80002dc:	4770      	bx	lr
 80002de:	e7ff      	b.n	80002e0 <__udivsi3+0x100>
 80002e0:	b501      	push	{r0, lr}
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 f80c 	bl	8000300 <__aeabi_idiv0>
 80002e8:	bd02      	pop	{r1, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)

080002ec <__aeabi_uidivmod>:
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d0f7      	beq.n	80002e0 <__udivsi3+0x100>
 80002f0:	e776      	b.n	80001e0 <__udivsi3>
 80002f2:	4770      	bx	lr
	...

08000300 <__aeabi_idiv0>:
 8000300:	4770      	bx	lr
 8000302:	46c0      	nop			; (mov r8, r8)
	...

08000310 <__divsi3>:
 8000310:	4603      	mov	r3, r0
 8000312:	430b      	orrs	r3, r1
 8000314:	d47f      	bmi.n	8000416 <__divsi3+0x106>
 8000316:	2200      	movs	r2, #0
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d374      	bcc.n	8000408 <__divsi3+0xf8>
 800031e:	0903      	lsrs	r3, r0, #4
 8000320:	428b      	cmp	r3, r1
 8000322:	d35f      	bcc.n	80003e4 <__divsi3+0xd4>
 8000324:	0a03      	lsrs	r3, r0, #8
 8000326:	428b      	cmp	r3, r1
 8000328:	d344      	bcc.n	80003b4 <__divsi3+0xa4>
 800032a:	0b03      	lsrs	r3, r0, #12
 800032c:	428b      	cmp	r3, r1
 800032e:	d328      	bcc.n	8000382 <__divsi3+0x72>
 8000330:	0c03      	lsrs	r3, r0, #16
 8000332:	428b      	cmp	r3, r1
 8000334:	d30d      	bcc.n	8000352 <__divsi3+0x42>
 8000336:	22ff      	movs	r2, #255	; 0xff
 8000338:	0209      	lsls	r1, r1, #8
 800033a:	ba12      	rev	r2, r2
 800033c:	0c03      	lsrs	r3, r0, #16
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__divsi3+0x38>
 8000342:	1212      	asrs	r2, r2, #8
 8000344:	0209      	lsls	r1, r1, #8
 8000346:	d065      	beq.n	8000414 <__divsi3+0x104>
 8000348:	0b03      	lsrs	r3, r0, #12
 800034a:	428b      	cmp	r3, r1
 800034c:	d319      	bcc.n	8000382 <__divsi3+0x72>
 800034e:	e000      	b.n	8000352 <__divsi3+0x42>
 8000350:	0a09      	lsrs	r1, r1, #8
 8000352:	0bc3      	lsrs	r3, r0, #15
 8000354:	428b      	cmp	r3, r1
 8000356:	d301      	bcc.n	800035c <__divsi3+0x4c>
 8000358:	03cb      	lsls	r3, r1, #15
 800035a:	1ac0      	subs	r0, r0, r3
 800035c:	4152      	adcs	r2, r2
 800035e:	0b83      	lsrs	r3, r0, #14
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x58>
 8000364:	038b      	lsls	r3, r1, #14
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0b43      	lsrs	r3, r0, #13
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x64>
 8000370:	034b      	lsls	r3, r1, #13
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0b03      	lsrs	r3, r0, #12
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x70>
 800037c:	030b      	lsls	r3, r1, #12
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0ac3      	lsrs	r3, r0, #11
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x7c>
 8000388:	02cb      	lsls	r3, r1, #11
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0a83      	lsrs	r3, r0, #10
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x88>
 8000394:	028b      	lsls	r3, r1, #10
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0a43      	lsrs	r3, r0, #9
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x94>
 80003a0:	024b      	lsls	r3, r1, #9
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0xa0>
 80003ac:	020b      	lsls	r3, r1, #8
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	d2cd      	bcs.n	8000350 <__divsi3+0x40>
 80003b4:	09c3      	lsrs	r3, r0, #7
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d301      	bcc.n	80003be <__divsi3+0xae>
 80003ba:	01cb      	lsls	r3, r1, #7
 80003bc:	1ac0      	subs	r0, r0, r3
 80003be:	4152      	adcs	r2, r2
 80003c0:	0983      	lsrs	r3, r0, #6
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0xba>
 80003c6:	018b      	lsls	r3, r1, #6
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	0943      	lsrs	r3, r0, #5
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0xc6>
 80003d2:	014b      	lsls	r3, r1, #5
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	0903      	lsrs	r3, r0, #4
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0xd2>
 80003de:	010b      	lsls	r3, r1, #4
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	08c3      	lsrs	r3, r0, #3
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0xde>
 80003ea:	00cb      	lsls	r3, r1, #3
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	0883      	lsrs	r3, r0, #2
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d301      	bcc.n	80003fa <__divsi3+0xea>
 80003f6:	008b      	lsls	r3, r1, #2
 80003f8:	1ac0      	subs	r0, r0, r3
 80003fa:	4152      	adcs	r2, r2
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0xf6>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0xfe>
 800040c:	4601      	mov	r1, r0
 800040e:	4152      	adcs	r2, r2
 8000410:	4610      	mov	r0, r2
 8000412:	4770      	bx	lr
 8000414:	e05d      	b.n	80004d2 <__divsi3+0x1c2>
 8000416:	0fca      	lsrs	r2, r1, #31
 8000418:	d000      	beq.n	800041c <__divsi3+0x10c>
 800041a:	4249      	negs	r1, r1
 800041c:	1003      	asrs	r3, r0, #32
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x112>
 8000420:	4240      	negs	r0, r0
 8000422:	4053      	eors	r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	469c      	mov	ip, r3
 8000428:	0903      	lsrs	r3, r0, #4
 800042a:	428b      	cmp	r3, r1
 800042c:	d32d      	bcc.n	800048a <__divsi3+0x17a>
 800042e:	0a03      	lsrs	r3, r0, #8
 8000430:	428b      	cmp	r3, r1
 8000432:	d312      	bcc.n	800045a <__divsi3+0x14a>
 8000434:	22fc      	movs	r2, #252	; 0xfc
 8000436:	0189      	lsls	r1, r1, #6
 8000438:	ba12      	rev	r2, r2
 800043a:	0a03      	lsrs	r3, r0, #8
 800043c:	428b      	cmp	r3, r1
 800043e:	d30c      	bcc.n	800045a <__divsi3+0x14a>
 8000440:	0189      	lsls	r1, r1, #6
 8000442:	1192      	asrs	r2, r2, #6
 8000444:	428b      	cmp	r3, r1
 8000446:	d308      	bcc.n	800045a <__divsi3+0x14a>
 8000448:	0189      	lsls	r1, r1, #6
 800044a:	1192      	asrs	r2, r2, #6
 800044c:	428b      	cmp	r3, r1
 800044e:	d304      	bcc.n	800045a <__divsi3+0x14a>
 8000450:	0189      	lsls	r1, r1, #6
 8000452:	d03a      	beq.n	80004ca <__divsi3+0x1ba>
 8000454:	1192      	asrs	r2, r2, #6
 8000456:	e000      	b.n	800045a <__divsi3+0x14a>
 8000458:	0989      	lsrs	r1, r1, #6
 800045a:	09c3      	lsrs	r3, r0, #7
 800045c:	428b      	cmp	r3, r1
 800045e:	d301      	bcc.n	8000464 <__divsi3+0x154>
 8000460:	01cb      	lsls	r3, r1, #7
 8000462:	1ac0      	subs	r0, r0, r3
 8000464:	4152      	adcs	r2, r2
 8000466:	0983      	lsrs	r3, r0, #6
 8000468:	428b      	cmp	r3, r1
 800046a:	d301      	bcc.n	8000470 <__divsi3+0x160>
 800046c:	018b      	lsls	r3, r1, #6
 800046e:	1ac0      	subs	r0, r0, r3
 8000470:	4152      	adcs	r2, r2
 8000472:	0943      	lsrs	r3, r0, #5
 8000474:	428b      	cmp	r3, r1
 8000476:	d301      	bcc.n	800047c <__divsi3+0x16c>
 8000478:	014b      	lsls	r3, r1, #5
 800047a:	1ac0      	subs	r0, r0, r3
 800047c:	4152      	adcs	r2, r2
 800047e:	0903      	lsrs	r3, r0, #4
 8000480:	428b      	cmp	r3, r1
 8000482:	d301      	bcc.n	8000488 <__divsi3+0x178>
 8000484:	010b      	lsls	r3, r1, #4
 8000486:	1ac0      	subs	r0, r0, r3
 8000488:	4152      	adcs	r2, r2
 800048a:	08c3      	lsrs	r3, r0, #3
 800048c:	428b      	cmp	r3, r1
 800048e:	d301      	bcc.n	8000494 <__divsi3+0x184>
 8000490:	00cb      	lsls	r3, r1, #3
 8000492:	1ac0      	subs	r0, r0, r3
 8000494:	4152      	adcs	r2, r2
 8000496:	0883      	lsrs	r3, r0, #2
 8000498:	428b      	cmp	r3, r1
 800049a:	d301      	bcc.n	80004a0 <__divsi3+0x190>
 800049c:	008b      	lsls	r3, r1, #2
 800049e:	1ac0      	subs	r0, r0, r3
 80004a0:	4152      	adcs	r2, r2
 80004a2:	d2d9      	bcs.n	8000458 <__divsi3+0x148>
 80004a4:	0843      	lsrs	r3, r0, #1
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d301      	bcc.n	80004ae <__divsi3+0x19e>
 80004aa:	004b      	lsls	r3, r1, #1
 80004ac:	1ac0      	subs	r0, r0, r3
 80004ae:	4152      	adcs	r2, r2
 80004b0:	1a41      	subs	r1, r0, r1
 80004b2:	d200      	bcs.n	80004b6 <__divsi3+0x1a6>
 80004b4:	4601      	mov	r1, r0
 80004b6:	4663      	mov	r3, ip
 80004b8:	4152      	adcs	r2, r2
 80004ba:	105b      	asrs	r3, r3, #1
 80004bc:	4610      	mov	r0, r2
 80004be:	d301      	bcc.n	80004c4 <__divsi3+0x1b4>
 80004c0:	4240      	negs	r0, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d500      	bpl.n	80004c8 <__divsi3+0x1b8>
 80004c6:	4249      	negs	r1, r1
 80004c8:	4770      	bx	lr
 80004ca:	4663      	mov	r3, ip
 80004cc:	105b      	asrs	r3, r3, #1
 80004ce:	d300      	bcc.n	80004d2 <__divsi3+0x1c2>
 80004d0:	4240      	negs	r0, r0
 80004d2:	b501      	push	{r0, lr}
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff13 	bl	8000300 <__aeabi_idiv0>
 80004da:	bd02      	pop	{r1, pc}

080004dc <__aeabi_idivmod>:
 80004dc:	2900      	cmp	r1, #0
 80004de:	d0f8      	beq.n	80004d2 <__divsi3+0x1c2>
 80004e0:	e716      	b.n	8000310 <__divsi3>
 80004e2:	4770      	bx	lr
	...

080004f0 <__aeabi_cdrcmple>:
 80004f0:	4684      	mov	ip, r0
 80004f2:	1c10      	adds	r0, r2, #0
 80004f4:	4662      	mov	r2, ip
 80004f6:	468c      	mov	ip, r1
 80004f8:	1c19      	adds	r1, r3, #0
 80004fa:	4663      	mov	r3, ip
 80004fc:	e000      	b.n	8000500 <__aeabi_cdcmpeq>
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_cdcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f001 f805 	bl	8001510 <__ledf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cdcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_dcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 ff55 	bl	80013c0 <__eqdf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_dcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fff7 	bl	8001510 <__ledf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_dcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_dcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 ffed 	bl	8001510 <__ledf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_dcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_dcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 ff7b 	bl	8001440 <__gedf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_dcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_dcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 ff71 	bl	8001440 <__gedf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_dcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	0000      	movs	r0, r0
	...

08000570 <__aeabi_uldivmod>:
 8000570:	2b00      	cmp	r3, #0
 8000572:	d111      	bne.n	8000598 <__aeabi_uldivmod+0x28>
 8000574:	2a00      	cmp	r2, #0
 8000576:	d10f      	bne.n	8000598 <__aeabi_uldivmod+0x28>
 8000578:	2900      	cmp	r1, #0
 800057a:	d100      	bne.n	800057e <__aeabi_uldivmod+0xe>
 800057c:	2800      	cmp	r0, #0
 800057e:	d002      	beq.n	8000586 <__aeabi_uldivmod+0x16>
 8000580:	2100      	movs	r1, #0
 8000582:	43c9      	mvns	r1, r1
 8000584:	1c08      	adds	r0, r1, #0
 8000586:	b407      	push	{r0, r1, r2}
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <__aeabi_uldivmod+0x24>)
 800058a:	a102      	add	r1, pc, #8	; (adr r1, 8000594 <__aeabi_uldivmod+0x24>)
 800058c:	1840      	adds	r0, r0, r1
 800058e:	9002      	str	r0, [sp, #8]
 8000590:	bd03      	pop	{r0, r1, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	fffffd6d 	.word	0xfffffd6d
 8000598:	b403      	push	{r0, r1}
 800059a:	4668      	mov	r0, sp
 800059c:	b501      	push	{r0, lr}
 800059e:	9802      	ldr	r0, [sp, #8]
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	9b01      	ldr	r3, [sp, #4]
 80005a6:	469e      	mov	lr, r3
 80005a8:	b002      	add	sp, #8
 80005aa:	bc0c      	pop	{r2, r3}
 80005ac:	4770      	bx	lr
 80005ae:	46c0      	nop			; (mov r8, r8)

080005b0 <__udivmoddi4>:
 80005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b2:	4657      	mov	r7, sl
 80005b4:	464e      	mov	r6, r9
 80005b6:	4645      	mov	r5, r8
 80005b8:	46de      	mov	lr, fp
 80005ba:	b5e0      	push	{r5, r6, r7, lr}
 80005bc:	0004      	movs	r4, r0
 80005be:	b083      	sub	sp, #12
 80005c0:	000d      	movs	r5, r1
 80005c2:	4692      	mov	sl, r2
 80005c4:	4699      	mov	r9, r3
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d82f      	bhi.n	800062a <__udivmoddi4+0x7a>
 80005ca:	d02c      	beq.n	8000626 <__udivmoddi4+0x76>
 80005cc:	4649      	mov	r1, r9
 80005ce:	4650      	mov	r0, sl
 80005d0:	f001 fe96 	bl	8002300 <__clzdi2>
 80005d4:	0029      	movs	r1, r5
 80005d6:	0006      	movs	r6, r0
 80005d8:	0020      	movs	r0, r4
 80005da:	f001 fe91 	bl	8002300 <__clzdi2>
 80005de:	1a33      	subs	r3, r6, r0
 80005e0:	4698      	mov	r8, r3
 80005e2:	3b20      	subs	r3, #32
 80005e4:	469b      	mov	fp, r3
 80005e6:	d500      	bpl.n	80005ea <__udivmoddi4+0x3a>
 80005e8:	e074      	b.n	80006d4 <__udivmoddi4+0x124>
 80005ea:	4653      	mov	r3, sl
 80005ec:	465a      	mov	r2, fp
 80005ee:	4093      	lsls	r3, r2
 80005f0:	001f      	movs	r7, r3
 80005f2:	4653      	mov	r3, sl
 80005f4:	4642      	mov	r2, r8
 80005f6:	4093      	lsls	r3, r2
 80005f8:	001e      	movs	r6, r3
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d829      	bhi.n	8000652 <__udivmoddi4+0xa2>
 80005fe:	d026      	beq.n	800064e <__udivmoddi4+0x9e>
 8000600:	465b      	mov	r3, fp
 8000602:	1ba4      	subs	r4, r4, r6
 8000604:	41bd      	sbcs	r5, r7
 8000606:	2b00      	cmp	r3, #0
 8000608:	da00      	bge.n	800060c <__udivmoddi4+0x5c>
 800060a:	e079      	b.n	8000700 <__udivmoddi4+0x150>
 800060c:	2200      	movs	r2, #0
 800060e:	2300      	movs	r3, #0
 8000610:	9200      	str	r2, [sp, #0]
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	465a      	mov	r2, fp
 8000618:	4093      	lsls	r3, r2
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2301      	movs	r3, #1
 800061e:	4642      	mov	r2, r8
 8000620:	4093      	lsls	r3, r2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	e019      	b.n	800065a <__udivmoddi4+0xaa>
 8000626:	4282      	cmp	r2, r0
 8000628:	d9d0      	bls.n	80005cc <__udivmoddi4+0x1c>
 800062a:	2200      	movs	r2, #0
 800062c:	2300      	movs	r3, #0
 800062e:	9200      	str	r2, [sp, #0]
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <__udivmoddi4+0x8c>
 8000638:	601c      	str	r4, [r3, #0]
 800063a:	605d      	str	r5, [r3, #4]
 800063c:	9800      	ldr	r0, [sp, #0]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	b003      	add	sp, #12
 8000642:	bc3c      	pop	{r2, r3, r4, r5}
 8000644:	4690      	mov	r8, r2
 8000646:	4699      	mov	r9, r3
 8000648:	46a2      	mov	sl, r4
 800064a:	46ab      	mov	fp, r5
 800064c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064e:	42a3      	cmp	r3, r4
 8000650:	d9d6      	bls.n	8000600 <__udivmoddi4+0x50>
 8000652:	2200      	movs	r2, #0
 8000654:	2300      	movs	r3, #0
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	4643      	mov	r3, r8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0e8      	beq.n	8000632 <__udivmoddi4+0x82>
 8000660:	07fb      	lsls	r3, r7, #31
 8000662:	0872      	lsrs	r2, r6, #1
 8000664:	431a      	orrs	r2, r3
 8000666:	4646      	mov	r6, r8
 8000668:	087b      	lsrs	r3, r7, #1
 800066a:	e00e      	b.n	800068a <__udivmoddi4+0xda>
 800066c:	42ab      	cmp	r3, r5
 800066e:	d101      	bne.n	8000674 <__udivmoddi4+0xc4>
 8000670:	42a2      	cmp	r2, r4
 8000672:	d80c      	bhi.n	800068e <__udivmoddi4+0xde>
 8000674:	1aa4      	subs	r4, r4, r2
 8000676:	419d      	sbcs	r5, r3
 8000678:	2001      	movs	r0, #1
 800067a:	1924      	adds	r4, r4, r4
 800067c:	416d      	adcs	r5, r5
 800067e:	2100      	movs	r1, #0
 8000680:	3e01      	subs	r6, #1
 8000682:	1824      	adds	r4, r4, r0
 8000684:	414d      	adcs	r5, r1
 8000686:	2e00      	cmp	r6, #0
 8000688:	d006      	beq.n	8000698 <__udivmoddi4+0xe8>
 800068a:	42ab      	cmp	r3, r5
 800068c:	d9ee      	bls.n	800066c <__udivmoddi4+0xbc>
 800068e:	3e01      	subs	r6, #1
 8000690:	1924      	adds	r4, r4, r4
 8000692:	416d      	adcs	r5, r5
 8000694:	2e00      	cmp	r6, #0
 8000696:	d1f8      	bne.n	800068a <__udivmoddi4+0xda>
 8000698:	465b      	mov	r3, fp
 800069a:	9800      	ldr	r0, [sp, #0]
 800069c:	9901      	ldr	r1, [sp, #4]
 800069e:	1900      	adds	r0, r0, r4
 80006a0:	4169      	adcs	r1, r5
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db22      	blt.n	80006ec <__udivmoddi4+0x13c>
 80006a6:	002b      	movs	r3, r5
 80006a8:	465a      	mov	r2, fp
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4644      	mov	r4, r8
 80006b0:	40e2      	lsrs	r2, r4
 80006b2:	001c      	movs	r4, r3
 80006b4:	465b      	mov	r3, fp
 80006b6:	0015      	movs	r5, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db2c      	blt.n	8000716 <__udivmoddi4+0x166>
 80006bc:	0026      	movs	r6, r4
 80006be:	409e      	lsls	r6, r3
 80006c0:	0033      	movs	r3, r6
 80006c2:	0026      	movs	r6, r4
 80006c4:	4647      	mov	r7, r8
 80006c6:	40be      	lsls	r6, r7
 80006c8:	0032      	movs	r2, r6
 80006ca:	1a80      	subs	r0, r0, r2
 80006cc:	4199      	sbcs	r1, r3
 80006ce:	9000      	str	r0, [sp, #0]
 80006d0:	9101      	str	r1, [sp, #4]
 80006d2:	e7ae      	b.n	8000632 <__udivmoddi4+0x82>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	4652      	mov	r2, sl
 80006dc:	40da      	lsrs	r2, r3
 80006de:	4641      	mov	r1, r8
 80006e0:	0013      	movs	r3, r2
 80006e2:	464a      	mov	r2, r9
 80006e4:	408a      	lsls	r2, r1
 80006e6:	0017      	movs	r7, r2
 80006e8:	431f      	orrs	r7, r3
 80006ea:	e782      	b.n	80005f2 <__udivmoddi4+0x42>
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	002a      	movs	r2, r5
 80006f4:	4646      	mov	r6, r8
 80006f6:	409a      	lsls	r2, r3
 80006f8:	0023      	movs	r3, r4
 80006fa:	40f3      	lsrs	r3, r6
 80006fc:	4313      	orrs	r3, r2
 80006fe:	e7d5      	b.n	80006ac <__udivmoddi4+0xfc>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	2100      	movs	r1, #0
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	9201      	str	r2, [sp, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	40da      	lsrs	r2, r3
 8000712:	9201      	str	r2, [sp, #4]
 8000714:	e782      	b.n	800061c <__udivmoddi4+0x6c>
 8000716:	4642      	mov	r2, r8
 8000718:	2320      	movs	r3, #32
 800071a:	0026      	movs	r6, r4
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	40de      	lsrs	r6, r3
 8000720:	002f      	movs	r7, r5
 8000722:	46b4      	mov	ip, r6
 8000724:	4097      	lsls	r7, r2
 8000726:	4666      	mov	r6, ip
 8000728:	003b      	movs	r3, r7
 800072a:	4333      	orrs	r3, r6
 800072c:	e7c9      	b.n	80006c2 <__udivmoddi4+0x112>
 800072e:	46c0      	nop			; (mov r8, r8)

08000730 <__aeabi_dadd>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4645      	mov	r5, r8
 8000734:	46de      	mov	lr, fp
 8000736:	4657      	mov	r7, sl
 8000738:	464e      	mov	r6, r9
 800073a:	030c      	lsls	r4, r1, #12
 800073c:	b5e0      	push	{r5, r6, r7, lr}
 800073e:	004e      	lsls	r6, r1, #1
 8000740:	0fc9      	lsrs	r1, r1, #31
 8000742:	4688      	mov	r8, r1
 8000744:	000d      	movs	r5, r1
 8000746:	0a61      	lsrs	r1, r4, #9
 8000748:	0f44      	lsrs	r4, r0, #29
 800074a:	430c      	orrs	r4, r1
 800074c:	00c7      	lsls	r7, r0, #3
 800074e:	0319      	lsls	r1, r3, #12
 8000750:	0058      	lsls	r0, r3, #1
 8000752:	0fdb      	lsrs	r3, r3, #31
 8000754:	469b      	mov	fp, r3
 8000756:	0a4b      	lsrs	r3, r1, #9
 8000758:	0f51      	lsrs	r1, r2, #29
 800075a:	430b      	orrs	r3, r1
 800075c:	0d76      	lsrs	r6, r6, #21
 800075e:	0d40      	lsrs	r0, r0, #21
 8000760:	0019      	movs	r1, r3
 8000762:	00d2      	lsls	r2, r2, #3
 8000764:	45d8      	cmp	r8, fp
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0x3a>
 8000768:	e0ae      	b.n	80008c8 <__aeabi_dadd+0x198>
 800076a:	1a35      	subs	r5, r6, r0
 800076c:	2d00      	cmp	r5, #0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x42>
 8000770:	e0f6      	b.n	8000960 <__aeabi_dadd+0x230>
 8000772:	2800      	cmp	r0, #0
 8000774:	d10f      	bne.n	8000796 <__aeabi_dadd+0x66>
 8000776:	4313      	orrs	r3, r2
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x4c>
 800077a:	e0db      	b.n	8000934 <__aeabi_dadd+0x204>
 800077c:	1e6b      	subs	r3, r5, #1
 800077e:	2b00      	cmp	r3, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_dadd+0x54>
 8000782:	e137      	b.n	80009f4 <__aeabi_dadd+0x2c4>
 8000784:	1aba      	subs	r2, r7, r2
 8000786:	4297      	cmp	r7, r2
 8000788:	41bf      	sbcs	r7, r7
 800078a:	1a64      	subs	r4, r4, r1
 800078c:	427f      	negs	r7, r7
 800078e:	1be4      	subs	r4, r4, r7
 8000790:	2601      	movs	r6, #1
 8000792:	0017      	movs	r7, r2
 8000794:	e024      	b.n	80007e0 <__aeabi_dadd+0xb0>
 8000796:	4bc6      	ldr	r3, [pc, #792]	; (8000ab0 <__aeabi_dadd+0x380>)
 8000798:	429e      	cmp	r6, r3
 800079a:	d04d      	beq.n	8000838 <__aeabi_dadd+0x108>
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	4319      	orrs	r1, r3
 80007a2:	2d38      	cmp	r5, #56	; 0x38
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x78>
 80007a6:	e107      	b.n	80009b8 <__aeabi_dadd+0x288>
 80007a8:	2d1f      	cmp	r5, #31
 80007aa:	dd00      	ble.n	80007ae <__aeabi_dadd+0x7e>
 80007ac:	e138      	b.n	8000a20 <__aeabi_dadd+0x2f0>
 80007ae:	2020      	movs	r0, #32
 80007b0:	1b43      	subs	r3, r0, r5
 80007b2:	469a      	mov	sl, r3
 80007b4:	000b      	movs	r3, r1
 80007b6:	4650      	mov	r0, sl
 80007b8:	4083      	lsls	r3, r0
 80007ba:	4699      	mov	r9, r3
 80007bc:	0013      	movs	r3, r2
 80007be:	4648      	mov	r0, r9
 80007c0:	40eb      	lsrs	r3, r5
 80007c2:	4318      	orrs	r0, r3
 80007c4:	0003      	movs	r3, r0
 80007c6:	4650      	mov	r0, sl
 80007c8:	4082      	lsls	r2, r0
 80007ca:	1e50      	subs	r0, r2, #1
 80007cc:	4182      	sbcs	r2, r0
 80007ce:	40e9      	lsrs	r1, r5
 80007d0:	431a      	orrs	r2, r3
 80007d2:	1aba      	subs	r2, r7, r2
 80007d4:	1a61      	subs	r1, r4, r1
 80007d6:	4297      	cmp	r7, r2
 80007d8:	41a4      	sbcs	r4, r4
 80007da:	0017      	movs	r7, r2
 80007dc:	4264      	negs	r4, r4
 80007de:	1b0c      	subs	r4, r1, r4
 80007e0:	0223      	lsls	r3, r4, #8
 80007e2:	d562      	bpl.n	80008aa <__aeabi_dadd+0x17a>
 80007e4:	0264      	lsls	r4, r4, #9
 80007e6:	0a65      	lsrs	r5, r4, #9
 80007e8:	2d00      	cmp	r5, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0xbe>
 80007ec:	e0df      	b.n	80009ae <__aeabi_dadd+0x27e>
 80007ee:	0028      	movs	r0, r5
 80007f0:	f001 fd66 	bl	80022c0 <__clzsi2>
 80007f4:	0003      	movs	r3, r0
 80007f6:	3b08      	subs	r3, #8
 80007f8:	2b1f      	cmp	r3, #31
 80007fa:	dd00      	ble.n	80007fe <__aeabi_dadd+0xce>
 80007fc:	e0d2      	b.n	80009a4 <__aeabi_dadd+0x274>
 80007fe:	2220      	movs	r2, #32
 8000800:	003c      	movs	r4, r7
 8000802:	1ad2      	subs	r2, r2, r3
 8000804:	409d      	lsls	r5, r3
 8000806:	40d4      	lsrs	r4, r2
 8000808:	409f      	lsls	r7, r3
 800080a:	4325      	orrs	r5, r4
 800080c:	429e      	cmp	r6, r3
 800080e:	dd00      	ble.n	8000812 <__aeabi_dadd+0xe2>
 8000810:	e0c4      	b.n	800099c <__aeabi_dadd+0x26c>
 8000812:	1b9e      	subs	r6, r3, r6
 8000814:	1c73      	adds	r3, r6, #1
 8000816:	2b1f      	cmp	r3, #31
 8000818:	dd00      	ble.n	800081c <__aeabi_dadd+0xec>
 800081a:	e0f1      	b.n	8000a00 <__aeabi_dadd+0x2d0>
 800081c:	2220      	movs	r2, #32
 800081e:	0038      	movs	r0, r7
 8000820:	0029      	movs	r1, r5
 8000822:	1ad2      	subs	r2, r2, r3
 8000824:	40d8      	lsrs	r0, r3
 8000826:	4091      	lsls	r1, r2
 8000828:	4097      	lsls	r7, r2
 800082a:	002c      	movs	r4, r5
 800082c:	4301      	orrs	r1, r0
 800082e:	1e78      	subs	r0, r7, #1
 8000830:	4187      	sbcs	r7, r0
 8000832:	40dc      	lsrs	r4, r3
 8000834:	2600      	movs	r6, #0
 8000836:	430f      	orrs	r7, r1
 8000838:	077b      	lsls	r3, r7, #29
 800083a:	d009      	beq.n	8000850 <__aeabi_dadd+0x120>
 800083c:	230f      	movs	r3, #15
 800083e:	403b      	ands	r3, r7
 8000840:	2b04      	cmp	r3, #4
 8000842:	d005      	beq.n	8000850 <__aeabi_dadd+0x120>
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	42bb      	cmp	r3, r7
 8000848:	41bf      	sbcs	r7, r7
 800084a:	427f      	negs	r7, r7
 800084c:	19e4      	adds	r4, r4, r7
 800084e:	001f      	movs	r7, r3
 8000850:	0223      	lsls	r3, r4, #8
 8000852:	d52c      	bpl.n	80008ae <__aeabi_dadd+0x17e>
 8000854:	4b96      	ldr	r3, [pc, #600]	; (8000ab0 <__aeabi_dadd+0x380>)
 8000856:	3601      	adds	r6, #1
 8000858:	429e      	cmp	r6, r3
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x12e>
 800085c:	e09a      	b.n	8000994 <__aeabi_dadd+0x264>
 800085e:	4645      	mov	r5, r8
 8000860:	4b94      	ldr	r3, [pc, #592]	; (8000ab4 <__aeabi_dadd+0x384>)
 8000862:	08ff      	lsrs	r7, r7, #3
 8000864:	401c      	ands	r4, r3
 8000866:	0760      	lsls	r0, r4, #29
 8000868:	0576      	lsls	r6, r6, #21
 800086a:	0264      	lsls	r4, r4, #9
 800086c:	4307      	orrs	r7, r0
 800086e:	0b24      	lsrs	r4, r4, #12
 8000870:	0d76      	lsrs	r6, r6, #21
 8000872:	2100      	movs	r1, #0
 8000874:	0324      	lsls	r4, r4, #12
 8000876:	0b23      	lsrs	r3, r4, #12
 8000878:	0d0c      	lsrs	r4, r1, #20
 800087a:	4a8f      	ldr	r2, [pc, #572]	; (8000ab8 <__aeabi_dadd+0x388>)
 800087c:	0524      	lsls	r4, r4, #20
 800087e:	431c      	orrs	r4, r3
 8000880:	4014      	ands	r4, r2
 8000882:	0533      	lsls	r3, r6, #20
 8000884:	4323      	orrs	r3, r4
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	07ed      	lsls	r5, r5, #31
 800088a:	085b      	lsrs	r3, r3, #1
 800088c:	432b      	orrs	r3, r5
 800088e:	0038      	movs	r0, r7
 8000890:	0019      	movs	r1, r3
 8000892:	bc3c      	pop	{r2, r3, r4, r5}
 8000894:	4690      	mov	r8, r2
 8000896:	4699      	mov	r9, r3
 8000898:	46a2      	mov	sl, r4
 800089a:	46ab      	mov	fp, r5
 800089c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800089e:	4664      	mov	r4, ip
 80008a0:	4304      	orrs	r4, r0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x176>
 80008a4:	e211      	b.n	8000cca <__aeabi_dadd+0x59a>
 80008a6:	0004      	movs	r4, r0
 80008a8:	4667      	mov	r7, ip
 80008aa:	077b      	lsls	r3, r7, #29
 80008ac:	d1c6      	bne.n	800083c <__aeabi_dadd+0x10c>
 80008ae:	4645      	mov	r5, r8
 80008b0:	0760      	lsls	r0, r4, #29
 80008b2:	08ff      	lsrs	r7, r7, #3
 80008b4:	4307      	orrs	r7, r0
 80008b6:	08e4      	lsrs	r4, r4, #3
 80008b8:	4b7d      	ldr	r3, [pc, #500]	; (8000ab0 <__aeabi_dadd+0x380>)
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d030      	beq.n	8000920 <__aeabi_dadd+0x1f0>
 80008be:	0324      	lsls	r4, r4, #12
 80008c0:	0576      	lsls	r6, r6, #21
 80008c2:	0b24      	lsrs	r4, r4, #12
 80008c4:	0d76      	lsrs	r6, r6, #21
 80008c6:	e7d4      	b.n	8000872 <__aeabi_dadd+0x142>
 80008c8:	1a33      	subs	r3, r6, r0
 80008ca:	469a      	mov	sl, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	dd78      	ble.n	80009c2 <__aeabi_dadd+0x292>
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d031      	beq.n	8000938 <__aeabi_dadd+0x208>
 80008d4:	4876      	ldr	r0, [pc, #472]	; (8000ab0 <__aeabi_dadd+0x380>)
 80008d6:	4286      	cmp	r6, r0
 80008d8:	d0ae      	beq.n	8000838 <__aeabi_dadd+0x108>
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	0400      	lsls	r0, r0, #16
 80008de:	4301      	orrs	r1, r0
 80008e0:	4653      	mov	r3, sl
 80008e2:	2b38      	cmp	r3, #56	; 0x38
 80008e4:	dc00      	bgt.n	80008e8 <__aeabi_dadd+0x1b8>
 80008e6:	e0e9      	b.n	8000abc <__aeabi_dadd+0x38c>
 80008e8:	430a      	orrs	r2, r1
 80008ea:	1e51      	subs	r1, r2, #1
 80008ec:	418a      	sbcs	r2, r1
 80008ee:	2100      	movs	r1, #0
 80008f0:	19d2      	adds	r2, r2, r7
 80008f2:	42ba      	cmp	r2, r7
 80008f4:	41bf      	sbcs	r7, r7
 80008f6:	1909      	adds	r1, r1, r4
 80008f8:	427c      	negs	r4, r7
 80008fa:	0017      	movs	r7, r2
 80008fc:	190c      	adds	r4, r1, r4
 80008fe:	0223      	lsls	r3, r4, #8
 8000900:	d5d3      	bpl.n	80008aa <__aeabi_dadd+0x17a>
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <__aeabi_dadd+0x380>)
 8000904:	3601      	adds	r6, #1
 8000906:	429e      	cmp	r6, r3
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x1dc>
 800090a:	e13a      	b.n	8000b82 <__aeabi_dadd+0x452>
 800090c:	2001      	movs	r0, #1
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <__aeabi_dadd+0x384>)
 8000910:	401c      	ands	r4, r3
 8000912:	087b      	lsrs	r3, r7, #1
 8000914:	4007      	ands	r7, r0
 8000916:	431f      	orrs	r7, r3
 8000918:	07e0      	lsls	r0, r4, #31
 800091a:	4307      	orrs	r7, r0
 800091c:	0864      	lsrs	r4, r4, #1
 800091e:	e78b      	b.n	8000838 <__aeabi_dadd+0x108>
 8000920:	0023      	movs	r3, r4
 8000922:	433b      	orrs	r3, r7
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x1f8>
 8000926:	e1cb      	b.n	8000cc0 <__aeabi_dadd+0x590>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0312      	lsls	r2, r2, #12
 800092c:	4314      	orrs	r4, r2
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	0b24      	lsrs	r4, r4, #12
 8000932:	e79e      	b.n	8000872 <__aeabi_dadd+0x142>
 8000934:	002e      	movs	r6, r5
 8000936:	e77f      	b.n	8000838 <__aeabi_dadd+0x108>
 8000938:	0008      	movs	r0, r1
 800093a:	4310      	orrs	r0, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x210>
 800093e:	e0b4      	b.n	8000aaa <__aeabi_dadd+0x37a>
 8000940:	1e58      	subs	r0, r3, #1
 8000942:	2800      	cmp	r0, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_dadd+0x218>
 8000946:	e0de      	b.n	8000b06 <__aeabi_dadd+0x3d6>
 8000948:	18ba      	adds	r2, r7, r2
 800094a:	42ba      	cmp	r2, r7
 800094c:	419b      	sbcs	r3, r3
 800094e:	1864      	adds	r4, r4, r1
 8000950:	425b      	negs	r3, r3
 8000952:	18e4      	adds	r4, r4, r3
 8000954:	0017      	movs	r7, r2
 8000956:	2601      	movs	r6, #1
 8000958:	0223      	lsls	r3, r4, #8
 800095a:	d5a6      	bpl.n	80008aa <__aeabi_dadd+0x17a>
 800095c:	2602      	movs	r6, #2
 800095e:	e7d5      	b.n	800090c <__aeabi_dadd+0x1dc>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d16e      	bne.n	8000a42 <__aeabi_dadd+0x312>
 8000964:	1c70      	adds	r0, r6, #1
 8000966:	0540      	lsls	r0, r0, #21
 8000968:	0d40      	lsrs	r0, r0, #21
 800096a:	2801      	cmp	r0, #1
 800096c:	dc00      	bgt.n	8000970 <__aeabi_dadd+0x240>
 800096e:	e0f9      	b.n	8000b64 <__aeabi_dadd+0x434>
 8000970:	1ab8      	subs	r0, r7, r2
 8000972:	4684      	mov	ip, r0
 8000974:	4287      	cmp	r7, r0
 8000976:	4180      	sbcs	r0, r0
 8000978:	1ae5      	subs	r5, r4, r3
 800097a:	4240      	negs	r0, r0
 800097c:	1a2d      	subs	r5, r5, r0
 800097e:	0228      	lsls	r0, r5, #8
 8000980:	d400      	bmi.n	8000984 <__aeabi_dadd+0x254>
 8000982:	e089      	b.n	8000a98 <__aeabi_dadd+0x368>
 8000984:	1bd7      	subs	r7, r2, r7
 8000986:	42ba      	cmp	r2, r7
 8000988:	4192      	sbcs	r2, r2
 800098a:	1b1c      	subs	r4, r3, r4
 800098c:	4252      	negs	r2, r2
 800098e:	1aa5      	subs	r5, r4, r2
 8000990:	46d8      	mov	r8, fp
 8000992:	e729      	b.n	80007e8 <__aeabi_dadd+0xb8>
 8000994:	4645      	mov	r5, r8
 8000996:	2400      	movs	r4, #0
 8000998:	2700      	movs	r7, #0
 800099a:	e76a      	b.n	8000872 <__aeabi_dadd+0x142>
 800099c:	4c45      	ldr	r4, [pc, #276]	; (8000ab4 <__aeabi_dadd+0x384>)
 800099e:	1af6      	subs	r6, r6, r3
 80009a0:	402c      	ands	r4, r5
 80009a2:	e749      	b.n	8000838 <__aeabi_dadd+0x108>
 80009a4:	003d      	movs	r5, r7
 80009a6:	3828      	subs	r0, #40	; 0x28
 80009a8:	4085      	lsls	r5, r0
 80009aa:	2700      	movs	r7, #0
 80009ac:	e72e      	b.n	800080c <__aeabi_dadd+0xdc>
 80009ae:	0038      	movs	r0, r7
 80009b0:	f001 fc86 	bl	80022c0 <__clzsi2>
 80009b4:	3020      	adds	r0, #32
 80009b6:	e71d      	b.n	80007f4 <__aeabi_dadd+0xc4>
 80009b8:	430a      	orrs	r2, r1
 80009ba:	1e51      	subs	r1, r2, #1
 80009bc:	418a      	sbcs	r2, r1
 80009be:	2100      	movs	r1, #0
 80009c0:	e707      	b.n	80007d2 <__aeabi_dadd+0xa2>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x298>
 80009c6:	e0f3      	b.n	8000bb0 <__aeabi_dadd+0x480>
 80009c8:	1c70      	adds	r0, r6, #1
 80009ca:	0543      	lsls	r3, r0, #21
 80009cc:	0d5b      	lsrs	r3, r3, #21
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	dc00      	bgt.n	80009d4 <__aeabi_dadd+0x2a4>
 80009d2:	e0ad      	b.n	8000b30 <__aeabi_dadd+0x400>
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <__aeabi_dadd+0x380>)
 80009d6:	4298      	cmp	r0, r3
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x2ac>
 80009da:	e0d1      	b.n	8000b80 <__aeabi_dadd+0x450>
 80009dc:	18ba      	adds	r2, r7, r2
 80009de:	42ba      	cmp	r2, r7
 80009e0:	41bf      	sbcs	r7, r7
 80009e2:	1864      	adds	r4, r4, r1
 80009e4:	427f      	negs	r7, r7
 80009e6:	19e4      	adds	r4, r4, r7
 80009e8:	07e7      	lsls	r7, r4, #31
 80009ea:	0852      	lsrs	r2, r2, #1
 80009ec:	4317      	orrs	r7, r2
 80009ee:	0864      	lsrs	r4, r4, #1
 80009f0:	0006      	movs	r6, r0
 80009f2:	e721      	b.n	8000838 <__aeabi_dadd+0x108>
 80009f4:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <__aeabi_dadd+0x380>)
 80009f6:	4285      	cmp	r5, r0
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x2cc>
 80009fa:	e093      	b.n	8000b24 <__aeabi_dadd+0x3f4>
 80009fc:	001d      	movs	r5, r3
 80009fe:	e6d0      	b.n	80007a2 <__aeabi_dadd+0x72>
 8000a00:	0029      	movs	r1, r5
 8000a02:	3e1f      	subs	r6, #31
 8000a04:	40f1      	lsrs	r1, r6
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dadd+0x2dc>
 8000a0a:	e08d      	b.n	8000b28 <__aeabi_dadd+0x3f8>
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	409d      	lsls	r5, r3
 8000a12:	432f      	orrs	r7, r5
 8000a14:	1e7d      	subs	r5, r7, #1
 8000a16:	41af      	sbcs	r7, r5
 8000a18:	2400      	movs	r4, #0
 8000a1a:	430f      	orrs	r7, r1
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e744      	b.n	80008aa <__aeabi_dadd+0x17a>
 8000a20:	002b      	movs	r3, r5
 8000a22:	0008      	movs	r0, r1
 8000a24:	3b20      	subs	r3, #32
 8000a26:	40d8      	lsrs	r0, r3
 8000a28:	0003      	movs	r3, r0
 8000a2a:	2d20      	cmp	r5, #32
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x300>
 8000a2e:	e07d      	b.n	8000b2c <__aeabi_dadd+0x3fc>
 8000a30:	2040      	movs	r0, #64	; 0x40
 8000a32:	1b45      	subs	r5, r0, r5
 8000a34:	40a9      	lsls	r1, r5
 8000a36:	430a      	orrs	r2, r1
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	418a      	sbcs	r2, r1
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	e6c7      	b.n	80007d2 <__aeabi_dadd+0xa2>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d050      	beq.n	8000ae8 <__aeabi_dadd+0x3b8>
 8000a46:	4e1a      	ldr	r6, [pc, #104]	; (8000ab0 <__aeabi_dadd+0x380>)
 8000a48:	42b0      	cmp	r0, r6
 8000a4a:	d057      	beq.n	8000afc <__aeabi_dadd+0x3cc>
 8000a4c:	2680      	movs	r6, #128	; 0x80
 8000a4e:	426b      	negs	r3, r5
 8000a50:	4699      	mov	r9, r3
 8000a52:	0436      	lsls	r6, r6, #16
 8000a54:	4334      	orrs	r4, r6
 8000a56:	464b      	mov	r3, r9
 8000a58:	2b38      	cmp	r3, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x32e>
 8000a5c:	e0d6      	b.n	8000c0c <__aeabi_dadd+0x4dc>
 8000a5e:	2b1f      	cmp	r3, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x334>
 8000a62:	e135      	b.n	8000cd0 <__aeabi_dadd+0x5a0>
 8000a64:	2620      	movs	r6, #32
 8000a66:	1af5      	subs	r5, r6, r3
 8000a68:	0026      	movs	r6, r4
 8000a6a:	40ae      	lsls	r6, r5
 8000a6c:	46b2      	mov	sl, r6
 8000a6e:	003e      	movs	r6, r7
 8000a70:	40de      	lsrs	r6, r3
 8000a72:	46ac      	mov	ip, r5
 8000a74:	0035      	movs	r5, r6
 8000a76:	4656      	mov	r6, sl
 8000a78:	432e      	orrs	r6, r5
 8000a7a:	4665      	mov	r5, ip
 8000a7c:	40af      	lsls	r7, r5
 8000a7e:	1e7d      	subs	r5, r7, #1
 8000a80:	41af      	sbcs	r7, r5
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	4337      	orrs	r7, r6
 8000a86:	1bd7      	subs	r7, r2, r7
 8000a88:	42ba      	cmp	r2, r7
 8000a8a:	4192      	sbcs	r2, r2
 8000a8c:	1b0c      	subs	r4, r1, r4
 8000a8e:	4252      	negs	r2, r2
 8000a90:	1aa4      	subs	r4, r4, r2
 8000a92:	0006      	movs	r6, r0
 8000a94:	46d8      	mov	r8, fp
 8000a96:	e6a3      	b.n	80007e0 <__aeabi_dadd+0xb0>
 8000a98:	4664      	mov	r4, ip
 8000a9a:	4667      	mov	r7, ip
 8000a9c:	432c      	orrs	r4, r5
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_dadd+0x372>
 8000aa0:	e6a2      	b.n	80007e8 <__aeabi_dadd+0xb8>
 8000aa2:	2500      	movs	r5, #0
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	2700      	movs	r7, #0
 8000aa8:	e706      	b.n	80008b8 <__aeabi_dadd+0x188>
 8000aaa:	001e      	movs	r6, r3
 8000aac:	e6c4      	b.n	8000838 <__aeabi_dadd+0x108>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	000007ff 	.word	0x000007ff
 8000ab4:	ff7fffff 	.word	0xff7fffff
 8000ab8:	800fffff 	.word	0x800fffff
 8000abc:	2b1f      	cmp	r3, #31
 8000abe:	dc63      	bgt.n	8000b88 <__aeabi_dadd+0x458>
 8000ac0:	2020      	movs	r0, #32
 8000ac2:	1ac3      	subs	r3, r0, r3
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	4098      	lsls	r0, r3
 8000ac8:	469c      	mov	ip, r3
 8000aca:	4683      	mov	fp, r0
 8000acc:	4653      	mov	r3, sl
 8000ace:	0010      	movs	r0, r2
 8000ad0:	40d8      	lsrs	r0, r3
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	4658      	mov	r0, fp
 8000ad6:	4318      	orrs	r0, r3
 8000ad8:	4663      	mov	r3, ip
 8000ada:	409a      	lsls	r2, r3
 8000adc:	1e53      	subs	r3, r2, #1
 8000ade:	419a      	sbcs	r2, r3
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	4302      	orrs	r2, r0
 8000ae4:	40d9      	lsrs	r1, r3
 8000ae6:	e703      	b.n	80008f0 <__aeabi_dadd+0x1c0>
 8000ae8:	0026      	movs	r6, r4
 8000aea:	433e      	orrs	r6, r7
 8000aec:	d006      	beq.n	8000afc <__aeabi_dadd+0x3cc>
 8000aee:	43eb      	mvns	r3, r5
 8000af0:	4699      	mov	r9, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0c7      	beq.n	8000a86 <__aeabi_dadd+0x356>
 8000af6:	4e94      	ldr	r6, [pc, #592]	; (8000d48 <__aeabi_dadd+0x618>)
 8000af8:	42b0      	cmp	r0, r6
 8000afa:	d1ac      	bne.n	8000a56 <__aeabi_dadd+0x326>
 8000afc:	000c      	movs	r4, r1
 8000afe:	0017      	movs	r7, r2
 8000b00:	0006      	movs	r6, r0
 8000b02:	46d8      	mov	r8, fp
 8000b04:	e698      	b.n	8000838 <__aeabi_dadd+0x108>
 8000b06:	4b90      	ldr	r3, [pc, #576]	; (8000d48 <__aeabi_dadd+0x618>)
 8000b08:	459a      	cmp	sl, r3
 8000b0a:	d00b      	beq.n	8000b24 <__aeabi_dadd+0x3f4>
 8000b0c:	4682      	mov	sl, r0
 8000b0e:	e6e7      	b.n	80008e0 <__aeabi_dadd+0x1b0>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x3e6>
 8000b14:	e09e      	b.n	8000c54 <__aeabi_dadd+0x524>
 8000b16:	0018      	movs	r0, r3
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x3ee>
 8000b1c:	e0e9      	b.n	8000cf2 <__aeabi_dadd+0x5c2>
 8000b1e:	001c      	movs	r4, r3
 8000b20:	0017      	movs	r7, r2
 8000b22:	46d8      	mov	r8, fp
 8000b24:	4e88      	ldr	r6, [pc, #544]	; (8000d48 <__aeabi_dadd+0x618>)
 8000b26:	e687      	b.n	8000838 <__aeabi_dadd+0x108>
 8000b28:	2500      	movs	r5, #0
 8000b2a:	e772      	b.n	8000a12 <__aeabi_dadd+0x2e2>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e782      	b.n	8000a36 <__aeabi_dadd+0x306>
 8000b30:	0023      	movs	r3, r4
 8000b32:	433b      	orrs	r3, r7
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dadd+0x40a>
 8000b38:	e0ab      	b.n	8000c92 <__aeabi_dadd+0x562>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x410>
 8000b3e:	e0e7      	b.n	8000d10 <__aeabi_dadd+0x5e0>
 8000b40:	000b      	movs	r3, r1
 8000b42:	4313      	orrs	r3, r2
 8000b44:	d100      	bne.n	8000b48 <__aeabi_dadd+0x418>
 8000b46:	e677      	b.n	8000838 <__aeabi_dadd+0x108>
 8000b48:	18ba      	adds	r2, r7, r2
 8000b4a:	42ba      	cmp	r2, r7
 8000b4c:	41bf      	sbcs	r7, r7
 8000b4e:	1864      	adds	r4, r4, r1
 8000b50:	427f      	negs	r7, r7
 8000b52:	19e4      	adds	r4, r4, r7
 8000b54:	0223      	lsls	r3, r4, #8
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_dadd+0x42a>
 8000b58:	e0f2      	b.n	8000d40 <__aeabi_dadd+0x610>
 8000b5a:	4b7c      	ldr	r3, [pc, #496]	; (8000d4c <__aeabi_dadd+0x61c>)
 8000b5c:	0017      	movs	r7, r2
 8000b5e:	401c      	ands	r4, r3
 8000b60:	0006      	movs	r6, r0
 8000b62:	e669      	b.n	8000838 <__aeabi_dadd+0x108>
 8000b64:	0020      	movs	r0, r4
 8000b66:	4338      	orrs	r0, r7
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d1d1      	bne.n	8000b10 <__aeabi_dadd+0x3e0>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d15b      	bne.n	8000c28 <__aeabi_dadd+0x4f8>
 8000b70:	001c      	movs	r4, r3
 8000b72:	4314      	orrs	r4, r2
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dadd+0x448>
 8000b76:	e0a8      	b.n	8000cca <__aeabi_dadd+0x59a>
 8000b78:	001c      	movs	r4, r3
 8000b7a:	0017      	movs	r7, r2
 8000b7c:	46d8      	mov	r8, fp
 8000b7e:	e65b      	b.n	8000838 <__aeabi_dadd+0x108>
 8000b80:	0006      	movs	r6, r0
 8000b82:	2400      	movs	r4, #0
 8000b84:	2700      	movs	r7, #0
 8000b86:	e697      	b.n	80008b8 <__aeabi_dadd+0x188>
 8000b88:	4650      	mov	r0, sl
 8000b8a:	000b      	movs	r3, r1
 8000b8c:	3820      	subs	r0, #32
 8000b8e:	40c3      	lsrs	r3, r0
 8000b90:	4699      	mov	r9, r3
 8000b92:	4653      	mov	r3, sl
 8000b94:	2b20      	cmp	r3, #32
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x46a>
 8000b98:	e095      	b.n	8000cc6 <__aeabi_dadd+0x596>
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	4650      	mov	r0, sl
 8000b9e:	1a1b      	subs	r3, r3, r0
 8000ba0:	4099      	lsls	r1, r3
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	1e51      	subs	r1, r2, #1
 8000ba6:	418a      	sbcs	r2, r1
 8000ba8:	464b      	mov	r3, r9
 8000baa:	2100      	movs	r1, #0
 8000bac:	431a      	orrs	r2, r3
 8000bae:	e69f      	b.n	80008f0 <__aeabi_dadd+0x1c0>
 8000bb0:	2e00      	cmp	r6, #0
 8000bb2:	d130      	bne.n	8000c16 <__aeabi_dadd+0x4e6>
 8000bb4:	0026      	movs	r6, r4
 8000bb6:	433e      	orrs	r6, r7
 8000bb8:	d067      	beq.n	8000c8a <__aeabi_dadd+0x55a>
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	469a      	mov	sl, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d01c      	beq.n	8000bfc <__aeabi_dadd+0x4cc>
 8000bc2:	4e61      	ldr	r6, [pc, #388]	; (8000d48 <__aeabi_dadd+0x618>)
 8000bc4:	42b0      	cmp	r0, r6
 8000bc6:	d060      	beq.n	8000c8a <__aeabi_dadd+0x55a>
 8000bc8:	4653      	mov	r3, sl
 8000bca:	2b38      	cmp	r3, #56	; 0x38
 8000bcc:	dd00      	ble.n	8000bd0 <__aeabi_dadd+0x4a0>
 8000bce:	e096      	b.n	8000cfe <__aeabi_dadd+0x5ce>
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dadd+0x4a6>
 8000bd4:	e09f      	b.n	8000d16 <__aeabi_dadd+0x5e6>
 8000bd6:	2620      	movs	r6, #32
 8000bd8:	1af3      	subs	r3, r6, r3
 8000bda:	0026      	movs	r6, r4
 8000bdc:	409e      	lsls	r6, r3
 8000bde:	469c      	mov	ip, r3
 8000be0:	46b3      	mov	fp, r6
 8000be2:	4653      	mov	r3, sl
 8000be4:	003e      	movs	r6, r7
 8000be6:	40de      	lsrs	r6, r3
 8000be8:	0033      	movs	r3, r6
 8000bea:	465e      	mov	r6, fp
 8000bec:	431e      	orrs	r6, r3
 8000bee:	4663      	mov	r3, ip
 8000bf0:	409f      	lsls	r7, r3
 8000bf2:	1e7b      	subs	r3, r7, #1
 8000bf4:	419f      	sbcs	r7, r3
 8000bf6:	4653      	mov	r3, sl
 8000bf8:	40dc      	lsrs	r4, r3
 8000bfa:	4337      	orrs	r7, r6
 8000bfc:	18bf      	adds	r7, r7, r2
 8000bfe:	4297      	cmp	r7, r2
 8000c00:	4192      	sbcs	r2, r2
 8000c02:	1864      	adds	r4, r4, r1
 8000c04:	4252      	negs	r2, r2
 8000c06:	18a4      	adds	r4, r4, r2
 8000c08:	0006      	movs	r6, r0
 8000c0a:	e678      	b.n	80008fe <__aeabi_dadd+0x1ce>
 8000c0c:	4327      	orrs	r7, r4
 8000c0e:	1e7c      	subs	r4, r7, #1
 8000c10:	41a7      	sbcs	r7, r4
 8000c12:	2400      	movs	r4, #0
 8000c14:	e737      	b.n	8000a86 <__aeabi_dadd+0x356>
 8000c16:	4e4c      	ldr	r6, [pc, #304]	; (8000d48 <__aeabi_dadd+0x618>)
 8000c18:	42b0      	cmp	r0, r6
 8000c1a:	d036      	beq.n	8000c8a <__aeabi_dadd+0x55a>
 8000c1c:	2680      	movs	r6, #128	; 0x80
 8000c1e:	425b      	negs	r3, r3
 8000c20:	0436      	lsls	r6, r6, #16
 8000c22:	469a      	mov	sl, r3
 8000c24:	4334      	orrs	r4, r6
 8000c26:	e7cf      	b.n	8000bc8 <__aeabi_dadd+0x498>
 8000c28:	0018      	movs	r0, r3
 8000c2a:	4310      	orrs	r0, r2
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dadd+0x500>
 8000c2e:	e603      	b.n	8000838 <__aeabi_dadd+0x108>
 8000c30:	1ab8      	subs	r0, r7, r2
 8000c32:	4684      	mov	ip, r0
 8000c34:	4567      	cmp	r7, ip
 8000c36:	41ad      	sbcs	r5, r5
 8000c38:	1ae0      	subs	r0, r4, r3
 8000c3a:	426d      	negs	r5, r5
 8000c3c:	1b40      	subs	r0, r0, r5
 8000c3e:	0205      	lsls	r5, r0, #8
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_dadd+0x514>
 8000c42:	e62c      	b.n	800089e <__aeabi_dadd+0x16e>
 8000c44:	1bd7      	subs	r7, r2, r7
 8000c46:	42ba      	cmp	r2, r7
 8000c48:	4192      	sbcs	r2, r2
 8000c4a:	1b1c      	subs	r4, r3, r4
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	1aa4      	subs	r4, r4, r2
 8000c50:	46d8      	mov	r8, fp
 8000c52:	e5f1      	b.n	8000838 <__aeabi_dadd+0x108>
 8000c54:	0018      	movs	r0, r3
 8000c56:	4310      	orrs	r0, r2
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dadd+0x52c>
 8000c5a:	e763      	b.n	8000b24 <__aeabi_dadd+0x3f4>
 8000c5c:	08f8      	lsrs	r0, r7, #3
 8000c5e:	0767      	lsls	r7, r4, #29
 8000c60:	4307      	orrs	r7, r0
 8000c62:	2080      	movs	r0, #128	; 0x80
 8000c64:	08e4      	lsrs	r4, r4, #3
 8000c66:	0300      	lsls	r0, r0, #12
 8000c68:	4204      	tst	r4, r0
 8000c6a:	d008      	beq.n	8000c7e <__aeabi_dadd+0x54e>
 8000c6c:	08dd      	lsrs	r5, r3, #3
 8000c6e:	4205      	tst	r5, r0
 8000c70:	d105      	bne.n	8000c7e <__aeabi_dadd+0x54e>
 8000c72:	08d2      	lsrs	r2, r2, #3
 8000c74:	0759      	lsls	r1, r3, #29
 8000c76:	4311      	orrs	r1, r2
 8000c78:	000f      	movs	r7, r1
 8000c7a:	002c      	movs	r4, r5
 8000c7c:	46d8      	mov	r8, fp
 8000c7e:	0f7b      	lsrs	r3, r7, #29
 8000c80:	00e4      	lsls	r4, r4, #3
 8000c82:	431c      	orrs	r4, r3
 8000c84:	00ff      	lsls	r7, r7, #3
 8000c86:	4e30      	ldr	r6, [pc, #192]	; (8000d48 <__aeabi_dadd+0x618>)
 8000c88:	e5d6      	b.n	8000838 <__aeabi_dadd+0x108>
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	0017      	movs	r7, r2
 8000c8e:	0006      	movs	r6, r0
 8000c90:	e5d2      	b.n	8000838 <__aeabi_dadd+0x108>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d038      	beq.n	8000d08 <__aeabi_dadd+0x5d8>
 8000c96:	000b      	movs	r3, r1
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x56e>
 8000c9c:	e742      	b.n	8000b24 <__aeabi_dadd+0x3f4>
 8000c9e:	08f8      	lsrs	r0, r7, #3
 8000ca0:	0767      	lsls	r7, r4, #29
 8000ca2:	4307      	orrs	r7, r0
 8000ca4:	2080      	movs	r0, #128	; 0x80
 8000ca6:	08e4      	lsrs	r4, r4, #3
 8000ca8:	0300      	lsls	r0, r0, #12
 8000caa:	4204      	tst	r4, r0
 8000cac:	d0e7      	beq.n	8000c7e <__aeabi_dadd+0x54e>
 8000cae:	08cb      	lsrs	r3, r1, #3
 8000cb0:	4203      	tst	r3, r0
 8000cb2:	d1e4      	bne.n	8000c7e <__aeabi_dadd+0x54e>
 8000cb4:	08d2      	lsrs	r2, r2, #3
 8000cb6:	0749      	lsls	r1, r1, #29
 8000cb8:	4311      	orrs	r1, r2
 8000cba:	000f      	movs	r7, r1
 8000cbc:	001c      	movs	r4, r3
 8000cbe:	e7de      	b.n	8000c7e <__aeabi_dadd+0x54e>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	e5d5      	b.n	8000872 <__aeabi_dadd+0x142>
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e76b      	b.n	8000ba2 <__aeabi_dadd+0x472>
 8000cca:	2500      	movs	r5, #0
 8000ccc:	2700      	movs	r7, #0
 8000cce:	e5f3      	b.n	80008b8 <__aeabi_dadd+0x188>
 8000cd0:	464e      	mov	r6, r9
 8000cd2:	0025      	movs	r5, r4
 8000cd4:	3e20      	subs	r6, #32
 8000cd6:	40f5      	lsrs	r5, r6
 8000cd8:	464b      	mov	r3, r9
 8000cda:	002e      	movs	r6, r5
 8000cdc:	2b20      	cmp	r3, #32
 8000cde:	d02d      	beq.n	8000d3c <__aeabi_dadd+0x60c>
 8000ce0:	2540      	movs	r5, #64	; 0x40
 8000ce2:	1aed      	subs	r5, r5, r3
 8000ce4:	40ac      	lsls	r4, r5
 8000ce6:	4327      	orrs	r7, r4
 8000ce8:	1e7c      	subs	r4, r7, #1
 8000cea:	41a7      	sbcs	r7, r4
 8000cec:	2400      	movs	r4, #0
 8000cee:	4337      	orrs	r7, r6
 8000cf0:	e6c9      	b.n	8000a86 <__aeabi_dadd+0x356>
 8000cf2:	2480      	movs	r4, #128	; 0x80
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	0324      	lsls	r4, r4, #12
 8000cf8:	4e13      	ldr	r6, [pc, #76]	; (8000d48 <__aeabi_dadd+0x618>)
 8000cfa:	2700      	movs	r7, #0
 8000cfc:	e5dc      	b.n	80008b8 <__aeabi_dadd+0x188>
 8000cfe:	4327      	orrs	r7, r4
 8000d00:	1e7c      	subs	r4, r7, #1
 8000d02:	41a7      	sbcs	r7, r4
 8000d04:	2400      	movs	r4, #0
 8000d06:	e779      	b.n	8000bfc <__aeabi_dadd+0x4cc>
 8000d08:	000c      	movs	r4, r1
 8000d0a:	0017      	movs	r7, r2
 8000d0c:	4e0e      	ldr	r6, [pc, #56]	; (8000d48 <__aeabi_dadd+0x618>)
 8000d0e:	e593      	b.n	8000838 <__aeabi_dadd+0x108>
 8000d10:	000c      	movs	r4, r1
 8000d12:	0017      	movs	r7, r2
 8000d14:	e590      	b.n	8000838 <__aeabi_dadd+0x108>
 8000d16:	4656      	mov	r6, sl
 8000d18:	0023      	movs	r3, r4
 8000d1a:	3e20      	subs	r6, #32
 8000d1c:	40f3      	lsrs	r3, r6
 8000d1e:	4699      	mov	r9, r3
 8000d20:	4653      	mov	r3, sl
 8000d22:	2b20      	cmp	r3, #32
 8000d24:	d00e      	beq.n	8000d44 <__aeabi_dadd+0x614>
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	4656      	mov	r6, sl
 8000d2a:	1b9b      	subs	r3, r3, r6
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	4327      	orrs	r7, r4
 8000d30:	1e7c      	subs	r4, r7, #1
 8000d32:	41a7      	sbcs	r7, r4
 8000d34:	464b      	mov	r3, r9
 8000d36:	2400      	movs	r4, #0
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e75f      	b.n	8000bfc <__aeabi_dadd+0x4cc>
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	e7d2      	b.n	8000ce6 <__aeabi_dadd+0x5b6>
 8000d40:	0017      	movs	r7, r2
 8000d42:	e5b2      	b.n	80008aa <__aeabi_dadd+0x17a>
 8000d44:	2400      	movs	r4, #0
 8000d46:	e7f2      	b.n	8000d2e <__aeabi_dadd+0x5fe>
 8000d48:	000007ff 	.word	0x000007ff
 8000d4c:	ff7fffff 	.word	0xff7fffff

08000d50 <__aeabi_ddiv>:
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	4657      	mov	r7, sl
 8000d54:	4645      	mov	r5, r8
 8000d56:	46de      	mov	lr, fp
 8000d58:	464e      	mov	r6, r9
 8000d5a:	b5e0      	push	{r5, r6, r7, lr}
 8000d5c:	004c      	lsls	r4, r1, #1
 8000d5e:	030e      	lsls	r6, r1, #12
 8000d60:	b087      	sub	sp, #28
 8000d62:	4683      	mov	fp, r0
 8000d64:	4692      	mov	sl, r2
 8000d66:	001d      	movs	r5, r3
 8000d68:	4680      	mov	r8, r0
 8000d6a:	0b36      	lsrs	r6, r6, #12
 8000d6c:	0d64      	lsrs	r4, r4, #21
 8000d6e:	0fcf      	lsrs	r7, r1, #31
 8000d70:	2c00      	cmp	r4, #0
 8000d72:	d04f      	beq.n	8000e14 <__aeabi_ddiv+0xc4>
 8000d74:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <__aeabi_ddiv+0x1e4>)
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d035      	beq.n	8000de6 <__aeabi_ddiv+0x96>
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	0f42      	lsrs	r2, r0, #29
 8000d7e:	041b      	lsls	r3, r3, #16
 8000d80:	00f6      	lsls	r6, r6, #3
 8000d82:	4313      	orrs	r3, r2
 8000d84:	4333      	orrs	r3, r6
 8000d86:	4699      	mov	r9, r3
 8000d88:	00c3      	lsls	r3, r0, #3
 8000d8a:	4698      	mov	r8, r3
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <__aeabi_ddiv+0x1e8>)
 8000d8e:	2600      	movs	r6, #0
 8000d90:	469c      	mov	ip, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	4464      	add	r4, ip
 8000d96:	9303      	str	r3, [sp, #12]
 8000d98:	032b      	lsls	r3, r5, #12
 8000d9a:	0b1b      	lsrs	r3, r3, #12
 8000d9c:	469b      	mov	fp, r3
 8000d9e:	006b      	lsls	r3, r5, #1
 8000da0:	0fed      	lsrs	r5, r5, #31
 8000da2:	4650      	mov	r0, sl
 8000da4:	0d5b      	lsrs	r3, r3, #21
 8000da6:	9501      	str	r5, [sp, #4]
 8000da8:	d05e      	beq.n	8000e68 <__aeabi_ddiv+0x118>
 8000daa:	4a62      	ldr	r2, [pc, #392]	; (8000f34 <__aeabi_ddiv+0x1e4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d053      	beq.n	8000e58 <__aeabi_ddiv+0x108>
 8000db0:	465a      	mov	r2, fp
 8000db2:	00d1      	lsls	r1, r2, #3
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0f40      	lsrs	r0, r0, #29
 8000db8:	0412      	lsls	r2, r2, #16
 8000dba:	4302      	orrs	r2, r0
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	4693      	mov	fp, r2
 8000dc0:	4652      	mov	r2, sl
 8000dc2:	00d1      	lsls	r1, r2, #3
 8000dc4:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <__aeabi_ddiv+0x1e8>)
 8000dc6:	4694      	mov	ip, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4463      	add	r3, ip
 8000dcc:	0038      	movs	r0, r7
 8000dce:	4068      	eors	r0, r5
 8000dd0:	4684      	mov	ip, r0
 8000dd2:	9002      	str	r0, [sp, #8]
 8000dd4:	1ae4      	subs	r4, r4, r3
 8000dd6:	4316      	orrs	r6, r2
 8000dd8:	2e0f      	cmp	r6, #15
 8000dda:	d900      	bls.n	8000dde <__aeabi_ddiv+0x8e>
 8000ddc:	e0b4      	b.n	8000f48 <__aeabi_ddiv+0x1f8>
 8000dde:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <__aeabi_ddiv+0x1ec>)
 8000de0:	00b6      	lsls	r6, r6, #2
 8000de2:	599b      	ldr	r3, [r3, r6]
 8000de4:	469f      	mov	pc, r3
 8000de6:	0003      	movs	r3, r0
 8000de8:	4333      	orrs	r3, r6
 8000dea:	4699      	mov	r9, r3
 8000dec:	d16c      	bne.n	8000ec8 <__aeabi_ddiv+0x178>
 8000dee:	2300      	movs	r3, #0
 8000df0:	4698      	mov	r8, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	2608      	movs	r6, #8
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	e7ce      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000dfa:	46cb      	mov	fp, r9
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	9a03      	ldr	r2, [sp, #12]
 8000e00:	9701      	str	r7, [sp, #4]
 8000e02:	2a02      	cmp	r2, #2
 8000e04:	d165      	bne.n	8000ed2 <__aeabi_ddiv+0x182>
 8000e06:	9b01      	ldr	r3, [sp, #4]
 8000e08:	4c4a      	ldr	r4, [pc, #296]	; (8000f34 <__aeabi_ddiv+0x1e4>)
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4698      	mov	r8, r3
 8000e12:	e06b      	b.n	8000eec <__aeabi_ddiv+0x19c>
 8000e14:	0003      	movs	r3, r0
 8000e16:	4333      	orrs	r3, r6
 8000e18:	4699      	mov	r9, r3
 8000e1a:	d04e      	beq.n	8000eba <__aeabi_ddiv+0x16a>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0xd2>
 8000e20:	e1bc      	b.n	800119c <__aeabi_ddiv+0x44c>
 8000e22:	0030      	movs	r0, r6
 8000e24:	f001 fa4c 	bl	80022c0 <__clzsi2>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	3b0b      	subs	r3, #11
 8000e2c:	2b1c      	cmp	r3, #28
 8000e2e:	dd00      	ble.n	8000e32 <__aeabi_ddiv+0xe2>
 8000e30:	e1ac      	b.n	800118c <__aeabi_ddiv+0x43c>
 8000e32:	221d      	movs	r2, #29
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	465a      	mov	r2, fp
 8000e38:	0001      	movs	r1, r0
 8000e3a:	40da      	lsrs	r2, r3
 8000e3c:	3908      	subs	r1, #8
 8000e3e:	408e      	lsls	r6, r1
 8000e40:	0013      	movs	r3, r2
 8000e42:	4333      	orrs	r3, r6
 8000e44:	4699      	mov	r9, r3
 8000e46:	465b      	mov	r3, fp
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4c3c      	ldr	r4, [pc, #240]	; (8000f40 <__aeabi_ddiv+0x1f0>)
 8000e50:	2600      	movs	r6, #0
 8000e52:	1a24      	subs	r4, r4, r0
 8000e54:	9303      	str	r3, [sp, #12]
 8000e56:	e79f      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000e58:	4651      	mov	r1, sl
 8000e5a:	465a      	mov	r2, fp
 8000e5c:	4311      	orrs	r1, r2
 8000e5e:	d129      	bne.n	8000eb4 <__aeabi_ddiv+0x164>
 8000e60:	2200      	movs	r2, #0
 8000e62:	4693      	mov	fp, r2
 8000e64:	3202      	adds	r2, #2
 8000e66:	e7b1      	b.n	8000dcc <__aeabi_ddiv+0x7c>
 8000e68:	4659      	mov	r1, fp
 8000e6a:	4301      	orrs	r1, r0
 8000e6c:	d01e      	beq.n	8000eac <__aeabi_ddiv+0x15c>
 8000e6e:	465b      	mov	r3, fp
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x126>
 8000e74:	e19e      	b.n	80011b4 <__aeabi_ddiv+0x464>
 8000e76:	4658      	mov	r0, fp
 8000e78:	f001 fa22 	bl	80022c0 <__clzsi2>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	3b0b      	subs	r3, #11
 8000e80:	2b1c      	cmp	r3, #28
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_ddiv+0x136>
 8000e84:	e18f      	b.n	80011a6 <__aeabi_ddiv+0x456>
 8000e86:	0002      	movs	r2, r0
 8000e88:	4659      	mov	r1, fp
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	4091      	lsls	r1, r2
 8000e8e:	468b      	mov	fp, r1
 8000e90:	211d      	movs	r1, #29
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	4651      	mov	r1, sl
 8000e96:	40d9      	lsrs	r1, r3
 8000e98:	000b      	movs	r3, r1
 8000e9a:	4659      	mov	r1, fp
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	4651      	mov	r1, sl
 8000ea0:	469b      	mov	fp, r3
 8000ea2:	4091      	lsls	r1, r2
 8000ea4:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <__aeabi_ddiv+0x1f0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	1a1b      	subs	r3, r3, r0
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_ddiv+0x7c>
 8000eac:	2300      	movs	r3, #0
 8000eae:	2201      	movs	r2, #1
 8000eb0:	469b      	mov	fp, r3
 8000eb2:	e78b      	b.n	8000dcc <__aeabi_ddiv+0x7c>
 8000eb4:	4651      	mov	r1, sl
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	e788      	b.n	8000dcc <__aeabi_ddiv+0x7c>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	2604      	movs	r6, #4
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	e767      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	46b1      	mov	r9, r6
 8000ecc:	9303      	str	r3, [sp, #12]
 8000ece:	260c      	movs	r6, #12
 8000ed0:	e762      	b.n	8000d98 <__aeabi_ddiv+0x48>
 8000ed2:	2a03      	cmp	r2, #3
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x188>
 8000ed6:	e25c      	b.n	8001392 <__aeabi_ddiv+0x642>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	2a01      	cmp	r2, #1
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_ddiv+0x190>
 8000ede:	e1e4      	b.n	80012aa <__aeabi_ddiv+0x55a>
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	469c      	mov	ip, r3
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4698      	mov	r8, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	0312      	lsls	r2, r2, #12
 8000ef0:	0b13      	lsrs	r3, r2, #12
 8000ef2:	0d0a      	lsrs	r2, r1, #20
 8000ef4:	0512      	lsls	r2, r2, #20
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	0523      	lsls	r3, r4, #20
 8000efa:	4c12      	ldr	r4, [pc, #72]	; (8000f44 <__aeabi_ddiv+0x1f4>)
 8000efc:	4640      	mov	r0, r8
 8000efe:	4022      	ands	r2, r4
 8000f00:	4313      	orrs	r3, r2
 8000f02:	4662      	mov	r2, ip
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	07d2      	lsls	r2, r2, #31
 8000f08:	085b      	lsrs	r3, r3, #1
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	b007      	add	sp, #28
 8000f10:	bc3c      	pop	{r2, r3, r4, r5}
 8000f12:	4690      	mov	r8, r2
 8000f14:	4699      	mov	r9, r3
 8000f16:	46a2      	mov	sl, r4
 8000f18:	46ab      	mov	fp, r5
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	469c      	mov	ip, r3
 8000f22:	0312      	lsls	r2, r2, #12
 8000f24:	4698      	mov	r8, r3
 8000f26:	4c03      	ldr	r4, [pc, #12]	; (8000f34 <__aeabi_ddiv+0x1e4>)
 8000f28:	e7e0      	b.n	8000eec <__aeabi_ddiv+0x19c>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	4c01      	ldr	r4, [pc, #4]	; (8000f34 <__aeabi_ddiv+0x1e4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4698      	mov	r8, r3
 8000f32:	e7db      	b.n	8000eec <__aeabi_ddiv+0x19c>
 8000f34:	000007ff 	.word	0x000007ff
 8000f38:	fffffc01 	.word	0xfffffc01
 8000f3c:	080091e0 	.word	0x080091e0
 8000f40:	fffffc0d 	.word	0xfffffc0d
 8000f44:	800fffff 	.word	0x800fffff
 8000f48:	45d9      	cmp	r9, fp
 8000f4a:	d900      	bls.n	8000f4e <__aeabi_ddiv+0x1fe>
 8000f4c:	e139      	b.n	80011c2 <__aeabi_ddiv+0x472>
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_ddiv+0x202>
 8000f50:	e134      	b.n	80011bc <__aeabi_ddiv+0x46c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	4646      	mov	r6, r8
 8000f56:	464d      	mov	r5, r9
 8000f58:	469a      	mov	sl, r3
 8000f5a:	3c01      	subs	r4, #1
 8000f5c:	465b      	mov	r3, fp
 8000f5e:	0e0a      	lsrs	r2, r1, #24
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	431a      	orrs	r2, r3
 8000f64:	020b      	lsls	r3, r1, #8
 8000f66:	0c17      	lsrs	r7, r2, #16
 8000f68:	9303      	str	r3, [sp, #12]
 8000f6a:	0413      	lsls	r3, r2, #16
 8000f6c:	0c1b      	lsrs	r3, r3, #16
 8000f6e:	0039      	movs	r1, r7
 8000f70:	0028      	movs	r0, r5
 8000f72:	4690      	mov	r8, r2
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f7ff f933 	bl	80001e0 <__udivsi3>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	9b01      	ldr	r3, [sp, #4]
 8000f7e:	4683      	mov	fp, r0
 8000f80:	435a      	muls	r2, r3
 8000f82:	0028      	movs	r0, r5
 8000f84:	0039      	movs	r1, r7
 8000f86:	4691      	mov	r9, r2
 8000f88:	f7ff f9b0 	bl	80002ec <__aeabi_uidivmod>
 8000f8c:	0c35      	lsrs	r5, r6, #16
 8000f8e:	0409      	lsls	r1, r1, #16
 8000f90:	430d      	orrs	r5, r1
 8000f92:	45a9      	cmp	r9, r5
 8000f94:	d90d      	bls.n	8000fb2 <__aeabi_ddiv+0x262>
 8000f96:	465b      	mov	r3, fp
 8000f98:	4445      	add	r5, r8
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	45a8      	cmp	r8, r5
 8000f9e:	d900      	bls.n	8000fa2 <__aeabi_ddiv+0x252>
 8000fa0:	e13a      	b.n	8001218 <__aeabi_ddiv+0x4c8>
 8000fa2:	45a9      	cmp	r9, r5
 8000fa4:	d800      	bhi.n	8000fa8 <__aeabi_ddiv+0x258>
 8000fa6:	e137      	b.n	8001218 <__aeabi_ddiv+0x4c8>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	425b      	negs	r3, r3
 8000fac:	469c      	mov	ip, r3
 8000fae:	4445      	add	r5, r8
 8000fb0:	44e3      	add	fp, ip
 8000fb2:	464b      	mov	r3, r9
 8000fb4:	1aeb      	subs	r3, r5, r3
 8000fb6:	0039      	movs	r1, r7
 8000fb8:	0018      	movs	r0, r3
 8000fba:	9304      	str	r3, [sp, #16]
 8000fbc:	f7ff f910 	bl	80001e0 <__udivsi3>
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	0005      	movs	r5, r0
 8000fc4:	4343      	muls	r3, r0
 8000fc6:	0039      	movs	r1, r7
 8000fc8:	9804      	ldr	r0, [sp, #16]
 8000fca:	4699      	mov	r9, r3
 8000fcc:	f7ff f98e 	bl	80002ec <__aeabi_uidivmod>
 8000fd0:	0433      	lsls	r3, r6, #16
 8000fd2:	0409      	lsls	r1, r1, #16
 8000fd4:	0c1b      	lsrs	r3, r3, #16
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	4599      	cmp	r9, r3
 8000fda:	d909      	bls.n	8000ff0 <__aeabi_ddiv+0x2a0>
 8000fdc:	4443      	add	r3, r8
 8000fde:	1e6a      	subs	r2, r5, #1
 8000fe0:	4598      	cmp	r8, r3
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x296>
 8000fe4:	e11a      	b.n	800121c <__aeabi_ddiv+0x4cc>
 8000fe6:	4599      	cmp	r9, r3
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x29c>
 8000fea:	e117      	b.n	800121c <__aeabi_ddiv+0x4cc>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4443      	add	r3, r8
 8000ff0:	464a      	mov	r2, r9
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	465a      	mov	r2, fp
 8000ff6:	0412      	lsls	r2, r2, #16
 8000ff8:	432a      	orrs	r2, r5
 8000ffa:	9903      	ldr	r1, [sp, #12]
 8000ffc:	4693      	mov	fp, r2
 8000ffe:	0c10      	lsrs	r0, r2, #16
 8001000:	0c0a      	lsrs	r2, r1, #16
 8001002:	4691      	mov	r9, r2
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	465a      	mov	r2, fp
 8001008:	0c09      	lsrs	r1, r1, #16
 800100a:	464e      	mov	r6, r9
 800100c:	000d      	movs	r5, r1
 800100e:	0412      	lsls	r2, r2, #16
 8001010:	0c12      	lsrs	r2, r2, #16
 8001012:	4345      	muls	r5, r0
 8001014:	9105      	str	r1, [sp, #20]
 8001016:	4351      	muls	r1, r2
 8001018:	4372      	muls	r2, r6
 800101a:	4370      	muls	r0, r6
 800101c:	1952      	adds	r2, r2, r5
 800101e:	0c0e      	lsrs	r6, r1, #16
 8001020:	18b2      	adds	r2, r6, r2
 8001022:	4295      	cmp	r5, r2
 8001024:	d903      	bls.n	800102e <__aeabi_ddiv+0x2de>
 8001026:	2580      	movs	r5, #128	; 0x80
 8001028:	026d      	lsls	r5, r5, #9
 800102a:	46ac      	mov	ip, r5
 800102c:	4460      	add	r0, ip
 800102e:	0c15      	lsrs	r5, r2, #16
 8001030:	0409      	lsls	r1, r1, #16
 8001032:	0412      	lsls	r2, r2, #16
 8001034:	0c09      	lsrs	r1, r1, #16
 8001036:	1828      	adds	r0, r5, r0
 8001038:	1852      	adds	r2, r2, r1
 800103a:	4283      	cmp	r3, r0
 800103c:	d200      	bcs.n	8001040 <__aeabi_ddiv+0x2f0>
 800103e:	e0ce      	b.n	80011de <__aeabi_ddiv+0x48e>
 8001040:	d100      	bne.n	8001044 <__aeabi_ddiv+0x2f4>
 8001042:	e0c8      	b.n	80011d6 <__aeabi_ddiv+0x486>
 8001044:	1a1d      	subs	r5, r3, r0
 8001046:	4653      	mov	r3, sl
 8001048:	1a9e      	subs	r6, r3, r2
 800104a:	45b2      	cmp	sl, r6
 800104c:	4192      	sbcs	r2, r2
 800104e:	4252      	negs	r2, r2
 8001050:	1aab      	subs	r3, r5, r2
 8001052:	469a      	mov	sl, r3
 8001054:	4598      	cmp	r8, r3
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0x30a>
 8001058:	e117      	b.n	800128a <__aeabi_ddiv+0x53a>
 800105a:	0039      	movs	r1, r7
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff f8bf 	bl	80001e0 <__udivsi3>
 8001062:	9b01      	ldr	r3, [sp, #4]
 8001064:	0005      	movs	r5, r0
 8001066:	4343      	muls	r3, r0
 8001068:	0039      	movs	r1, r7
 800106a:	4650      	mov	r0, sl
 800106c:	9304      	str	r3, [sp, #16]
 800106e:	f7ff f93d 	bl	80002ec <__aeabi_uidivmod>
 8001072:	9804      	ldr	r0, [sp, #16]
 8001074:	040b      	lsls	r3, r1, #16
 8001076:	0c31      	lsrs	r1, r6, #16
 8001078:	4319      	orrs	r1, r3
 800107a:	4288      	cmp	r0, r1
 800107c:	d909      	bls.n	8001092 <__aeabi_ddiv+0x342>
 800107e:	4441      	add	r1, r8
 8001080:	1e6b      	subs	r3, r5, #1
 8001082:	4588      	cmp	r8, r1
 8001084:	d900      	bls.n	8001088 <__aeabi_ddiv+0x338>
 8001086:	e107      	b.n	8001298 <__aeabi_ddiv+0x548>
 8001088:	4288      	cmp	r0, r1
 800108a:	d800      	bhi.n	800108e <__aeabi_ddiv+0x33e>
 800108c:	e104      	b.n	8001298 <__aeabi_ddiv+0x548>
 800108e:	3d02      	subs	r5, #2
 8001090:	4441      	add	r1, r8
 8001092:	9b04      	ldr	r3, [sp, #16]
 8001094:	1acb      	subs	r3, r1, r3
 8001096:	0018      	movs	r0, r3
 8001098:	0039      	movs	r1, r7
 800109a:	9304      	str	r3, [sp, #16]
 800109c:	f7ff f8a0 	bl	80001e0 <__udivsi3>
 80010a0:	9b01      	ldr	r3, [sp, #4]
 80010a2:	4682      	mov	sl, r0
 80010a4:	4343      	muls	r3, r0
 80010a6:	0039      	movs	r1, r7
 80010a8:	9804      	ldr	r0, [sp, #16]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f7ff f91e 	bl	80002ec <__aeabi_uidivmod>
 80010b0:	9801      	ldr	r0, [sp, #4]
 80010b2:	040b      	lsls	r3, r1, #16
 80010b4:	0431      	lsls	r1, r6, #16
 80010b6:	0c09      	lsrs	r1, r1, #16
 80010b8:	4319      	orrs	r1, r3
 80010ba:	4288      	cmp	r0, r1
 80010bc:	d90d      	bls.n	80010da <__aeabi_ddiv+0x38a>
 80010be:	4653      	mov	r3, sl
 80010c0:	4441      	add	r1, r8
 80010c2:	3b01      	subs	r3, #1
 80010c4:	4588      	cmp	r8, r1
 80010c6:	d900      	bls.n	80010ca <__aeabi_ddiv+0x37a>
 80010c8:	e0e8      	b.n	800129c <__aeabi_ddiv+0x54c>
 80010ca:	4288      	cmp	r0, r1
 80010cc:	d800      	bhi.n	80010d0 <__aeabi_ddiv+0x380>
 80010ce:	e0e5      	b.n	800129c <__aeabi_ddiv+0x54c>
 80010d0:	2302      	movs	r3, #2
 80010d2:	425b      	negs	r3, r3
 80010d4:	469c      	mov	ip, r3
 80010d6:	4441      	add	r1, r8
 80010d8:	44e2      	add	sl, ip
 80010da:	9b01      	ldr	r3, [sp, #4]
 80010dc:	042d      	lsls	r5, r5, #16
 80010de:	1ace      	subs	r6, r1, r3
 80010e0:	4651      	mov	r1, sl
 80010e2:	4329      	orrs	r1, r5
 80010e4:	9d05      	ldr	r5, [sp, #20]
 80010e6:	464f      	mov	r7, r9
 80010e8:	002a      	movs	r2, r5
 80010ea:	040b      	lsls	r3, r1, #16
 80010ec:	0c08      	lsrs	r0, r1, #16
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	435a      	muls	r2, r3
 80010f2:	4345      	muls	r5, r0
 80010f4:	437b      	muls	r3, r7
 80010f6:	4378      	muls	r0, r7
 80010f8:	195b      	adds	r3, r3, r5
 80010fa:	0c17      	lsrs	r7, r2, #16
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	429d      	cmp	r5, r3
 8001100:	d903      	bls.n	800110a <__aeabi_ddiv+0x3ba>
 8001102:	2580      	movs	r5, #128	; 0x80
 8001104:	026d      	lsls	r5, r5, #9
 8001106:	46ac      	mov	ip, r5
 8001108:	4460      	add	r0, ip
 800110a:	0c1d      	lsrs	r5, r3, #16
 800110c:	0412      	lsls	r2, r2, #16
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	0c12      	lsrs	r2, r2, #16
 8001112:	1828      	adds	r0, r5, r0
 8001114:	189b      	adds	r3, r3, r2
 8001116:	4286      	cmp	r6, r0
 8001118:	d200      	bcs.n	800111c <__aeabi_ddiv+0x3cc>
 800111a:	e093      	b.n	8001244 <__aeabi_ddiv+0x4f4>
 800111c:	d100      	bne.n	8001120 <__aeabi_ddiv+0x3d0>
 800111e:	e08e      	b.n	800123e <__aeabi_ddiv+0x4ee>
 8001120:	2301      	movs	r3, #1
 8001122:	4319      	orrs	r1, r3
 8001124:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <__aeabi_ddiv+0x658>)
 8001126:	18e3      	adds	r3, r4, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	dc00      	bgt.n	800112e <__aeabi_ddiv+0x3de>
 800112c:	e099      	b.n	8001262 <__aeabi_ddiv+0x512>
 800112e:	074a      	lsls	r2, r1, #29
 8001130:	d000      	beq.n	8001134 <__aeabi_ddiv+0x3e4>
 8001132:	e09e      	b.n	8001272 <__aeabi_ddiv+0x522>
 8001134:	465a      	mov	r2, fp
 8001136:	01d2      	lsls	r2, r2, #7
 8001138:	d506      	bpl.n	8001148 <__aeabi_ddiv+0x3f8>
 800113a:	465a      	mov	r2, fp
 800113c:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <__aeabi_ddiv+0x65c>)
 800113e:	401a      	ands	r2, r3
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	4693      	mov	fp, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	18e3      	adds	r3, r4, r3
 8001148:	4a99      	ldr	r2, [pc, #612]	; (80013b0 <__aeabi_ddiv+0x660>)
 800114a:	4293      	cmp	r3, r2
 800114c:	dd68      	ble.n	8001220 <__aeabi_ddiv+0x4d0>
 800114e:	2301      	movs	r3, #1
 8001150:	9a02      	ldr	r2, [sp, #8]
 8001152:	4c98      	ldr	r4, [pc, #608]	; (80013b4 <__aeabi_ddiv+0x664>)
 8001154:	401a      	ands	r2, r3
 8001156:	2300      	movs	r3, #0
 8001158:	4694      	mov	ip, r2
 800115a:	4698      	mov	r8, r3
 800115c:	2200      	movs	r2, #0
 800115e:	e6c5      	b.n	8000eec <__aeabi_ddiv+0x19c>
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	464b      	mov	r3, r9
 8001164:	0312      	lsls	r2, r2, #12
 8001166:	4213      	tst	r3, r2
 8001168:	d00a      	beq.n	8001180 <__aeabi_ddiv+0x430>
 800116a:	465b      	mov	r3, fp
 800116c:	4213      	tst	r3, r2
 800116e:	d106      	bne.n	800117e <__aeabi_ddiv+0x42e>
 8001170:	431a      	orrs	r2, r3
 8001172:	0312      	lsls	r2, r2, #12
 8001174:	0b12      	lsrs	r2, r2, #12
 8001176:	46ac      	mov	ip, r5
 8001178:	4688      	mov	r8, r1
 800117a:	4c8e      	ldr	r4, [pc, #568]	; (80013b4 <__aeabi_ddiv+0x664>)
 800117c:	e6b6      	b.n	8000eec <__aeabi_ddiv+0x19c>
 800117e:	464b      	mov	r3, r9
 8001180:	431a      	orrs	r2, r3
 8001182:	0312      	lsls	r2, r2, #12
 8001184:	0b12      	lsrs	r2, r2, #12
 8001186:	46bc      	mov	ip, r7
 8001188:	4c8a      	ldr	r4, [pc, #552]	; (80013b4 <__aeabi_ddiv+0x664>)
 800118a:	e6af      	b.n	8000eec <__aeabi_ddiv+0x19c>
 800118c:	0003      	movs	r3, r0
 800118e:	465a      	mov	r2, fp
 8001190:	3b28      	subs	r3, #40	; 0x28
 8001192:	409a      	lsls	r2, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4691      	mov	r9, r2
 8001198:	4698      	mov	r8, r3
 800119a:	e657      	b.n	8000e4c <__aeabi_ddiv+0xfc>
 800119c:	4658      	mov	r0, fp
 800119e:	f001 f88f 	bl	80022c0 <__clzsi2>
 80011a2:	3020      	adds	r0, #32
 80011a4:	e640      	b.n	8000e28 <__aeabi_ddiv+0xd8>
 80011a6:	0003      	movs	r3, r0
 80011a8:	4652      	mov	r2, sl
 80011aa:	3b28      	subs	r3, #40	; 0x28
 80011ac:	409a      	lsls	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	4693      	mov	fp, r2
 80011b2:	e677      	b.n	8000ea4 <__aeabi_ddiv+0x154>
 80011b4:	f001 f884 	bl	80022c0 <__clzsi2>
 80011b8:	3020      	adds	r0, #32
 80011ba:	e65f      	b.n	8000e7c <__aeabi_ddiv+0x12c>
 80011bc:	4588      	cmp	r8, r1
 80011be:	d200      	bcs.n	80011c2 <__aeabi_ddiv+0x472>
 80011c0:	e6c7      	b.n	8000f52 <__aeabi_ddiv+0x202>
 80011c2:	464b      	mov	r3, r9
 80011c4:	07de      	lsls	r6, r3, #31
 80011c6:	085d      	lsrs	r5, r3, #1
 80011c8:	4643      	mov	r3, r8
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	431e      	orrs	r6, r3
 80011ce:	4643      	mov	r3, r8
 80011d0:	07db      	lsls	r3, r3, #31
 80011d2:	469a      	mov	sl, r3
 80011d4:	e6c2      	b.n	8000f5c <__aeabi_ddiv+0x20c>
 80011d6:	2500      	movs	r5, #0
 80011d8:	4592      	cmp	sl, r2
 80011da:	d300      	bcc.n	80011de <__aeabi_ddiv+0x48e>
 80011dc:	e733      	b.n	8001046 <__aeabi_ddiv+0x2f6>
 80011de:	9e03      	ldr	r6, [sp, #12]
 80011e0:	4659      	mov	r1, fp
 80011e2:	46b4      	mov	ip, r6
 80011e4:	44e2      	add	sl, ip
 80011e6:	45b2      	cmp	sl, r6
 80011e8:	41ad      	sbcs	r5, r5
 80011ea:	426d      	negs	r5, r5
 80011ec:	4445      	add	r5, r8
 80011ee:	18eb      	adds	r3, r5, r3
 80011f0:	3901      	subs	r1, #1
 80011f2:	4598      	cmp	r8, r3
 80011f4:	d207      	bcs.n	8001206 <__aeabi_ddiv+0x4b6>
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d900      	bls.n	80011fc <__aeabi_ddiv+0x4ac>
 80011fa:	e07f      	b.n	80012fc <__aeabi_ddiv+0x5ac>
 80011fc:	d100      	bne.n	8001200 <__aeabi_ddiv+0x4b0>
 80011fe:	e0bc      	b.n	800137a <__aeabi_ddiv+0x62a>
 8001200:	1a1d      	subs	r5, r3, r0
 8001202:	468b      	mov	fp, r1
 8001204:	e71f      	b.n	8001046 <__aeabi_ddiv+0x2f6>
 8001206:	4598      	cmp	r8, r3
 8001208:	d1fa      	bne.n	8001200 <__aeabi_ddiv+0x4b0>
 800120a:	9d03      	ldr	r5, [sp, #12]
 800120c:	4555      	cmp	r5, sl
 800120e:	d9f2      	bls.n	80011f6 <__aeabi_ddiv+0x4a6>
 8001210:	4643      	mov	r3, r8
 8001212:	468b      	mov	fp, r1
 8001214:	1a1d      	subs	r5, r3, r0
 8001216:	e716      	b.n	8001046 <__aeabi_ddiv+0x2f6>
 8001218:	469b      	mov	fp, r3
 800121a:	e6ca      	b.n	8000fb2 <__aeabi_ddiv+0x262>
 800121c:	0015      	movs	r5, r2
 800121e:	e6e7      	b.n	8000ff0 <__aeabi_ddiv+0x2a0>
 8001220:	465a      	mov	r2, fp
 8001222:	08c9      	lsrs	r1, r1, #3
 8001224:	0752      	lsls	r2, r2, #29
 8001226:	430a      	orrs	r2, r1
 8001228:	055b      	lsls	r3, r3, #21
 800122a:	4690      	mov	r8, r2
 800122c:	0d5c      	lsrs	r4, r3, #21
 800122e:	465a      	mov	r2, fp
 8001230:	2301      	movs	r3, #1
 8001232:	9902      	ldr	r1, [sp, #8]
 8001234:	0252      	lsls	r2, r2, #9
 8001236:	4019      	ands	r1, r3
 8001238:	0b12      	lsrs	r2, r2, #12
 800123a:	468c      	mov	ip, r1
 800123c:	e656      	b.n	8000eec <__aeabi_ddiv+0x19c>
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <__aeabi_ddiv+0x4f4>
 8001242:	e76f      	b.n	8001124 <__aeabi_ddiv+0x3d4>
 8001244:	4446      	add	r6, r8
 8001246:	1e4a      	subs	r2, r1, #1
 8001248:	45b0      	cmp	r8, r6
 800124a:	d929      	bls.n	80012a0 <__aeabi_ddiv+0x550>
 800124c:	0011      	movs	r1, r2
 800124e:	4286      	cmp	r6, r0
 8001250:	d000      	beq.n	8001254 <__aeabi_ddiv+0x504>
 8001252:	e765      	b.n	8001120 <__aeabi_ddiv+0x3d0>
 8001254:	9a03      	ldr	r2, [sp, #12]
 8001256:	4293      	cmp	r3, r2
 8001258:	d000      	beq.n	800125c <__aeabi_ddiv+0x50c>
 800125a:	e761      	b.n	8001120 <__aeabi_ddiv+0x3d0>
 800125c:	e762      	b.n	8001124 <__aeabi_ddiv+0x3d4>
 800125e:	2101      	movs	r1, #1
 8001260:	4249      	negs	r1, r1
 8001262:	2001      	movs	r0, #1
 8001264:	1ac2      	subs	r2, r0, r3
 8001266:	2a38      	cmp	r2, #56	; 0x38
 8001268:	dd21      	ble.n	80012ae <__aeabi_ddiv+0x55e>
 800126a:	9b02      	ldr	r3, [sp, #8]
 800126c:	4003      	ands	r3, r0
 800126e:	469c      	mov	ip, r3
 8001270:	e638      	b.n	8000ee4 <__aeabi_ddiv+0x194>
 8001272:	220f      	movs	r2, #15
 8001274:	400a      	ands	r2, r1
 8001276:	2a04      	cmp	r2, #4
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x52c>
 800127a:	e75b      	b.n	8001134 <__aeabi_ddiv+0x3e4>
 800127c:	000a      	movs	r2, r1
 800127e:	1d11      	adds	r1, r2, #4
 8001280:	4291      	cmp	r1, r2
 8001282:	4192      	sbcs	r2, r2
 8001284:	4252      	negs	r2, r2
 8001286:	4493      	add	fp, r2
 8001288:	e754      	b.n	8001134 <__aeabi_ddiv+0x3e4>
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <__aeabi_ddiv+0x658>)
 800128c:	18e3      	adds	r3, r4, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	dde5      	ble.n	800125e <__aeabi_ddiv+0x50e>
 8001292:	2201      	movs	r2, #1
 8001294:	4252      	negs	r2, r2
 8001296:	e7f2      	b.n	800127e <__aeabi_ddiv+0x52e>
 8001298:	001d      	movs	r5, r3
 800129a:	e6fa      	b.n	8001092 <__aeabi_ddiv+0x342>
 800129c:	469a      	mov	sl, r3
 800129e:	e71c      	b.n	80010da <__aeabi_ddiv+0x38a>
 80012a0:	42b0      	cmp	r0, r6
 80012a2:	d839      	bhi.n	8001318 <__aeabi_ddiv+0x5c8>
 80012a4:	d06e      	beq.n	8001384 <__aeabi_ddiv+0x634>
 80012a6:	0011      	movs	r1, r2
 80012a8:	e73a      	b.n	8001120 <__aeabi_ddiv+0x3d0>
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	e73a      	b.n	8001124 <__aeabi_ddiv+0x3d4>
 80012ae:	2a1f      	cmp	r2, #31
 80012b0:	dc3c      	bgt.n	800132c <__aeabi_ddiv+0x5dc>
 80012b2:	2320      	movs	r3, #32
 80012b4:	1a9b      	subs	r3, r3, r2
 80012b6:	000c      	movs	r4, r1
 80012b8:	4658      	mov	r0, fp
 80012ba:	4099      	lsls	r1, r3
 80012bc:	4098      	lsls	r0, r3
 80012be:	1e4b      	subs	r3, r1, #1
 80012c0:	4199      	sbcs	r1, r3
 80012c2:	465b      	mov	r3, fp
 80012c4:	40d4      	lsrs	r4, r2
 80012c6:	40d3      	lsrs	r3, r2
 80012c8:	4320      	orrs	r0, r4
 80012ca:	4308      	orrs	r0, r1
 80012cc:	001a      	movs	r2, r3
 80012ce:	0743      	lsls	r3, r0, #29
 80012d0:	d009      	beq.n	80012e6 <__aeabi_ddiv+0x596>
 80012d2:	230f      	movs	r3, #15
 80012d4:	4003      	ands	r3, r0
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d005      	beq.n	80012e6 <__aeabi_ddiv+0x596>
 80012da:	0001      	movs	r1, r0
 80012dc:	1d08      	adds	r0, r1, #4
 80012de:	4288      	cmp	r0, r1
 80012e0:	419b      	sbcs	r3, r3
 80012e2:	425b      	negs	r3, r3
 80012e4:	18d2      	adds	r2, r2, r3
 80012e6:	0213      	lsls	r3, r2, #8
 80012e8:	d53a      	bpl.n	8001360 <__aeabi_ddiv+0x610>
 80012ea:	2301      	movs	r3, #1
 80012ec:	9a02      	ldr	r2, [sp, #8]
 80012ee:	2401      	movs	r4, #1
 80012f0:	401a      	ands	r2, r3
 80012f2:	2300      	movs	r3, #0
 80012f4:	4694      	mov	ip, r2
 80012f6:	4698      	mov	r8, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	e5f7      	b.n	8000eec <__aeabi_ddiv+0x19c>
 80012fc:	2102      	movs	r1, #2
 80012fe:	4249      	negs	r1, r1
 8001300:	468c      	mov	ip, r1
 8001302:	9d03      	ldr	r5, [sp, #12]
 8001304:	44e3      	add	fp, ip
 8001306:	46ac      	mov	ip, r5
 8001308:	44e2      	add	sl, ip
 800130a:	45aa      	cmp	sl, r5
 800130c:	41ad      	sbcs	r5, r5
 800130e:	426d      	negs	r5, r5
 8001310:	4445      	add	r5, r8
 8001312:	18ed      	adds	r5, r5, r3
 8001314:	1a2d      	subs	r5, r5, r0
 8001316:	e696      	b.n	8001046 <__aeabi_ddiv+0x2f6>
 8001318:	1e8a      	subs	r2, r1, #2
 800131a:	9903      	ldr	r1, [sp, #12]
 800131c:	004d      	lsls	r5, r1, #1
 800131e:	428d      	cmp	r5, r1
 8001320:	4189      	sbcs	r1, r1
 8001322:	4249      	negs	r1, r1
 8001324:	4441      	add	r1, r8
 8001326:	1876      	adds	r6, r6, r1
 8001328:	9503      	str	r5, [sp, #12]
 800132a:	e78f      	b.n	800124c <__aeabi_ddiv+0x4fc>
 800132c:	201f      	movs	r0, #31
 800132e:	4240      	negs	r0, r0
 8001330:	1ac3      	subs	r3, r0, r3
 8001332:	4658      	mov	r0, fp
 8001334:	40d8      	lsrs	r0, r3
 8001336:	0003      	movs	r3, r0
 8001338:	2a20      	cmp	r2, #32
 800133a:	d028      	beq.n	800138e <__aeabi_ddiv+0x63e>
 800133c:	2040      	movs	r0, #64	; 0x40
 800133e:	465d      	mov	r5, fp
 8001340:	1a82      	subs	r2, r0, r2
 8001342:	4095      	lsls	r5, r2
 8001344:	4329      	orrs	r1, r5
 8001346:	1e4a      	subs	r2, r1, #1
 8001348:	4191      	sbcs	r1, r2
 800134a:	4319      	orrs	r1, r3
 800134c:	2307      	movs	r3, #7
 800134e:	2200      	movs	r2, #0
 8001350:	400b      	ands	r3, r1
 8001352:	d009      	beq.n	8001368 <__aeabi_ddiv+0x618>
 8001354:	230f      	movs	r3, #15
 8001356:	2200      	movs	r2, #0
 8001358:	400b      	ands	r3, r1
 800135a:	0008      	movs	r0, r1
 800135c:	2b04      	cmp	r3, #4
 800135e:	d1bd      	bne.n	80012dc <__aeabi_ddiv+0x58c>
 8001360:	0001      	movs	r1, r0
 8001362:	0753      	lsls	r3, r2, #29
 8001364:	0252      	lsls	r2, r2, #9
 8001366:	0b12      	lsrs	r2, r2, #12
 8001368:	08c9      	lsrs	r1, r1, #3
 800136a:	4319      	orrs	r1, r3
 800136c:	2301      	movs	r3, #1
 800136e:	4688      	mov	r8, r1
 8001370:	9902      	ldr	r1, [sp, #8]
 8001372:	2400      	movs	r4, #0
 8001374:	4019      	ands	r1, r3
 8001376:	468c      	mov	ip, r1
 8001378:	e5b8      	b.n	8000eec <__aeabi_ddiv+0x19c>
 800137a:	4552      	cmp	r2, sl
 800137c:	d8be      	bhi.n	80012fc <__aeabi_ddiv+0x5ac>
 800137e:	468b      	mov	fp, r1
 8001380:	2500      	movs	r5, #0
 8001382:	e660      	b.n	8001046 <__aeabi_ddiv+0x2f6>
 8001384:	9d03      	ldr	r5, [sp, #12]
 8001386:	429d      	cmp	r5, r3
 8001388:	d3c6      	bcc.n	8001318 <__aeabi_ddiv+0x5c8>
 800138a:	0011      	movs	r1, r2
 800138c:	e762      	b.n	8001254 <__aeabi_ddiv+0x504>
 800138e:	2500      	movs	r5, #0
 8001390:	e7d8      	b.n	8001344 <__aeabi_ddiv+0x5f4>
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	465b      	mov	r3, fp
 8001396:	0312      	lsls	r2, r2, #12
 8001398:	431a      	orrs	r2, r3
 800139a:	9b01      	ldr	r3, [sp, #4]
 800139c:	0312      	lsls	r2, r2, #12
 800139e:	0b12      	lsrs	r2, r2, #12
 80013a0:	469c      	mov	ip, r3
 80013a2:	4688      	mov	r8, r1
 80013a4:	4c03      	ldr	r4, [pc, #12]	; (80013b4 <__aeabi_ddiv+0x664>)
 80013a6:	e5a1      	b.n	8000eec <__aeabi_ddiv+0x19c>
 80013a8:	000003ff 	.word	0x000003ff
 80013ac:	feffffff 	.word	0xfeffffff
 80013b0:	000007fe 	.word	0x000007fe
 80013b4:	000007ff 	.word	0x000007ff
	...

080013c0 <__eqdf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	464f      	mov	r7, r9
 80013c4:	4646      	mov	r6, r8
 80013c6:	46d6      	mov	lr, sl
 80013c8:	005c      	lsls	r4, r3, #1
 80013ca:	b5c0      	push	{r6, r7, lr}
 80013cc:	031f      	lsls	r7, r3, #12
 80013ce:	0fdb      	lsrs	r3, r3, #31
 80013d0:	469a      	mov	sl, r3
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <__eqdf2+0x70>)
 80013d4:	030e      	lsls	r6, r1, #12
 80013d6:	004d      	lsls	r5, r1, #1
 80013d8:	4684      	mov	ip, r0
 80013da:	4680      	mov	r8, r0
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d6d      	lsrs	r5, r5, #21
 80013e0:	0fc9      	lsrs	r1, r1, #31
 80013e2:	4691      	mov	r9, r2
 80013e4:	0b3f      	lsrs	r7, r7, #12
 80013e6:	0d64      	lsrs	r4, r4, #21
 80013e8:	2001      	movs	r0, #1
 80013ea:	429d      	cmp	r5, r3
 80013ec:	d008      	beq.n	8001400 <__eqdf2+0x40>
 80013ee:	429c      	cmp	r4, r3
 80013f0:	d001      	beq.n	80013f6 <__eqdf2+0x36>
 80013f2:	42a5      	cmp	r5, r4
 80013f4:	d00b      	beq.n	800140e <__eqdf2+0x4e>
 80013f6:	bc1c      	pop	{r2, r3, r4}
 80013f8:	4690      	mov	r8, r2
 80013fa:	4699      	mov	r9, r3
 80013fc:	46a2      	mov	sl, r4
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001400:	4663      	mov	r3, ip
 8001402:	4333      	orrs	r3, r6
 8001404:	d1f7      	bne.n	80013f6 <__eqdf2+0x36>
 8001406:	42ac      	cmp	r4, r5
 8001408:	d1f5      	bne.n	80013f6 <__eqdf2+0x36>
 800140a:	433a      	orrs	r2, r7
 800140c:	d1f3      	bne.n	80013f6 <__eqdf2+0x36>
 800140e:	2001      	movs	r0, #1
 8001410:	42be      	cmp	r6, r7
 8001412:	d1f0      	bne.n	80013f6 <__eqdf2+0x36>
 8001414:	45c8      	cmp	r8, r9
 8001416:	d1ee      	bne.n	80013f6 <__eqdf2+0x36>
 8001418:	4551      	cmp	r1, sl
 800141a:	d007      	beq.n	800142c <__eqdf2+0x6c>
 800141c:	2d00      	cmp	r5, #0
 800141e:	d1ea      	bne.n	80013f6 <__eqdf2+0x36>
 8001420:	4663      	mov	r3, ip
 8001422:	431e      	orrs	r6, r3
 8001424:	0030      	movs	r0, r6
 8001426:	1e46      	subs	r6, r0, #1
 8001428:	41b0      	sbcs	r0, r6
 800142a:	e7e4      	b.n	80013f6 <__eqdf2+0x36>
 800142c:	2000      	movs	r0, #0
 800142e:	e7e2      	b.n	80013f6 <__eqdf2+0x36>
 8001430:	000007ff 	.word	0x000007ff
	...

08001440 <__gedf2>:
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	4645      	mov	r5, r8
 8001444:	46de      	mov	lr, fp
 8001446:	4657      	mov	r7, sl
 8001448:	464e      	mov	r6, r9
 800144a:	b5e0      	push	{r5, r6, r7, lr}
 800144c:	031f      	lsls	r7, r3, #12
 800144e:	0b3d      	lsrs	r5, r7, #12
 8001450:	4f2c      	ldr	r7, [pc, #176]	; (8001504 <__gedf2+0xc4>)
 8001452:	030e      	lsls	r6, r1, #12
 8001454:	004c      	lsls	r4, r1, #1
 8001456:	46ab      	mov	fp, r5
 8001458:	005d      	lsls	r5, r3, #1
 800145a:	4684      	mov	ip, r0
 800145c:	0b36      	lsrs	r6, r6, #12
 800145e:	0d64      	lsrs	r4, r4, #21
 8001460:	0fc9      	lsrs	r1, r1, #31
 8001462:	4690      	mov	r8, r2
 8001464:	0d6d      	lsrs	r5, r5, #21
 8001466:	0fdb      	lsrs	r3, r3, #31
 8001468:	42bc      	cmp	r4, r7
 800146a:	d02a      	beq.n	80014c2 <__gedf2+0x82>
 800146c:	4f25      	ldr	r7, [pc, #148]	; (8001504 <__gedf2+0xc4>)
 800146e:	42bd      	cmp	r5, r7
 8001470:	d02d      	beq.n	80014ce <__gedf2+0x8e>
 8001472:	2c00      	cmp	r4, #0
 8001474:	d10f      	bne.n	8001496 <__gedf2+0x56>
 8001476:	4330      	orrs	r0, r6
 8001478:	0007      	movs	r7, r0
 800147a:	4681      	mov	r9, r0
 800147c:	4278      	negs	r0, r7
 800147e:	4178      	adcs	r0, r7
 8001480:	b2c0      	uxtb	r0, r0
 8001482:	2d00      	cmp	r5, #0
 8001484:	d117      	bne.n	80014b6 <__gedf2+0x76>
 8001486:	465f      	mov	r7, fp
 8001488:	433a      	orrs	r2, r7
 800148a:	d114      	bne.n	80014b6 <__gedf2+0x76>
 800148c:	464b      	mov	r3, r9
 800148e:	2000      	movs	r0, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00a      	beq.n	80014aa <__gedf2+0x6a>
 8001494:	e006      	b.n	80014a4 <__gedf2+0x64>
 8001496:	2d00      	cmp	r5, #0
 8001498:	d102      	bne.n	80014a0 <__gedf2+0x60>
 800149a:	4658      	mov	r0, fp
 800149c:	4302      	orrs	r2, r0
 800149e:	d001      	beq.n	80014a4 <__gedf2+0x64>
 80014a0:	4299      	cmp	r1, r3
 80014a2:	d018      	beq.n	80014d6 <__gedf2+0x96>
 80014a4:	4248      	negs	r0, r1
 80014a6:	2101      	movs	r1, #1
 80014a8:	4308      	orrs	r0, r1
 80014aa:	bc3c      	pop	{r2, r3, r4, r5}
 80014ac:	4690      	mov	r8, r2
 80014ae:	4699      	mov	r9, r3
 80014b0:	46a2      	mov	sl, r4
 80014b2:	46ab      	mov	fp, r5
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d0f2      	beq.n	80014a0 <__gedf2+0x60>
 80014ba:	2001      	movs	r0, #1
 80014bc:	3b01      	subs	r3, #1
 80014be:	4318      	orrs	r0, r3
 80014c0:	e7f3      	b.n	80014aa <__gedf2+0x6a>
 80014c2:	0037      	movs	r7, r6
 80014c4:	4307      	orrs	r7, r0
 80014c6:	d0d1      	beq.n	800146c <__gedf2+0x2c>
 80014c8:	2002      	movs	r0, #2
 80014ca:	4240      	negs	r0, r0
 80014cc:	e7ed      	b.n	80014aa <__gedf2+0x6a>
 80014ce:	465f      	mov	r7, fp
 80014d0:	4317      	orrs	r7, r2
 80014d2:	d0ce      	beq.n	8001472 <__gedf2+0x32>
 80014d4:	e7f8      	b.n	80014c8 <__gedf2+0x88>
 80014d6:	42ac      	cmp	r4, r5
 80014d8:	dce4      	bgt.n	80014a4 <__gedf2+0x64>
 80014da:	da03      	bge.n	80014e4 <__gedf2+0xa4>
 80014dc:	1e48      	subs	r0, r1, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	4308      	orrs	r0, r1
 80014e2:	e7e2      	b.n	80014aa <__gedf2+0x6a>
 80014e4:	455e      	cmp	r6, fp
 80014e6:	d8dd      	bhi.n	80014a4 <__gedf2+0x64>
 80014e8:	d006      	beq.n	80014f8 <__gedf2+0xb8>
 80014ea:	2000      	movs	r0, #0
 80014ec:	455e      	cmp	r6, fp
 80014ee:	d2dc      	bcs.n	80014aa <__gedf2+0x6a>
 80014f0:	2301      	movs	r3, #1
 80014f2:	1e48      	subs	r0, r1, #1
 80014f4:	4318      	orrs	r0, r3
 80014f6:	e7d8      	b.n	80014aa <__gedf2+0x6a>
 80014f8:	45c4      	cmp	ip, r8
 80014fa:	d8d3      	bhi.n	80014a4 <__gedf2+0x64>
 80014fc:	2000      	movs	r0, #0
 80014fe:	45c4      	cmp	ip, r8
 8001500:	d3f6      	bcc.n	80014f0 <__gedf2+0xb0>
 8001502:	e7d2      	b.n	80014aa <__gedf2+0x6a>
 8001504:	000007ff 	.word	0x000007ff
	...

08001510 <__ledf2>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	464e      	mov	r6, r9
 8001514:	4645      	mov	r5, r8
 8001516:	46de      	mov	lr, fp
 8001518:	4657      	mov	r7, sl
 800151a:	005c      	lsls	r4, r3, #1
 800151c:	b5e0      	push	{r5, r6, r7, lr}
 800151e:	031f      	lsls	r7, r3, #12
 8001520:	0fdb      	lsrs	r3, r3, #31
 8001522:	4699      	mov	r9, r3
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <__ledf2+0xc0>)
 8001526:	030e      	lsls	r6, r1, #12
 8001528:	004d      	lsls	r5, r1, #1
 800152a:	0fc9      	lsrs	r1, r1, #31
 800152c:	4684      	mov	ip, r0
 800152e:	0b36      	lsrs	r6, r6, #12
 8001530:	0d6d      	lsrs	r5, r5, #21
 8001532:	468b      	mov	fp, r1
 8001534:	4690      	mov	r8, r2
 8001536:	0b3f      	lsrs	r7, r7, #12
 8001538:	0d64      	lsrs	r4, r4, #21
 800153a:	429d      	cmp	r5, r3
 800153c:	d020      	beq.n	8001580 <__ledf2+0x70>
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <__ledf2+0xc0>)
 8001540:	429c      	cmp	r4, r3
 8001542:	d022      	beq.n	800158a <__ledf2+0x7a>
 8001544:	2d00      	cmp	r5, #0
 8001546:	d112      	bne.n	800156e <__ledf2+0x5e>
 8001548:	4330      	orrs	r0, r6
 800154a:	4243      	negs	r3, r0
 800154c:	4143      	adcs	r3, r0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2c00      	cmp	r4, #0
 8001552:	d01f      	beq.n	8001594 <__ledf2+0x84>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00c      	beq.n	8001572 <__ledf2+0x62>
 8001558:	464b      	mov	r3, r9
 800155a:	2001      	movs	r0, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	4303      	orrs	r3, r0
 8001560:	0018      	movs	r0, r3
 8001562:	bc3c      	pop	{r2, r3, r4, r5}
 8001564:	4690      	mov	r8, r2
 8001566:	4699      	mov	r9, r3
 8001568:	46a2      	mov	sl, r4
 800156a:	46ab      	mov	fp, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2c00      	cmp	r4, #0
 8001570:	d016      	beq.n	80015a0 <__ledf2+0x90>
 8001572:	45cb      	cmp	fp, r9
 8001574:	d017      	beq.n	80015a6 <__ledf2+0x96>
 8001576:	465b      	mov	r3, fp
 8001578:	4259      	negs	r1, r3
 800157a:	2301      	movs	r3, #1
 800157c:	430b      	orrs	r3, r1
 800157e:	e7ef      	b.n	8001560 <__ledf2+0x50>
 8001580:	0031      	movs	r1, r6
 8001582:	2302      	movs	r3, #2
 8001584:	4301      	orrs	r1, r0
 8001586:	d1eb      	bne.n	8001560 <__ledf2+0x50>
 8001588:	e7d9      	b.n	800153e <__ledf2+0x2e>
 800158a:	0039      	movs	r1, r7
 800158c:	2302      	movs	r3, #2
 800158e:	4311      	orrs	r1, r2
 8001590:	d1e6      	bne.n	8001560 <__ledf2+0x50>
 8001592:	e7d7      	b.n	8001544 <__ledf2+0x34>
 8001594:	433a      	orrs	r2, r7
 8001596:	d1dd      	bne.n	8001554 <__ledf2+0x44>
 8001598:	2300      	movs	r3, #0
 800159a:	2800      	cmp	r0, #0
 800159c:	d0e0      	beq.n	8001560 <__ledf2+0x50>
 800159e:	e7ea      	b.n	8001576 <__ledf2+0x66>
 80015a0:	433a      	orrs	r2, r7
 80015a2:	d1e6      	bne.n	8001572 <__ledf2+0x62>
 80015a4:	e7e7      	b.n	8001576 <__ledf2+0x66>
 80015a6:	42a5      	cmp	r5, r4
 80015a8:	dce5      	bgt.n	8001576 <__ledf2+0x66>
 80015aa:	db05      	blt.n	80015b8 <__ledf2+0xa8>
 80015ac:	42be      	cmp	r6, r7
 80015ae:	d8e2      	bhi.n	8001576 <__ledf2+0x66>
 80015b0:	d007      	beq.n	80015c2 <__ledf2+0xb2>
 80015b2:	2300      	movs	r3, #0
 80015b4:	42be      	cmp	r6, r7
 80015b6:	d2d3      	bcs.n	8001560 <__ledf2+0x50>
 80015b8:	4659      	mov	r1, fp
 80015ba:	2301      	movs	r3, #1
 80015bc:	3901      	subs	r1, #1
 80015be:	430b      	orrs	r3, r1
 80015c0:	e7ce      	b.n	8001560 <__ledf2+0x50>
 80015c2:	45c4      	cmp	ip, r8
 80015c4:	d8d7      	bhi.n	8001576 <__ledf2+0x66>
 80015c6:	2300      	movs	r3, #0
 80015c8:	45c4      	cmp	ip, r8
 80015ca:	d3f5      	bcc.n	80015b8 <__ledf2+0xa8>
 80015cc:	e7c8      	b.n	8001560 <__ledf2+0x50>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	000007ff 	.word	0x000007ff
	...

080015e0 <__aeabi_dmul>:
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	4657      	mov	r7, sl
 80015e4:	4645      	mov	r5, r8
 80015e6:	46de      	mov	lr, fp
 80015e8:	464e      	mov	r6, r9
 80015ea:	b5e0      	push	{r5, r6, r7, lr}
 80015ec:	030c      	lsls	r4, r1, #12
 80015ee:	4698      	mov	r8, r3
 80015f0:	004e      	lsls	r6, r1, #1
 80015f2:	0b23      	lsrs	r3, r4, #12
 80015f4:	b087      	sub	sp, #28
 80015f6:	0007      	movs	r7, r0
 80015f8:	4692      	mov	sl, r2
 80015fa:	469b      	mov	fp, r3
 80015fc:	0d76      	lsrs	r6, r6, #21
 80015fe:	0fcd      	lsrs	r5, r1, #31
 8001600:	2e00      	cmp	r6, #0
 8001602:	d06b      	beq.n	80016dc <__aeabi_dmul+0xfc>
 8001604:	4b6d      	ldr	r3, [pc, #436]	; (80017bc <__aeabi_dmul+0x1dc>)
 8001606:	429e      	cmp	r6, r3
 8001608:	d035      	beq.n	8001676 <__aeabi_dmul+0x96>
 800160a:	2480      	movs	r4, #128	; 0x80
 800160c:	465b      	mov	r3, fp
 800160e:	0f42      	lsrs	r2, r0, #29
 8001610:	0424      	lsls	r4, r4, #16
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4314      	orrs	r4, r2
 8001616:	431c      	orrs	r4, r3
 8001618:	00c3      	lsls	r3, r0, #3
 800161a:	4699      	mov	r9, r3
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <__aeabi_dmul+0x1e0>)
 800161e:	46a3      	mov	fp, r4
 8001620:	469c      	mov	ip, r3
 8001622:	2300      	movs	r3, #0
 8001624:	2700      	movs	r7, #0
 8001626:	4466      	add	r6, ip
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	4643      	mov	r3, r8
 800162c:	031c      	lsls	r4, r3, #12
 800162e:	005a      	lsls	r2, r3, #1
 8001630:	0fdb      	lsrs	r3, r3, #31
 8001632:	4650      	mov	r0, sl
 8001634:	0b24      	lsrs	r4, r4, #12
 8001636:	0d52      	lsrs	r2, r2, #21
 8001638:	4698      	mov	r8, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x5e>
 800163c:	e076      	b.n	800172c <__aeabi_dmul+0x14c>
 800163e:	4b5f      	ldr	r3, [pc, #380]	; (80017bc <__aeabi_dmul+0x1dc>)
 8001640:	429a      	cmp	r2, r3
 8001642:	d06d      	beq.n	8001720 <__aeabi_dmul+0x140>
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	0f41      	lsrs	r1, r0, #29
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	430b      	orrs	r3, r1
 800164c:	495c      	ldr	r1, [pc, #368]	; (80017c0 <__aeabi_dmul+0x1e0>)
 800164e:	00e4      	lsls	r4, r4, #3
 8001650:	468c      	mov	ip, r1
 8001652:	431c      	orrs	r4, r3
 8001654:	00c3      	lsls	r3, r0, #3
 8001656:	2000      	movs	r0, #0
 8001658:	4462      	add	r2, ip
 800165a:	4641      	mov	r1, r8
 800165c:	18b6      	adds	r6, r6, r2
 800165e:	4069      	eors	r1, r5
 8001660:	1c72      	adds	r2, r6, #1
 8001662:	9101      	str	r1, [sp, #4]
 8001664:	4694      	mov	ip, r2
 8001666:	4307      	orrs	r7, r0
 8001668:	2f0f      	cmp	r7, #15
 800166a:	d900      	bls.n	800166e <__aeabi_dmul+0x8e>
 800166c:	e0b0      	b.n	80017d0 <__aeabi_dmul+0x1f0>
 800166e:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <__aeabi_dmul+0x1e4>)
 8001670:	00bf      	lsls	r7, r7, #2
 8001672:	59d2      	ldr	r2, [r2, r7]
 8001674:	4697      	mov	pc, r2
 8001676:	465b      	mov	r3, fp
 8001678:	4303      	orrs	r3, r0
 800167a:	4699      	mov	r9, r3
 800167c:	d000      	beq.n	8001680 <__aeabi_dmul+0xa0>
 800167e:	e087      	b.n	8001790 <__aeabi_dmul+0x1b0>
 8001680:	2300      	movs	r3, #0
 8001682:	469b      	mov	fp, r3
 8001684:	3302      	adds	r3, #2
 8001686:	2708      	movs	r7, #8
 8001688:	9302      	str	r3, [sp, #8]
 800168a:	e7ce      	b.n	800162a <__aeabi_dmul+0x4a>
 800168c:	4642      	mov	r2, r8
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	2802      	cmp	r0, #2
 8001692:	d067      	beq.n	8001764 <__aeabi_dmul+0x184>
 8001694:	2803      	cmp	r0, #3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0xba>
 8001698:	e20e      	b.n	8001ab8 <__aeabi_dmul+0x4d8>
 800169a:	2801      	cmp	r0, #1
 800169c:	d000      	beq.n	80016a0 <__aeabi_dmul+0xc0>
 800169e:	e162      	b.n	8001966 <__aeabi_dmul+0x386>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2400      	movs	r4, #0
 80016a4:	2200      	movs	r2, #0
 80016a6:	4699      	mov	r9, r3
 80016a8:	9901      	ldr	r1, [sp, #4]
 80016aa:	4001      	ands	r1, r0
 80016ac:	b2cd      	uxtb	r5, r1
 80016ae:	2100      	movs	r1, #0
 80016b0:	0312      	lsls	r2, r2, #12
 80016b2:	0d0b      	lsrs	r3, r1, #20
 80016b4:	0b12      	lsrs	r2, r2, #12
 80016b6:	051b      	lsls	r3, r3, #20
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a43      	ldr	r2, [pc, #268]	; (80017c8 <__aeabi_dmul+0x1e8>)
 80016bc:	0524      	lsls	r4, r4, #20
 80016be:	4013      	ands	r3, r2
 80016c0:	431c      	orrs	r4, r3
 80016c2:	0064      	lsls	r4, r4, #1
 80016c4:	07ed      	lsls	r5, r5, #31
 80016c6:	0864      	lsrs	r4, r4, #1
 80016c8:	432c      	orrs	r4, r5
 80016ca:	4648      	mov	r0, r9
 80016cc:	0021      	movs	r1, r4
 80016ce:	b007      	add	sp, #28
 80016d0:	bc3c      	pop	{r2, r3, r4, r5}
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	46a2      	mov	sl, r4
 80016d8:	46ab      	mov	fp, r5
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016dc:	4303      	orrs	r3, r0
 80016de:	4699      	mov	r9, r3
 80016e0:	d04f      	beq.n	8001782 <__aeabi_dmul+0x1a2>
 80016e2:	465b      	mov	r3, fp
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x10a>
 80016e8:	e189      	b.n	80019fe <__aeabi_dmul+0x41e>
 80016ea:	4658      	mov	r0, fp
 80016ec:	f000 fde8 	bl	80022c0 <__clzsi2>
 80016f0:	0003      	movs	r3, r0
 80016f2:	3b0b      	subs	r3, #11
 80016f4:	2b1c      	cmp	r3, #28
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dmul+0x11a>
 80016f8:	e17a      	b.n	80019f0 <__aeabi_dmul+0x410>
 80016fa:	221d      	movs	r2, #29
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	003a      	movs	r2, r7
 8001700:	0001      	movs	r1, r0
 8001702:	465c      	mov	r4, fp
 8001704:	40da      	lsrs	r2, r3
 8001706:	3908      	subs	r1, #8
 8001708:	408c      	lsls	r4, r1
 800170a:	0013      	movs	r3, r2
 800170c:	408f      	lsls	r7, r1
 800170e:	4323      	orrs	r3, r4
 8001710:	469b      	mov	fp, r3
 8001712:	46b9      	mov	r9, r7
 8001714:	2300      	movs	r3, #0
 8001716:	4e2d      	ldr	r6, [pc, #180]	; (80017cc <__aeabi_dmul+0x1ec>)
 8001718:	2700      	movs	r7, #0
 800171a:	1a36      	subs	r6, r6, r0
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	e784      	b.n	800162a <__aeabi_dmul+0x4a>
 8001720:	4653      	mov	r3, sl
 8001722:	4323      	orrs	r3, r4
 8001724:	d12a      	bne.n	800177c <__aeabi_dmul+0x19c>
 8001726:	2400      	movs	r4, #0
 8001728:	2002      	movs	r0, #2
 800172a:	e796      	b.n	800165a <__aeabi_dmul+0x7a>
 800172c:	4653      	mov	r3, sl
 800172e:	4323      	orrs	r3, r4
 8001730:	d020      	beq.n	8001774 <__aeabi_dmul+0x194>
 8001732:	2c00      	cmp	r4, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dmul+0x158>
 8001736:	e157      	b.n	80019e8 <__aeabi_dmul+0x408>
 8001738:	0020      	movs	r0, r4
 800173a:	f000 fdc1 	bl	80022c0 <__clzsi2>
 800173e:	0003      	movs	r3, r0
 8001740:	3b0b      	subs	r3, #11
 8001742:	2b1c      	cmp	r3, #28
 8001744:	dd00      	ble.n	8001748 <__aeabi_dmul+0x168>
 8001746:	e149      	b.n	80019dc <__aeabi_dmul+0x3fc>
 8001748:	211d      	movs	r1, #29
 800174a:	1acb      	subs	r3, r1, r3
 800174c:	4651      	mov	r1, sl
 800174e:	0002      	movs	r2, r0
 8001750:	40d9      	lsrs	r1, r3
 8001752:	4653      	mov	r3, sl
 8001754:	3a08      	subs	r2, #8
 8001756:	4094      	lsls	r4, r2
 8001758:	4093      	lsls	r3, r2
 800175a:	430c      	orrs	r4, r1
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <__aeabi_dmul+0x1ec>)
 800175e:	1a12      	subs	r2, r2, r0
 8001760:	2000      	movs	r0, #0
 8001762:	e77a      	b.n	800165a <__aeabi_dmul+0x7a>
 8001764:	2501      	movs	r5, #1
 8001766:	9b01      	ldr	r3, [sp, #4]
 8001768:	4c14      	ldr	r4, [pc, #80]	; (80017bc <__aeabi_dmul+0x1dc>)
 800176a:	401d      	ands	r5, r3
 800176c:	2300      	movs	r3, #0
 800176e:	2200      	movs	r2, #0
 8001770:	4699      	mov	r9, r3
 8001772:	e79c      	b.n	80016ae <__aeabi_dmul+0xce>
 8001774:	2400      	movs	r4, #0
 8001776:	2200      	movs	r2, #0
 8001778:	2001      	movs	r0, #1
 800177a:	e76e      	b.n	800165a <__aeabi_dmul+0x7a>
 800177c:	4653      	mov	r3, sl
 800177e:	2003      	movs	r0, #3
 8001780:	e76b      	b.n	800165a <__aeabi_dmul+0x7a>
 8001782:	2300      	movs	r3, #0
 8001784:	469b      	mov	fp, r3
 8001786:	3301      	adds	r3, #1
 8001788:	2704      	movs	r7, #4
 800178a:	2600      	movs	r6, #0
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	e74c      	b.n	800162a <__aeabi_dmul+0x4a>
 8001790:	2303      	movs	r3, #3
 8001792:	4681      	mov	r9, r0
 8001794:	270c      	movs	r7, #12
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	e747      	b.n	800162a <__aeabi_dmul+0x4a>
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	2300      	movs	r3, #0
 800179e:	2500      	movs	r5, #0
 80017a0:	0312      	lsls	r2, r2, #12
 80017a2:	4699      	mov	r9, r3
 80017a4:	4c05      	ldr	r4, [pc, #20]	; (80017bc <__aeabi_dmul+0x1dc>)
 80017a6:	e782      	b.n	80016ae <__aeabi_dmul+0xce>
 80017a8:	465c      	mov	r4, fp
 80017aa:	464b      	mov	r3, r9
 80017ac:	9802      	ldr	r0, [sp, #8]
 80017ae:	e76f      	b.n	8001690 <__aeabi_dmul+0xb0>
 80017b0:	465c      	mov	r4, fp
 80017b2:	464b      	mov	r3, r9
 80017b4:	9501      	str	r5, [sp, #4]
 80017b6:	9802      	ldr	r0, [sp, #8]
 80017b8:	e76a      	b.n	8001690 <__aeabi_dmul+0xb0>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	000007ff 	.word	0x000007ff
 80017c0:	fffffc01 	.word	0xfffffc01
 80017c4:	08009220 	.word	0x08009220
 80017c8:	800fffff 	.word	0x800fffff
 80017cc:	fffffc0d 	.word	0xfffffc0d
 80017d0:	464a      	mov	r2, r9
 80017d2:	4649      	mov	r1, r9
 80017d4:	0c17      	lsrs	r7, r2, #16
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	0c1b      	lsrs	r3, r3, #16
 80017dc:	0408      	lsls	r0, r1, #16
 80017de:	0019      	movs	r1, r3
 80017e0:	0c00      	lsrs	r0, r0, #16
 80017e2:	4341      	muls	r1, r0
 80017e4:	0015      	movs	r5, r2
 80017e6:	4688      	mov	r8, r1
 80017e8:	0019      	movs	r1, r3
 80017ea:	437d      	muls	r5, r7
 80017ec:	4379      	muls	r1, r7
 80017ee:	9503      	str	r5, [sp, #12]
 80017f0:	4689      	mov	r9, r1
 80017f2:	0029      	movs	r1, r5
 80017f4:	0015      	movs	r5, r2
 80017f6:	4345      	muls	r5, r0
 80017f8:	444d      	add	r5, r9
 80017fa:	9502      	str	r5, [sp, #8]
 80017fc:	4645      	mov	r5, r8
 80017fe:	0c2d      	lsrs	r5, r5, #16
 8001800:	46aa      	mov	sl, r5
 8001802:	9d02      	ldr	r5, [sp, #8]
 8001804:	4455      	add	r5, sl
 8001806:	45a9      	cmp	r9, r5
 8001808:	d906      	bls.n	8001818 <__aeabi_dmul+0x238>
 800180a:	468a      	mov	sl, r1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0249      	lsls	r1, r1, #9
 8001810:	4689      	mov	r9, r1
 8001812:	44ca      	add	sl, r9
 8001814:	4651      	mov	r1, sl
 8001816:	9103      	str	r1, [sp, #12]
 8001818:	0c29      	lsrs	r1, r5, #16
 800181a:	9104      	str	r1, [sp, #16]
 800181c:	4641      	mov	r1, r8
 800181e:	0409      	lsls	r1, r1, #16
 8001820:	042d      	lsls	r5, r5, #16
 8001822:	0c09      	lsrs	r1, r1, #16
 8001824:	4688      	mov	r8, r1
 8001826:	0029      	movs	r1, r5
 8001828:	0c25      	lsrs	r5, r4, #16
 800182a:	0424      	lsls	r4, r4, #16
 800182c:	4441      	add	r1, r8
 800182e:	0c24      	lsrs	r4, r4, #16
 8001830:	9105      	str	r1, [sp, #20]
 8001832:	0021      	movs	r1, r4
 8001834:	4341      	muls	r1, r0
 8001836:	4688      	mov	r8, r1
 8001838:	0021      	movs	r1, r4
 800183a:	4379      	muls	r1, r7
 800183c:	468a      	mov	sl, r1
 800183e:	4368      	muls	r0, r5
 8001840:	4641      	mov	r1, r8
 8001842:	4450      	add	r0, sl
 8001844:	4681      	mov	r9, r0
 8001846:	0c08      	lsrs	r0, r1, #16
 8001848:	4448      	add	r0, r9
 800184a:	436f      	muls	r7, r5
 800184c:	4582      	cmp	sl, r0
 800184e:	d903      	bls.n	8001858 <__aeabi_dmul+0x278>
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0249      	lsls	r1, r1, #9
 8001854:	4689      	mov	r9, r1
 8001856:	444f      	add	r7, r9
 8001858:	0c01      	lsrs	r1, r0, #16
 800185a:	4689      	mov	r9, r1
 800185c:	0039      	movs	r1, r7
 800185e:	4449      	add	r1, r9
 8001860:	9102      	str	r1, [sp, #8]
 8001862:	4641      	mov	r1, r8
 8001864:	040f      	lsls	r7, r1, #16
 8001866:	9904      	ldr	r1, [sp, #16]
 8001868:	0c3f      	lsrs	r7, r7, #16
 800186a:	4688      	mov	r8, r1
 800186c:	0400      	lsls	r0, r0, #16
 800186e:	19c0      	adds	r0, r0, r7
 8001870:	4480      	add	r8, r0
 8001872:	4641      	mov	r1, r8
 8001874:	9104      	str	r1, [sp, #16]
 8001876:	4659      	mov	r1, fp
 8001878:	0c0f      	lsrs	r7, r1, #16
 800187a:	0409      	lsls	r1, r1, #16
 800187c:	0c09      	lsrs	r1, r1, #16
 800187e:	4688      	mov	r8, r1
 8001880:	4359      	muls	r1, r3
 8001882:	468a      	mov	sl, r1
 8001884:	0039      	movs	r1, r7
 8001886:	4351      	muls	r1, r2
 8001888:	4689      	mov	r9, r1
 800188a:	4641      	mov	r1, r8
 800188c:	434a      	muls	r2, r1
 800188e:	4651      	mov	r1, sl
 8001890:	0c09      	lsrs	r1, r1, #16
 8001892:	468b      	mov	fp, r1
 8001894:	437b      	muls	r3, r7
 8001896:	18d2      	adds	r2, r2, r3
 8001898:	445a      	add	r2, fp
 800189a:	4293      	cmp	r3, r2
 800189c:	d903      	bls.n	80018a6 <__aeabi_dmul+0x2c6>
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	469b      	mov	fp, r3
 80018a4:	44d9      	add	r9, fp
 80018a6:	4651      	mov	r1, sl
 80018a8:	0409      	lsls	r1, r1, #16
 80018aa:	0c09      	lsrs	r1, r1, #16
 80018ac:	468a      	mov	sl, r1
 80018ae:	4641      	mov	r1, r8
 80018b0:	4361      	muls	r1, r4
 80018b2:	437c      	muls	r4, r7
 80018b4:	0c13      	lsrs	r3, r2, #16
 80018b6:	0412      	lsls	r2, r2, #16
 80018b8:	444b      	add	r3, r9
 80018ba:	4452      	add	r2, sl
 80018bc:	46a1      	mov	r9, r4
 80018be:	468a      	mov	sl, r1
 80018c0:	003c      	movs	r4, r7
 80018c2:	4641      	mov	r1, r8
 80018c4:	436c      	muls	r4, r5
 80018c6:	434d      	muls	r5, r1
 80018c8:	4651      	mov	r1, sl
 80018ca:	444d      	add	r5, r9
 80018cc:	0c0f      	lsrs	r7, r1, #16
 80018ce:	197d      	adds	r5, r7, r5
 80018d0:	45a9      	cmp	r9, r5
 80018d2:	d903      	bls.n	80018dc <__aeabi_dmul+0x2fc>
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0249      	lsls	r1, r1, #9
 80018d8:	4688      	mov	r8, r1
 80018da:	4444      	add	r4, r8
 80018dc:	9f04      	ldr	r7, [sp, #16]
 80018de:	9903      	ldr	r1, [sp, #12]
 80018e0:	46b8      	mov	r8, r7
 80018e2:	4441      	add	r1, r8
 80018e4:	468b      	mov	fp, r1
 80018e6:	4583      	cmp	fp, r0
 80018e8:	4180      	sbcs	r0, r0
 80018ea:	4241      	negs	r1, r0
 80018ec:	4688      	mov	r8, r1
 80018ee:	4651      	mov	r1, sl
 80018f0:	0408      	lsls	r0, r1, #16
 80018f2:	042f      	lsls	r7, r5, #16
 80018f4:	0c00      	lsrs	r0, r0, #16
 80018f6:	183f      	adds	r7, r7, r0
 80018f8:	4658      	mov	r0, fp
 80018fa:	9902      	ldr	r1, [sp, #8]
 80018fc:	1810      	adds	r0, r2, r0
 80018fe:	4689      	mov	r9, r1
 8001900:	4290      	cmp	r0, r2
 8001902:	4192      	sbcs	r2, r2
 8001904:	444f      	add	r7, r9
 8001906:	46ba      	mov	sl, r7
 8001908:	4252      	negs	r2, r2
 800190a:	4699      	mov	r9, r3
 800190c:	4693      	mov	fp, r2
 800190e:	44c2      	add	sl, r8
 8001910:	44d1      	add	r9, sl
 8001912:	44cb      	add	fp, r9
 8001914:	428f      	cmp	r7, r1
 8001916:	41bf      	sbcs	r7, r7
 8001918:	45c2      	cmp	sl, r8
 800191a:	4189      	sbcs	r1, r1
 800191c:	4599      	cmp	r9, r3
 800191e:	419b      	sbcs	r3, r3
 8001920:	4593      	cmp	fp, r2
 8001922:	4192      	sbcs	r2, r2
 8001924:	427f      	negs	r7, r7
 8001926:	4249      	negs	r1, r1
 8001928:	0c2d      	lsrs	r5, r5, #16
 800192a:	4252      	negs	r2, r2
 800192c:	430f      	orrs	r7, r1
 800192e:	425b      	negs	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	197f      	adds	r7, r7, r5
 8001934:	18ff      	adds	r7, r7, r3
 8001936:	465b      	mov	r3, fp
 8001938:	193c      	adds	r4, r7, r4
 800193a:	0ddb      	lsrs	r3, r3, #23
 800193c:	9a05      	ldr	r2, [sp, #20]
 800193e:	0264      	lsls	r4, r4, #9
 8001940:	431c      	orrs	r4, r3
 8001942:	0243      	lsls	r3, r0, #9
 8001944:	4313      	orrs	r3, r2
 8001946:	1e5d      	subs	r5, r3, #1
 8001948:	41ab      	sbcs	r3, r5
 800194a:	465a      	mov	r2, fp
 800194c:	0dc0      	lsrs	r0, r0, #23
 800194e:	4303      	orrs	r3, r0
 8001950:	0252      	lsls	r2, r2, #9
 8001952:	4313      	orrs	r3, r2
 8001954:	01e2      	lsls	r2, r4, #7
 8001956:	d556      	bpl.n	8001a06 <__aeabi_dmul+0x426>
 8001958:	2001      	movs	r0, #1
 800195a:	085a      	lsrs	r2, r3, #1
 800195c:	4003      	ands	r3, r0
 800195e:	4313      	orrs	r3, r2
 8001960:	07e2      	lsls	r2, r4, #31
 8001962:	4313      	orrs	r3, r2
 8001964:	0864      	lsrs	r4, r4, #1
 8001966:	485a      	ldr	r0, [pc, #360]	; (8001ad0 <__aeabi_dmul+0x4f0>)
 8001968:	4460      	add	r0, ip
 800196a:	2800      	cmp	r0, #0
 800196c:	dd4d      	ble.n	8001a0a <__aeabi_dmul+0x42a>
 800196e:	075a      	lsls	r2, r3, #29
 8001970:	d009      	beq.n	8001986 <__aeabi_dmul+0x3a6>
 8001972:	220f      	movs	r2, #15
 8001974:	401a      	ands	r2, r3
 8001976:	2a04      	cmp	r2, #4
 8001978:	d005      	beq.n	8001986 <__aeabi_dmul+0x3a6>
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	429a      	cmp	r2, r3
 800197e:	419b      	sbcs	r3, r3
 8001980:	425b      	negs	r3, r3
 8001982:	18e4      	adds	r4, r4, r3
 8001984:	0013      	movs	r3, r2
 8001986:	01e2      	lsls	r2, r4, #7
 8001988:	d504      	bpl.n	8001994 <__aeabi_dmul+0x3b4>
 800198a:	2080      	movs	r0, #128	; 0x80
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <__aeabi_dmul+0x4f4>)
 800198e:	00c0      	lsls	r0, r0, #3
 8001990:	4014      	ands	r4, r2
 8001992:	4460      	add	r0, ip
 8001994:	4a50      	ldr	r2, [pc, #320]	; (8001ad8 <__aeabi_dmul+0x4f8>)
 8001996:	4290      	cmp	r0, r2
 8001998:	dd00      	ble.n	800199c <__aeabi_dmul+0x3bc>
 800199a:	e6e3      	b.n	8001764 <__aeabi_dmul+0x184>
 800199c:	2501      	movs	r5, #1
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	0762      	lsls	r2, r4, #29
 80019a2:	431a      	orrs	r2, r3
 80019a4:	0264      	lsls	r4, r4, #9
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	4691      	mov	r9, r2
 80019aa:	0b22      	lsrs	r2, r4, #12
 80019ac:	0544      	lsls	r4, r0, #21
 80019ae:	0d64      	lsrs	r4, r4, #21
 80019b0:	401d      	ands	r5, r3
 80019b2:	e67c      	b.n	80016ae <__aeabi_dmul+0xce>
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	4659      	mov	r1, fp
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4211      	tst	r1, r2
 80019bc:	d008      	beq.n	80019d0 <__aeabi_dmul+0x3f0>
 80019be:	4214      	tst	r4, r2
 80019c0:	d106      	bne.n	80019d0 <__aeabi_dmul+0x3f0>
 80019c2:	4322      	orrs	r2, r4
 80019c4:	0312      	lsls	r2, r2, #12
 80019c6:	0b12      	lsrs	r2, r2, #12
 80019c8:	4645      	mov	r5, r8
 80019ca:	4699      	mov	r9, r3
 80019cc:	4c43      	ldr	r4, [pc, #268]	; (8001adc <__aeabi_dmul+0x4fc>)
 80019ce:	e66e      	b.n	80016ae <__aeabi_dmul+0xce>
 80019d0:	465b      	mov	r3, fp
 80019d2:	431a      	orrs	r2, r3
 80019d4:	0312      	lsls	r2, r2, #12
 80019d6:	0b12      	lsrs	r2, r2, #12
 80019d8:	4c40      	ldr	r4, [pc, #256]	; (8001adc <__aeabi_dmul+0x4fc>)
 80019da:	e668      	b.n	80016ae <__aeabi_dmul+0xce>
 80019dc:	0003      	movs	r3, r0
 80019de:	4654      	mov	r4, sl
 80019e0:	3b28      	subs	r3, #40	; 0x28
 80019e2:	409c      	lsls	r4, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	e6b9      	b.n	800175c <__aeabi_dmul+0x17c>
 80019e8:	f000 fc6a 	bl	80022c0 <__clzsi2>
 80019ec:	3020      	adds	r0, #32
 80019ee:	e6a6      	b.n	800173e <__aeabi_dmul+0x15e>
 80019f0:	0003      	movs	r3, r0
 80019f2:	3b28      	subs	r3, #40	; 0x28
 80019f4:	409f      	lsls	r7, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	46bb      	mov	fp, r7
 80019fa:	4699      	mov	r9, r3
 80019fc:	e68a      	b.n	8001714 <__aeabi_dmul+0x134>
 80019fe:	f000 fc5f 	bl	80022c0 <__clzsi2>
 8001a02:	3020      	adds	r0, #32
 8001a04:	e674      	b.n	80016f0 <__aeabi_dmul+0x110>
 8001a06:	46b4      	mov	ip, r6
 8001a08:	e7ad      	b.n	8001966 <__aeabi_dmul+0x386>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	1a2a      	subs	r2, r5, r0
 8001a0e:	2a38      	cmp	r2, #56	; 0x38
 8001a10:	dd06      	ble.n	8001a20 <__aeabi_dmul+0x440>
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	2400      	movs	r4, #0
 8001a16:	401d      	ands	r5, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	e646      	b.n	80016ae <__aeabi_dmul+0xce>
 8001a20:	2a1f      	cmp	r2, #31
 8001a22:	dc21      	bgt.n	8001a68 <__aeabi_dmul+0x488>
 8001a24:	2520      	movs	r5, #32
 8001a26:	0020      	movs	r0, r4
 8001a28:	1aad      	subs	r5, r5, r2
 8001a2a:	001e      	movs	r6, r3
 8001a2c:	40ab      	lsls	r3, r5
 8001a2e:	40a8      	lsls	r0, r5
 8001a30:	40d6      	lsrs	r6, r2
 8001a32:	1e5d      	subs	r5, r3, #1
 8001a34:	41ab      	sbcs	r3, r5
 8001a36:	4330      	orrs	r0, r6
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	40d4      	lsrs	r4, r2
 8001a3c:	0743      	lsls	r3, r0, #29
 8001a3e:	d009      	beq.n	8001a54 <__aeabi_dmul+0x474>
 8001a40:	230f      	movs	r3, #15
 8001a42:	4003      	ands	r3, r0
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d005      	beq.n	8001a54 <__aeabi_dmul+0x474>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	1d18      	adds	r0, r3, #4
 8001a4c:	4298      	cmp	r0, r3
 8001a4e:	419b      	sbcs	r3, r3
 8001a50:	425b      	negs	r3, r3
 8001a52:	18e4      	adds	r4, r4, r3
 8001a54:	0223      	lsls	r3, r4, #8
 8001a56:	d521      	bpl.n	8001a9c <__aeabi_dmul+0x4bc>
 8001a58:	2501      	movs	r5, #1
 8001a5a:	9b01      	ldr	r3, [sp, #4]
 8001a5c:	2401      	movs	r4, #1
 8001a5e:	401d      	ands	r5, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	2200      	movs	r2, #0
 8001a64:	4699      	mov	r9, r3
 8001a66:	e622      	b.n	80016ae <__aeabi_dmul+0xce>
 8001a68:	251f      	movs	r5, #31
 8001a6a:	0021      	movs	r1, r4
 8001a6c:	426d      	negs	r5, r5
 8001a6e:	1a28      	subs	r0, r5, r0
 8001a70:	40c1      	lsrs	r1, r0
 8001a72:	0008      	movs	r0, r1
 8001a74:	2a20      	cmp	r2, #32
 8001a76:	d01d      	beq.n	8001ab4 <__aeabi_dmul+0x4d4>
 8001a78:	355f      	adds	r5, #95	; 0x5f
 8001a7a:	1aaa      	subs	r2, r5, r2
 8001a7c:	4094      	lsls	r4, r2
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	1e5c      	subs	r4, r3, #1
 8001a82:	41a3      	sbcs	r3, r4
 8001a84:	2507      	movs	r5, #7
 8001a86:	4303      	orrs	r3, r0
 8001a88:	401d      	ands	r5, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2d00      	cmp	r5, #0
 8001a8e:	d009      	beq.n	8001aa4 <__aeabi_dmul+0x4c4>
 8001a90:	220f      	movs	r2, #15
 8001a92:	2400      	movs	r4, #0
 8001a94:	401a      	ands	r2, r3
 8001a96:	0018      	movs	r0, r3
 8001a98:	2a04      	cmp	r2, #4
 8001a9a:	d1d6      	bne.n	8001a4a <__aeabi_dmul+0x46a>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	0765      	lsls	r5, r4, #29
 8001aa0:	0264      	lsls	r4, r4, #9
 8001aa2:	0b22      	lsrs	r2, r4, #12
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	432b      	orrs	r3, r5
 8001aa8:	2501      	movs	r5, #1
 8001aaa:	4699      	mov	r9, r3
 8001aac:	9b01      	ldr	r3, [sp, #4]
 8001aae:	2400      	movs	r4, #0
 8001ab0:	401d      	ands	r5, r3
 8001ab2:	e5fc      	b.n	80016ae <__aeabi_dmul+0xce>
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	e7e2      	b.n	8001a7e <__aeabi_dmul+0x49e>
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	2501      	movs	r5, #1
 8001abc:	0312      	lsls	r2, r2, #12
 8001abe:	4322      	orrs	r2, r4
 8001ac0:	9901      	ldr	r1, [sp, #4]
 8001ac2:	0312      	lsls	r2, r2, #12
 8001ac4:	0b12      	lsrs	r2, r2, #12
 8001ac6:	400d      	ands	r5, r1
 8001ac8:	4699      	mov	r9, r3
 8001aca:	4c04      	ldr	r4, [pc, #16]	; (8001adc <__aeabi_dmul+0x4fc>)
 8001acc:	e5ef      	b.n	80016ae <__aeabi_dmul+0xce>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	000003ff 	.word	0x000003ff
 8001ad4:	feffffff 	.word	0xfeffffff
 8001ad8:	000007fe 	.word	0x000007fe
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__aeabi_dsub>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4646      	mov	r6, r8
 8001ae4:	46d6      	mov	lr, sl
 8001ae6:	464f      	mov	r7, r9
 8001ae8:	030c      	lsls	r4, r1, #12
 8001aea:	b5c0      	push	{r6, r7, lr}
 8001aec:	0fcd      	lsrs	r5, r1, #31
 8001aee:	004e      	lsls	r6, r1, #1
 8001af0:	0a61      	lsrs	r1, r4, #9
 8001af2:	0f44      	lsrs	r4, r0, #29
 8001af4:	430c      	orrs	r4, r1
 8001af6:	00c1      	lsls	r1, r0, #3
 8001af8:	0058      	lsls	r0, r3, #1
 8001afa:	0d40      	lsrs	r0, r0, #21
 8001afc:	4684      	mov	ip, r0
 8001afe:	468a      	mov	sl, r1
 8001b00:	000f      	movs	r7, r1
 8001b02:	0319      	lsls	r1, r3, #12
 8001b04:	0f50      	lsrs	r0, r2, #29
 8001b06:	0a49      	lsrs	r1, r1, #9
 8001b08:	4301      	orrs	r1, r0
 8001b0a:	48c6      	ldr	r0, [pc, #792]	; (8001e24 <__aeabi_dsub+0x344>)
 8001b0c:	0d76      	lsrs	r6, r6, #21
 8001b0e:	46a8      	mov	r8, r5
 8001b10:	0fdb      	lsrs	r3, r3, #31
 8001b12:	00d2      	lsls	r2, r2, #3
 8001b14:	4584      	cmp	ip, r0
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dsub+0x3a>
 8001b18:	e0d8      	b.n	8001ccc <__aeabi_dsub+0x1ec>
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	4043      	eors	r3, r0
 8001b1e:	42ab      	cmp	r3, r5
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x44>
 8001b22:	e0a6      	b.n	8001c72 <__aeabi_dsub+0x192>
 8001b24:	4660      	mov	r0, ip
 8001b26:	1a35      	subs	r5, r6, r0
 8001b28:	2d00      	cmp	r5, #0
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_dsub+0x4e>
 8001b2c:	e105      	b.n	8001d3a <__aeabi_dsub+0x25a>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d110      	bne.n	8001b54 <__aeabi_dsub+0x74>
 8001b32:	000b      	movs	r3, r1
 8001b34:	4313      	orrs	r3, r2
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x5a>
 8001b38:	e0d7      	b.n	8001cea <__aeabi_dsub+0x20a>
 8001b3a:	1e6b      	subs	r3, r5, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_dsub+0x62>
 8001b40:	e14b      	b.n	8001dda <__aeabi_dsub+0x2fa>
 8001b42:	4653      	mov	r3, sl
 8001b44:	1a9f      	subs	r7, r3, r2
 8001b46:	45ba      	cmp	sl, r7
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	1a64      	subs	r4, r4, r1
 8001b4c:	4240      	negs	r0, r0
 8001b4e:	1a24      	subs	r4, r4, r0
 8001b50:	2601      	movs	r6, #1
 8001b52:	e01e      	b.n	8001b92 <__aeabi_dsub+0xb2>
 8001b54:	4bb3      	ldr	r3, [pc, #716]	; (8001e24 <__aeabi_dsub+0x344>)
 8001b56:	429e      	cmp	r6, r3
 8001b58:	d048      	beq.n	8001bec <__aeabi_dsub+0x10c>
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	041b      	lsls	r3, r3, #16
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	2d38      	cmp	r5, #56	; 0x38
 8001b62:	dd00      	ble.n	8001b66 <__aeabi_dsub+0x86>
 8001b64:	e119      	b.n	8001d9a <__aeabi_dsub+0x2ba>
 8001b66:	2d1f      	cmp	r5, #31
 8001b68:	dd00      	ble.n	8001b6c <__aeabi_dsub+0x8c>
 8001b6a:	e14c      	b.n	8001e06 <__aeabi_dsub+0x326>
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	000f      	movs	r7, r1
 8001b70:	1b5b      	subs	r3, r3, r5
 8001b72:	0010      	movs	r0, r2
 8001b74:	409a      	lsls	r2, r3
 8001b76:	409f      	lsls	r7, r3
 8001b78:	40e8      	lsrs	r0, r5
 8001b7a:	1e53      	subs	r3, r2, #1
 8001b7c:	419a      	sbcs	r2, r3
 8001b7e:	40e9      	lsrs	r1, r5
 8001b80:	4307      	orrs	r7, r0
 8001b82:	4317      	orrs	r7, r2
 8001b84:	4653      	mov	r3, sl
 8001b86:	1bdf      	subs	r7, r3, r7
 8001b88:	1a61      	subs	r1, r4, r1
 8001b8a:	45ba      	cmp	sl, r7
 8001b8c:	41a4      	sbcs	r4, r4
 8001b8e:	4264      	negs	r4, r4
 8001b90:	1b0c      	subs	r4, r1, r4
 8001b92:	0223      	lsls	r3, r4, #8
 8001b94:	d400      	bmi.n	8001b98 <__aeabi_dsub+0xb8>
 8001b96:	e0c5      	b.n	8001d24 <__aeabi_dsub+0x244>
 8001b98:	0264      	lsls	r4, r4, #9
 8001b9a:	0a65      	lsrs	r5, r4, #9
 8001b9c:	2d00      	cmp	r5, #0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0xc2>
 8001ba0:	e0f6      	b.n	8001d90 <__aeabi_dsub+0x2b0>
 8001ba2:	0028      	movs	r0, r5
 8001ba4:	f000 fb8c 	bl	80022c0 <__clzsi2>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	3b08      	subs	r3, #8
 8001bac:	2b1f      	cmp	r3, #31
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_dsub+0xd2>
 8001bb0:	e0e9      	b.n	8001d86 <__aeabi_dsub+0x2a6>
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	003c      	movs	r4, r7
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	409d      	lsls	r5, r3
 8001bba:	40d4      	lsrs	r4, r2
 8001bbc:	409f      	lsls	r7, r3
 8001bbe:	4325      	orrs	r5, r4
 8001bc0:	429e      	cmp	r6, r3
 8001bc2:	dd00      	ble.n	8001bc6 <__aeabi_dsub+0xe6>
 8001bc4:	e0db      	b.n	8001d7e <__aeabi_dsub+0x29e>
 8001bc6:	1b9e      	subs	r6, r3, r6
 8001bc8:	1c73      	adds	r3, r6, #1
 8001bca:	2b1f      	cmp	r3, #31
 8001bcc:	dd00      	ble.n	8001bd0 <__aeabi_dsub+0xf0>
 8001bce:	e10a      	b.n	8001de6 <__aeabi_dsub+0x306>
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	0038      	movs	r0, r7
 8001bd4:	1ad2      	subs	r2, r2, r3
 8001bd6:	0029      	movs	r1, r5
 8001bd8:	4097      	lsls	r7, r2
 8001bda:	002c      	movs	r4, r5
 8001bdc:	4091      	lsls	r1, r2
 8001bde:	40d8      	lsrs	r0, r3
 8001be0:	1e7a      	subs	r2, r7, #1
 8001be2:	4197      	sbcs	r7, r2
 8001be4:	40dc      	lsrs	r4, r3
 8001be6:	2600      	movs	r6, #0
 8001be8:	4301      	orrs	r1, r0
 8001bea:	430f      	orrs	r7, r1
 8001bec:	077b      	lsls	r3, r7, #29
 8001bee:	d009      	beq.n	8001c04 <__aeabi_dsub+0x124>
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	403b      	ands	r3, r7
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d005      	beq.n	8001c04 <__aeabi_dsub+0x124>
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	42bb      	cmp	r3, r7
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	427f      	negs	r7, r7
 8001c00:	19e4      	adds	r4, r4, r7
 8001c02:	001f      	movs	r7, r3
 8001c04:	0223      	lsls	r3, r4, #8
 8001c06:	d525      	bpl.n	8001c54 <__aeabi_dsub+0x174>
 8001c08:	4b86      	ldr	r3, [pc, #536]	; (8001e24 <__aeabi_dsub+0x344>)
 8001c0a:	3601      	adds	r6, #1
 8001c0c:	429e      	cmp	r6, r3
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0x132>
 8001c10:	e0af      	b.n	8001d72 <__aeabi_dsub+0x292>
 8001c12:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <__aeabi_dsub+0x348>)
 8001c14:	2501      	movs	r5, #1
 8001c16:	401c      	ands	r4, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	0762      	lsls	r2, r4, #29
 8001c1c:	08ff      	lsrs	r7, r7, #3
 8001c1e:	0264      	lsls	r4, r4, #9
 8001c20:	0576      	lsls	r6, r6, #21
 8001c22:	4317      	orrs	r7, r2
 8001c24:	0b24      	lsrs	r4, r4, #12
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	401d      	ands	r5, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	0324      	lsls	r4, r4, #12
 8001c2e:	0b23      	lsrs	r3, r4, #12
 8001c30:	0d0c      	lsrs	r4, r1, #20
 8001c32:	4a7e      	ldr	r2, [pc, #504]	; (8001e2c <__aeabi_dsub+0x34c>)
 8001c34:	0524      	lsls	r4, r4, #20
 8001c36:	431c      	orrs	r4, r3
 8001c38:	4014      	ands	r4, r2
 8001c3a:	0533      	lsls	r3, r6, #20
 8001c3c:	4323      	orrs	r3, r4
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	07ed      	lsls	r5, r5, #31
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	432b      	orrs	r3, r5
 8001c46:	0038      	movs	r0, r7
 8001c48:	0019      	movs	r1, r3
 8001c4a:	bc1c      	pop	{r2, r3, r4}
 8001c4c:	4690      	mov	r8, r2
 8001c4e:	4699      	mov	r9, r3
 8001c50:	46a2      	mov	sl, r4
 8001c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c54:	2501      	movs	r5, #1
 8001c56:	4643      	mov	r3, r8
 8001c58:	0762      	lsls	r2, r4, #29
 8001c5a:	08ff      	lsrs	r7, r7, #3
 8001c5c:	4317      	orrs	r7, r2
 8001c5e:	08e4      	lsrs	r4, r4, #3
 8001c60:	401d      	ands	r5, r3
 8001c62:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <__aeabi_dsub+0x344>)
 8001c64:	429e      	cmp	r6, r3
 8001c66:	d036      	beq.n	8001cd6 <__aeabi_dsub+0x1f6>
 8001c68:	0324      	lsls	r4, r4, #12
 8001c6a:	0576      	lsls	r6, r6, #21
 8001c6c:	0b24      	lsrs	r4, r4, #12
 8001c6e:	0d76      	lsrs	r6, r6, #21
 8001c70:	e7db      	b.n	8001c2a <__aeabi_dsub+0x14a>
 8001c72:	4663      	mov	r3, ip
 8001c74:	1af3      	subs	r3, r6, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dc00      	bgt.n	8001c7c <__aeabi_dsub+0x19c>
 8001c7a:	e094      	b.n	8001da6 <__aeabi_dsub+0x2c6>
 8001c7c:	4660      	mov	r0, ip
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d035      	beq.n	8001cee <__aeabi_dsub+0x20e>
 8001c82:	4868      	ldr	r0, [pc, #416]	; (8001e24 <__aeabi_dsub+0x344>)
 8001c84:	4286      	cmp	r6, r0
 8001c86:	d0b1      	beq.n	8001bec <__aeabi_dsub+0x10c>
 8001c88:	2780      	movs	r7, #128	; 0x80
 8001c8a:	043f      	lsls	r7, r7, #16
 8001c8c:	4339      	orrs	r1, r7
 8001c8e:	2b38      	cmp	r3, #56	; 0x38
 8001c90:	dc00      	bgt.n	8001c94 <__aeabi_dsub+0x1b4>
 8001c92:	e0fd      	b.n	8001e90 <__aeabi_dsub+0x3b0>
 8001c94:	430a      	orrs	r2, r1
 8001c96:	0017      	movs	r7, r2
 8001c98:	2100      	movs	r1, #0
 8001c9a:	1e7a      	subs	r2, r7, #1
 8001c9c:	4197      	sbcs	r7, r2
 8001c9e:	4457      	add	r7, sl
 8001ca0:	4557      	cmp	r7, sl
 8001ca2:	4180      	sbcs	r0, r0
 8001ca4:	1909      	adds	r1, r1, r4
 8001ca6:	4244      	negs	r4, r0
 8001ca8:	190c      	adds	r4, r1, r4
 8001caa:	0223      	lsls	r3, r4, #8
 8001cac:	d53a      	bpl.n	8001d24 <__aeabi_dsub+0x244>
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <__aeabi_dsub+0x344>)
 8001cb0:	3601      	adds	r6, #1
 8001cb2:	429e      	cmp	r6, r3
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x1d8>
 8001cb6:	e14b      	b.n	8001f50 <__aeabi_dsub+0x470>
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <__aeabi_dsub+0x348>)
 8001cbc:	401c      	ands	r4, r3
 8001cbe:	087b      	lsrs	r3, r7, #1
 8001cc0:	4017      	ands	r7, r2
 8001cc2:	431f      	orrs	r7, r3
 8001cc4:	07e2      	lsls	r2, r4, #31
 8001cc6:	4317      	orrs	r7, r2
 8001cc8:	0864      	lsrs	r4, r4, #1
 8001cca:	e78f      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001ccc:	0008      	movs	r0, r1
 8001cce:	4310      	orrs	r0, r2
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x1f4>
 8001cd2:	e724      	b.n	8001b1e <__aeabi_dsub+0x3e>
 8001cd4:	e721      	b.n	8001b1a <__aeabi_dsub+0x3a>
 8001cd6:	0023      	movs	r3, r4
 8001cd8:	433b      	orrs	r3, r7
 8001cda:	d100      	bne.n	8001cde <__aeabi_dsub+0x1fe>
 8001cdc:	e1b9      	b.n	8002052 <__aeabi_dsub+0x572>
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0312      	lsls	r2, r2, #12
 8001ce2:	4314      	orrs	r4, r2
 8001ce4:	0324      	lsls	r4, r4, #12
 8001ce6:	0b24      	lsrs	r4, r4, #12
 8001ce8:	e79f      	b.n	8001c2a <__aeabi_dsub+0x14a>
 8001cea:	002e      	movs	r6, r5
 8001cec:	e77e      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001cee:	0008      	movs	r0, r1
 8001cf0:	4310      	orrs	r0, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x216>
 8001cf4:	e0ca      	b.n	8001e8c <__aeabi_dsub+0x3ac>
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	4684      	mov	ip, r0
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dsub+0x220>
 8001cfe:	e0e7      	b.n	8001ed0 <__aeabi_dsub+0x3f0>
 8001d00:	4452      	add	r2, sl
 8001d02:	4552      	cmp	r2, sl
 8001d04:	4180      	sbcs	r0, r0
 8001d06:	1864      	adds	r4, r4, r1
 8001d08:	4240      	negs	r0, r0
 8001d0a:	1824      	adds	r4, r4, r0
 8001d0c:	0017      	movs	r7, r2
 8001d0e:	2601      	movs	r6, #1
 8001d10:	0223      	lsls	r3, r4, #8
 8001d12:	d507      	bpl.n	8001d24 <__aeabi_dsub+0x244>
 8001d14:	2602      	movs	r6, #2
 8001d16:	e7cf      	b.n	8001cb8 <__aeabi_dsub+0x1d8>
 8001d18:	4664      	mov	r4, ip
 8001d1a:	432c      	orrs	r4, r5
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x240>
 8001d1e:	e1b3      	b.n	8002088 <__aeabi_dsub+0x5a8>
 8001d20:	002c      	movs	r4, r5
 8001d22:	4667      	mov	r7, ip
 8001d24:	077b      	lsls	r3, r7, #29
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x24a>
 8001d28:	e762      	b.n	8001bf0 <__aeabi_dsub+0x110>
 8001d2a:	0763      	lsls	r3, r4, #29
 8001d2c:	08ff      	lsrs	r7, r7, #3
 8001d2e:	431f      	orrs	r7, r3
 8001d30:	2501      	movs	r5, #1
 8001d32:	4643      	mov	r3, r8
 8001d34:	08e4      	lsrs	r4, r4, #3
 8001d36:	401d      	ands	r5, r3
 8001d38:	e793      	b.n	8001c62 <__aeabi_dsub+0x182>
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	d178      	bne.n	8001e30 <__aeabi_dsub+0x350>
 8001d3e:	1c75      	adds	r5, r6, #1
 8001d40:	056d      	lsls	r5, r5, #21
 8001d42:	0d6d      	lsrs	r5, r5, #21
 8001d44:	2d01      	cmp	r5, #1
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x26a>
 8001d48:	e0f2      	b.n	8001f30 <__aeabi_dsub+0x450>
 8001d4a:	4650      	mov	r0, sl
 8001d4c:	1a80      	subs	r0, r0, r2
 8001d4e:	4582      	cmp	sl, r0
 8001d50:	41bf      	sbcs	r7, r7
 8001d52:	1a65      	subs	r5, r4, r1
 8001d54:	427f      	negs	r7, r7
 8001d56:	1bed      	subs	r5, r5, r7
 8001d58:	4684      	mov	ip, r0
 8001d5a:	0228      	lsls	r0, r5, #8
 8001d5c:	d400      	bmi.n	8001d60 <__aeabi_dsub+0x280>
 8001d5e:	e08c      	b.n	8001e7a <__aeabi_dsub+0x39a>
 8001d60:	4650      	mov	r0, sl
 8001d62:	1a17      	subs	r7, r2, r0
 8001d64:	42ba      	cmp	r2, r7
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	1b0c      	subs	r4, r1, r4
 8001d6a:	4255      	negs	r5, r2
 8001d6c:	1b65      	subs	r5, r4, r5
 8001d6e:	4698      	mov	r8, r3
 8001d70:	e714      	b.n	8001b9c <__aeabi_dsub+0xbc>
 8001d72:	2501      	movs	r5, #1
 8001d74:	4643      	mov	r3, r8
 8001d76:	2400      	movs	r4, #0
 8001d78:	401d      	ands	r5, r3
 8001d7a:	2700      	movs	r7, #0
 8001d7c:	e755      	b.n	8001c2a <__aeabi_dsub+0x14a>
 8001d7e:	4c2a      	ldr	r4, [pc, #168]	; (8001e28 <__aeabi_dsub+0x348>)
 8001d80:	1af6      	subs	r6, r6, r3
 8001d82:	402c      	ands	r4, r5
 8001d84:	e732      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001d86:	003d      	movs	r5, r7
 8001d88:	3828      	subs	r0, #40	; 0x28
 8001d8a:	4085      	lsls	r5, r0
 8001d8c:	2700      	movs	r7, #0
 8001d8e:	e717      	b.n	8001bc0 <__aeabi_dsub+0xe0>
 8001d90:	0038      	movs	r0, r7
 8001d92:	f000 fa95 	bl	80022c0 <__clzsi2>
 8001d96:	3020      	adds	r0, #32
 8001d98:	e706      	b.n	8001ba8 <__aeabi_dsub+0xc8>
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	0017      	movs	r7, r2
 8001d9e:	2100      	movs	r1, #0
 8001da0:	1e7a      	subs	r2, r7, #1
 8001da2:	4197      	sbcs	r7, r2
 8001da4:	e6ee      	b.n	8001b84 <__aeabi_dsub+0xa4>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x2cc>
 8001daa:	e0e5      	b.n	8001f78 <__aeabi_dsub+0x498>
 8001dac:	1c73      	adds	r3, r6, #1
 8001dae:	469c      	mov	ip, r3
 8001db0:	055b      	lsls	r3, r3, #21
 8001db2:	0d5b      	lsrs	r3, r3, #21
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	dc00      	bgt.n	8001dba <__aeabi_dsub+0x2da>
 8001db8:	e09f      	b.n	8001efa <__aeabi_dsub+0x41a>
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <__aeabi_dsub+0x344>)
 8001dbc:	459c      	cmp	ip, r3
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_dsub+0x2e2>
 8001dc0:	e0c5      	b.n	8001f4e <__aeabi_dsub+0x46e>
 8001dc2:	4452      	add	r2, sl
 8001dc4:	4552      	cmp	r2, sl
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	1864      	adds	r4, r4, r1
 8001dca:	4240      	negs	r0, r0
 8001dcc:	1824      	adds	r4, r4, r0
 8001dce:	07e7      	lsls	r7, r4, #31
 8001dd0:	0852      	lsrs	r2, r2, #1
 8001dd2:	4317      	orrs	r7, r2
 8001dd4:	0864      	lsrs	r4, r4, #1
 8001dd6:	4666      	mov	r6, ip
 8001dd8:	e708      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001dda:	4812      	ldr	r0, [pc, #72]	; (8001e24 <__aeabi_dsub+0x344>)
 8001ddc:	4285      	cmp	r5, r0
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x302>
 8001de0:	e085      	b.n	8001eee <__aeabi_dsub+0x40e>
 8001de2:	001d      	movs	r5, r3
 8001de4:	e6bc      	b.n	8001b60 <__aeabi_dsub+0x80>
 8001de6:	0029      	movs	r1, r5
 8001de8:	3e1f      	subs	r6, #31
 8001dea:	40f1      	lsrs	r1, r6
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x312>
 8001df0:	e07f      	b.n	8001ef2 <__aeabi_dsub+0x412>
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	409d      	lsls	r5, r3
 8001df8:	432f      	orrs	r7, r5
 8001dfa:	1e7d      	subs	r5, r7, #1
 8001dfc:	41af      	sbcs	r7, r5
 8001dfe:	2400      	movs	r4, #0
 8001e00:	430f      	orrs	r7, r1
 8001e02:	2600      	movs	r6, #0
 8001e04:	e78e      	b.n	8001d24 <__aeabi_dsub+0x244>
 8001e06:	002b      	movs	r3, r5
 8001e08:	000f      	movs	r7, r1
 8001e0a:	3b20      	subs	r3, #32
 8001e0c:	40df      	lsrs	r7, r3
 8001e0e:	2d20      	cmp	r5, #32
 8001e10:	d071      	beq.n	8001ef6 <__aeabi_dsub+0x416>
 8001e12:	2340      	movs	r3, #64	; 0x40
 8001e14:	1b5d      	subs	r5, r3, r5
 8001e16:	40a9      	lsls	r1, r5
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	1e51      	subs	r1, r2, #1
 8001e1c:	418a      	sbcs	r2, r1
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4317      	orrs	r7, r2
 8001e22:	e6af      	b.n	8001b84 <__aeabi_dsub+0xa4>
 8001e24:	000007ff 	.word	0x000007ff
 8001e28:	ff7fffff 	.word	0xff7fffff
 8001e2c:	800fffff 	.word	0x800fffff
 8001e30:	2e00      	cmp	r6, #0
 8001e32:	d03e      	beq.n	8001eb2 <__aeabi_dsub+0x3d2>
 8001e34:	4eb3      	ldr	r6, [pc, #716]	; (8002104 <__aeabi_dsub+0x624>)
 8001e36:	45b4      	cmp	ip, r6
 8001e38:	d045      	beq.n	8001ec6 <__aeabi_dsub+0x3e6>
 8001e3a:	2680      	movs	r6, #128	; 0x80
 8001e3c:	0436      	lsls	r6, r6, #16
 8001e3e:	426d      	negs	r5, r5
 8001e40:	4334      	orrs	r4, r6
 8001e42:	2d38      	cmp	r5, #56	; 0x38
 8001e44:	dd00      	ble.n	8001e48 <__aeabi_dsub+0x368>
 8001e46:	e0a8      	b.n	8001f9a <__aeabi_dsub+0x4ba>
 8001e48:	2d1f      	cmp	r5, #31
 8001e4a:	dd00      	ble.n	8001e4e <__aeabi_dsub+0x36e>
 8001e4c:	e11f      	b.n	800208e <__aeabi_dsub+0x5ae>
 8001e4e:	2620      	movs	r6, #32
 8001e50:	0027      	movs	r7, r4
 8001e52:	4650      	mov	r0, sl
 8001e54:	1b76      	subs	r6, r6, r5
 8001e56:	40b7      	lsls	r7, r6
 8001e58:	40e8      	lsrs	r0, r5
 8001e5a:	4307      	orrs	r7, r0
 8001e5c:	4650      	mov	r0, sl
 8001e5e:	40b0      	lsls	r0, r6
 8001e60:	1e46      	subs	r6, r0, #1
 8001e62:	41b0      	sbcs	r0, r6
 8001e64:	40ec      	lsrs	r4, r5
 8001e66:	4338      	orrs	r0, r7
 8001e68:	1a17      	subs	r7, r2, r0
 8001e6a:	42ba      	cmp	r2, r7
 8001e6c:	4192      	sbcs	r2, r2
 8001e6e:	1b0c      	subs	r4, r1, r4
 8001e70:	4252      	negs	r2, r2
 8001e72:	1aa4      	subs	r4, r4, r2
 8001e74:	4666      	mov	r6, ip
 8001e76:	4698      	mov	r8, r3
 8001e78:	e68b      	b.n	8001b92 <__aeabi_dsub+0xb2>
 8001e7a:	4664      	mov	r4, ip
 8001e7c:	4667      	mov	r7, ip
 8001e7e:	432c      	orrs	r4, r5
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x3a4>
 8001e82:	e68b      	b.n	8001b9c <__aeabi_dsub+0xbc>
 8001e84:	2500      	movs	r5, #0
 8001e86:	2600      	movs	r6, #0
 8001e88:	2700      	movs	r7, #0
 8001e8a:	e6ea      	b.n	8001c62 <__aeabi_dsub+0x182>
 8001e8c:	001e      	movs	r6, r3
 8001e8e:	e6ad      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001e90:	2b1f      	cmp	r3, #31
 8001e92:	dc60      	bgt.n	8001f56 <__aeabi_dsub+0x476>
 8001e94:	2720      	movs	r7, #32
 8001e96:	1af8      	subs	r0, r7, r3
 8001e98:	000f      	movs	r7, r1
 8001e9a:	4684      	mov	ip, r0
 8001e9c:	4087      	lsls	r7, r0
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	40d8      	lsrs	r0, r3
 8001ea2:	4307      	orrs	r7, r0
 8001ea4:	4660      	mov	r0, ip
 8001ea6:	4082      	lsls	r2, r0
 8001ea8:	1e50      	subs	r0, r2, #1
 8001eaa:	4182      	sbcs	r2, r0
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	4317      	orrs	r7, r2
 8001eb0:	e6f5      	b.n	8001c9e <__aeabi_dsub+0x1be>
 8001eb2:	0026      	movs	r6, r4
 8001eb4:	4650      	mov	r0, sl
 8001eb6:	4306      	orrs	r6, r0
 8001eb8:	d005      	beq.n	8001ec6 <__aeabi_dsub+0x3e6>
 8001eba:	43ed      	mvns	r5, r5
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d0d3      	beq.n	8001e68 <__aeabi_dsub+0x388>
 8001ec0:	4e90      	ldr	r6, [pc, #576]	; (8002104 <__aeabi_dsub+0x624>)
 8001ec2:	45b4      	cmp	ip, r6
 8001ec4:	d1bd      	bne.n	8001e42 <__aeabi_dsub+0x362>
 8001ec6:	000c      	movs	r4, r1
 8001ec8:	0017      	movs	r7, r2
 8001eca:	4666      	mov	r6, ip
 8001ecc:	4698      	mov	r8, r3
 8001ece:	e68d      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001ed0:	488c      	ldr	r0, [pc, #560]	; (8002104 <__aeabi_dsub+0x624>)
 8001ed2:	4283      	cmp	r3, r0
 8001ed4:	d00b      	beq.n	8001eee <__aeabi_dsub+0x40e>
 8001ed6:	4663      	mov	r3, ip
 8001ed8:	e6d9      	b.n	8001c8e <__aeabi_dsub+0x1ae>
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dsub+0x400>
 8001ede:	e096      	b.n	800200e <__aeabi_dsub+0x52e>
 8001ee0:	0008      	movs	r0, r1
 8001ee2:	4310      	orrs	r0, r2
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x408>
 8001ee6:	e0e2      	b.n	80020ae <__aeabi_dsub+0x5ce>
 8001ee8:	000c      	movs	r4, r1
 8001eea:	0017      	movs	r7, r2
 8001eec:	4698      	mov	r8, r3
 8001eee:	4e85      	ldr	r6, [pc, #532]	; (8002104 <__aeabi_dsub+0x624>)
 8001ef0:	e67c      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	e780      	b.n	8001df8 <__aeabi_dsub+0x318>
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	e78e      	b.n	8001e18 <__aeabi_dsub+0x338>
 8001efa:	0023      	movs	r3, r4
 8001efc:	4650      	mov	r0, sl
 8001efe:	4303      	orrs	r3, r0
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x426>
 8001f04:	e0a8      	b.n	8002058 <__aeabi_dsub+0x578>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x42c>
 8001f0a:	e0de      	b.n	80020ca <__aeabi_dsub+0x5ea>
 8001f0c:	000b      	movs	r3, r1
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x434>
 8001f12:	e66b      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001f14:	4452      	add	r2, sl
 8001f16:	4552      	cmp	r2, sl
 8001f18:	4180      	sbcs	r0, r0
 8001f1a:	1864      	adds	r4, r4, r1
 8001f1c:	4240      	negs	r0, r0
 8001f1e:	1824      	adds	r4, r4, r0
 8001f20:	0017      	movs	r7, r2
 8001f22:	0223      	lsls	r3, r4, #8
 8001f24:	d400      	bmi.n	8001f28 <__aeabi_dsub+0x448>
 8001f26:	e6fd      	b.n	8001d24 <__aeabi_dsub+0x244>
 8001f28:	4b77      	ldr	r3, [pc, #476]	; (8002108 <__aeabi_dsub+0x628>)
 8001f2a:	4666      	mov	r6, ip
 8001f2c:	401c      	ands	r4, r3
 8001f2e:	e65d      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001f30:	0025      	movs	r5, r4
 8001f32:	4650      	mov	r0, sl
 8001f34:	4305      	orrs	r5, r0
 8001f36:	2e00      	cmp	r6, #0
 8001f38:	d1cf      	bne.n	8001eda <__aeabi_dsub+0x3fa>
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d14f      	bne.n	8001fde <__aeabi_dsub+0x4fe>
 8001f3e:	000c      	movs	r4, r1
 8001f40:	4314      	orrs	r4, r2
 8001f42:	d100      	bne.n	8001f46 <__aeabi_dsub+0x466>
 8001f44:	e0a0      	b.n	8002088 <__aeabi_dsub+0x5a8>
 8001f46:	000c      	movs	r4, r1
 8001f48:	0017      	movs	r7, r2
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	e64e      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001f4e:	4666      	mov	r6, ip
 8001f50:	2400      	movs	r4, #0
 8001f52:	2700      	movs	r7, #0
 8001f54:	e685      	b.n	8001c62 <__aeabi_dsub+0x182>
 8001f56:	001f      	movs	r7, r3
 8001f58:	0008      	movs	r0, r1
 8001f5a:	3f20      	subs	r7, #32
 8001f5c:	40f8      	lsrs	r0, r7
 8001f5e:	0007      	movs	r7, r0
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x486>
 8001f64:	e08e      	b.n	8002084 <__aeabi_dsub+0x5a4>
 8001f66:	2040      	movs	r0, #64	; 0x40
 8001f68:	1ac3      	subs	r3, r0, r3
 8001f6a:	4099      	lsls	r1, r3
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	1e51      	subs	r1, r2, #1
 8001f70:	418a      	sbcs	r2, r1
 8001f72:	2100      	movs	r1, #0
 8001f74:	4317      	orrs	r7, r2
 8001f76:	e692      	b.n	8001c9e <__aeabi_dsub+0x1be>
 8001f78:	2e00      	cmp	r6, #0
 8001f7a:	d114      	bne.n	8001fa6 <__aeabi_dsub+0x4c6>
 8001f7c:	0026      	movs	r6, r4
 8001f7e:	4650      	mov	r0, sl
 8001f80:	4306      	orrs	r6, r0
 8001f82:	d062      	beq.n	800204a <__aeabi_dsub+0x56a>
 8001f84:	43db      	mvns	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d15c      	bne.n	8002044 <__aeabi_dsub+0x564>
 8001f8a:	1887      	adds	r7, r0, r2
 8001f8c:	4297      	cmp	r7, r2
 8001f8e:	4192      	sbcs	r2, r2
 8001f90:	1864      	adds	r4, r4, r1
 8001f92:	4252      	negs	r2, r2
 8001f94:	18a4      	adds	r4, r4, r2
 8001f96:	4666      	mov	r6, ip
 8001f98:	e687      	b.n	8001caa <__aeabi_dsub+0x1ca>
 8001f9a:	4650      	mov	r0, sl
 8001f9c:	4320      	orrs	r0, r4
 8001f9e:	1e44      	subs	r4, r0, #1
 8001fa0:	41a0      	sbcs	r0, r4
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	e760      	b.n	8001e68 <__aeabi_dsub+0x388>
 8001fa6:	4e57      	ldr	r6, [pc, #348]	; (8002104 <__aeabi_dsub+0x624>)
 8001fa8:	45b4      	cmp	ip, r6
 8001faa:	d04e      	beq.n	800204a <__aeabi_dsub+0x56a>
 8001fac:	2680      	movs	r6, #128	; 0x80
 8001fae:	0436      	lsls	r6, r6, #16
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	4334      	orrs	r4, r6
 8001fb4:	2b38      	cmp	r3, #56	; 0x38
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dsub+0x4da>
 8001fb8:	e07f      	b.n	80020ba <__aeabi_dsub+0x5da>
 8001fba:	2b1f      	cmp	r3, #31
 8001fbc:	dd00      	ble.n	8001fc0 <__aeabi_dsub+0x4e0>
 8001fbe:	e08b      	b.n	80020d8 <__aeabi_dsub+0x5f8>
 8001fc0:	2620      	movs	r6, #32
 8001fc2:	0027      	movs	r7, r4
 8001fc4:	4650      	mov	r0, sl
 8001fc6:	1af6      	subs	r6, r6, r3
 8001fc8:	40b7      	lsls	r7, r6
 8001fca:	40d8      	lsrs	r0, r3
 8001fcc:	4307      	orrs	r7, r0
 8001fce:	4650      	mov	r0, sl
 8001fd0:	40b0      	lsls	r0, r6
 8001fd2:	1e46      	subs	r6, r0, #1
 8001fd4:	41b0      	sbcs	r0, r6
 8001fd6:	4307      	orrs	r7, r0
 8001fd8:	40dc      	lsrs	r4, r3
 8001fda:	18bf      	adds	r7, r7, r2
 8001fdc:	e7d6      	b.n	8001f8c <__aeabi_dsub+0x4ac>
 8001fde:	000d      	movs	r5, r1
 8001fe0:	4315      	orrs	r5, r2
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x506>
 8001fe4:	e602      	b.n	8001bec <__aeabi_dsub+0x10c>
 8001fe6:	4650      	mov	r0, sl
 8001fe8:	1a80      	subs	r0, r0, r2
 8001fea:	4582      	cmp	sl, r0
 8001fec:	41bf      	sbcs	r7, r7
 8001fee:	1a65      	subs	r5, r4, r1
 8001ff0:	427f      	negs	r7, r7
 8001ff2:	1bed      	subs	r5, r5, r7
 8001ff4:	4684      	mov	ip, r0
 8001ff6:	0228      	lsls	r0, r5, #8
 8001ff8:	d400      	bmi.n	8001ffc <__aeabi_dsub+0x51c>
 8001ffa:	e68d      	b.n	8001d18 <__aeabi_dsub+0x238>
 8001ffc:	4650      	mov	r0, sl
 8001ffe:	1a17      	subs	r7, r2, r0
 8002000:	42ba      	cmp	r2, r7
 8002002:	4192      	sbcs	r2, r2
 8002004:	1b0c      	subs	r4, r1, r4
 8002006:	4252      	negs	r2, r2
 8002008:	1aa4      	subs	r4, r4, r2
 800200a:	4698      	mov	r8, r3
 800200c:	e5ee      	b.n	8001bec <__aeabi_dsub+0x10c>
 800200e:	000d      	movs	r5, r1
 8002010:	4315      	orrs	r5, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x536>
 8002014:	e76b      	b.n	8001eee <__aeabi_dsub+0x40e>
 8002016:	4650      	mov	r0, sl
 8002018:	0767      	lsls	r7, r4, #29
 800201a:	08c0      	lsrs	r0, r0, #3
 800201c:	4307      	orrs	r7, r0
 800201e:	2080      	movs	r0, #128	; 0x80
 8002020:	08e4      	lsrs	r4, r4, #3
 8002022:	0300      	lsls	r0, r0, #12
 8002024:	4204      	tst	r4, r0
 8002026:	d007      	beq.n	8002038 <__aeabi_dsub+0x558>
 8002028:	08cd      	lsrs	r5, r1, #3
 800202a:	4205      	tst	r5, r0
 800202c:	d104      	bne.n	8002038 <__aeabi_dsub+0x558>
 800202e:	002c      	movs	r4, r5
 8002030:	4698      	mov	r8, r3
 8002032:	08d7      	lsrs	r7, r2, #3
 8002034:	0749      	lsls	r1, r1, #29
 8002036:	430f      	orrs	r7, r1
 8002038:	0f7b      	lsrs	r3, r7, #29
 800203a:	00e4      	lsls	r4, r4, #3
 800203c:	431c      	orrs	r4, r3
 800203e:	00ff      	lsls	r7, r7, #3
 8002040:	4e30      	ldr	r6, [pc, #192]	; (8002104 <__aeabi_dsub+0x624>)
 8002042:	e5d3      	b.n	8001bec <__aeabi_dsub+0x10c>
 8002044:	4e2f      	ldr	r6, [pc, #188]	; (8002104 <__aeabi_dsub+0x624>)
 8002046:	45b4      	cmp	ip, r6
 8002048:	d1b4      	bne.n	8001fb4 <__aeabi_dsub+0x4d4>
 800204a:	000c      	movs	r4, r1
 800204c:	0017      	movs	r7, r2
 800204e:	4666      	mov	r6, ip
 8002050:	e5cc      	b.n	8001bec <__aeabi_dsub+0x10c>
 8002052:	2700      	movs	r7, #0
 8002054:	2400      	movs	r4, #0
 8002056:	e5e8      	b.n	8001c2a <__aeabi_dsub+0x14a>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d039      	beq.n	80020d0 <__aeabi_dsub+0x5f0>
 800205c:	000b      	movs	r3, r1
 800205e:	4313      	orrs	r3, r2
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x584>
 8002062:	e744      	b.n	8001eee <__aeabi_dsub+0x40e>
 8002064:	08c0      	lsrs	r0, r0, #3
 8002066:	0767      	lsls	r7, r4, #29
 8002068:	4307      	orrs	r7, r0
 800206a:	2080      	movs	r0, #128	; 0x80
 800206c:	08e4      	lsrs	r4, r4, #3
 800206e:	0300      	lsls	r0, r0, #12
 8002070:	4204      	tst	r4, r0
 8002072:	d0e1      	beq.n	8002038 <__aeabi_dsub+0x558>
 8002074:	08cb      	lsrs	r3, r1, #3
 8002076:	4203      	tst	r3, r0
 8002078:	d1de      	bne.n	8002038 <__aeabi_dsub+0x558>
 800207a:	08d7      	lsrs	r7, r2, #3
 800207c:	0749      	lsls	r1, r1, #29
 800207e:	430f      	orrs	r7, r1
 8002080:	001c      	movs	r4, r3
 8002082:	e7d9      	b.n	8002038 <__aeabi_dsub+0x558>
 8002084:	2100      	movs	r1, #0
 8002086:	e771      	b.n	8001f6c <__aeabi_dsub+0x48c>
 8002088:	2500      	movs	r5, #0
 800208a:	2700      	movs	r7, #0
 800208c:	e5e9      	b.n	8001c62 <__aeabi_dsub+0x182>
 800208e:	002e      	movs	r6, r5
 8002090:	0027      	movs	r7, r4
 8002092:	3e20      	subs	r6, #32
 8002094:	40f7      	lsrs	r7, r6
 8002096:	2d20      	cmp	r5, #32
 8002098:	d02f      	beq.n	80020fa <__aeabi_dsub+0x61a>
 800209a:	2640      	movs	r6, #64	; 0x40
 800209c:	1b75      	subs	r5, r6, r5
 800209e:	40ac      	lsls	r4, r5
 80020a0:	4650      	mov	r0, sl
 80020a2:	4320      	orrs	r0, r4
 80020a4:	1e44      	subs	r4, r0, #1
 80020a6:	41a0      	sbcs	r0, r4
 80020a8:	2400      	movs	r4, #0
 80020aa:	4338      	orrs	r0, r7
 80020ac:	e6dc      	b.n	8001e68 <__aeabi_dsub+0x388>
 80020ae:	2480      	movs	r4, #128	; 0x80
 80020b0:	2500      	movs	r5, #0
 80020b2:	0324      	lsls	r4, r4, #12
 80020b4:	4e13      	ldr	r6, [pc, #76]	; (8002104 <__aeabi_dsub+0x624>)
 80020b6:	2700      	movs	r7, #0
 80020b8:	e5d3      	b.n	8001c62 <__aeabi_dsub+0x182>
 80020ba:	4650      	mov	r0, sl
 80020bc:	4320      	orrs	r0, r4
 80020be:	0007      	movs	r7, r0
 80020c0:	1e78      	subs	r0, r7, #1
 80020c2:	4187      	sbcs	r7, r0
 80020c4:	2400      	movs	r4, #0
 80020c6:	18bf      	adds	r7, r7, r2
 80020c8:	e760      	b.n	8001f8c <__aeabi_dsub+0x4ac>
 80020ca:	000c      	movs	r4, r1
 80020cc:	0017      	movs	r7, r2
 80020ce:	e58d      	b.n	8001bec <__aeabi_dsub+0x10c>
 80020d0:	000c      	movs	r4, r1
 80020d2:	0017      	movs	r7, r2
 80020d4:	4e0b      	ldr	r6, [pc, #44]	; (8002104 <__aeabi_dsub+0x624>)
 80020d6:	e589      	b.n	8001bec <__aeabi_dsub+0x10c>
 80020d8:	001e      	movs	r6, r3
 80020da:	0027      	movs	r7, r4
 80020dc:	3e20      	subs	r6, #32
 80020de:	40f7      	lsrs	r7, r6
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d00c      	beq.n	80020fe <__aeabi_dsub+0x61e>
 80020e4:	2640      	movs	r6, #64	; 0x40
 80020e6:	1af3      	subs	r3, r6, r3
 80020e8:	409c      	lsls	r4, r3
 80020ea:	4650      	mov	r0, sl
 80020ec:	4320      	orrs	r0, r4
 80020ee:	1e44      	subs	r4, r0, #1
 80020f0:	41a0      	sbcs	r0, r4
 80020f2:	4307      	orrs	r7, r0
 80020f4:	2400      	movs	r4, #0
 80020f6:	18bf      	adds	r7, r7, r2
 80020f8:	e748      	b.n	8001f8c <__aeabi_dsub+0x4ac>
 80020fa:	2400      	movs	r4, #0
 80020fc:	e7d0      	b.n	80020a0 <__aeabi_dsub+0x5c0>
 80020fe:	2400      	movs	r4, #0
 8002100:	e7f3      	b.n	80020ea <__aeabi_dsub+0x60a>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	000007ff 	.word	0x000007ff
 8002108:	ff7fffff 	.word	0xff7fffff
 800210c:	00000000 	.word	0x00000000

08002110 <__aeabi_dcmpun>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4e0e      	ldr	r6, [pc, #56]	; (800214c <__aeabi_dcmpun+0x3c>)
 8002114:	030d      	lsls	r5, r1, #12
 8002116:	031c      	lsls	r4, r3, #12
 8002118:	0049      	lsls	r1, r1, #1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	0b2d      	lsrs	r5, r5, #12
 800211e:	0d49      	lsrs	r1, r1, #21
 8002120:	0b24      	lsrs	r4, r4, #12
 8002122:	0d5b      	lsrs	r3, r3, #21
 8002124:	42b1      	cmp	r1, r6
 8002126:	d004      	beq.n	8002132 <__aeabi_dcmpun+0x22>
 8002128:	4908      	ldr	r1, [pc, #32]	; (800214c <__aeabi_dcmpun+0x3c>)
 800212a:	2000      	movs	r0, #0
 800212c:	428b      	cmp	r3, r1
 800212e:	d008      	beq.n	8002142 <__aeabi_dcmpun+0x32>
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	4305      	orrs	r5, r0
 8002134:	2001      	movs	r0, #1
 8002136:	2d00      	cmp	r5, #0
 8002138:	d1fa      	bne.n	8002130 <__aeabi_dcmpun+0x20>
 800213a:	4904      	ldr	r1, [pc, #16]	; (800214c <__aeabi_dcmpun+0x3c>)
 800213c:	2000      	movs	r0, #0
 800213e:	428b      	cmp	r3, r1
 8002140:	d1f6      	bne.n	8002130 <__aeabi_dcmpun+0x20>
 8002142:	4314      	orrs	r4, r2
 8002144:	0020      	movs	r0, r4
 8002146:	1e44      	subs	r4, r0, #1
 8002148:	41a0      	sbcs	r0, r4
 800214a:	e7f1      	b.n	8002130 <__aeabi_dcmpun+0x20>
 800214c:	000007ff 	.word	0x000007ff

08002150 <__aeabi_d2iz>:
 8002150:	b530      	push	{r4, r5, lr}
 8002152:	4d13      	ldr	r5, [pc, #76]	; (80021a0 <__aeabi_d2iz+0x50>)
 8002154:	030a      	lsls	r2, r1, #12
 8002156:	004b      	lsls	r3, r1, #1
 8002158:	0b12      	lsrs	r2, r2, #12
 800215a:	0d5b      	lsrs	r3, r3, #21
 800215c:	0fc9      	lsrs	r1, r1, #31
 800215e:	2400      	movs	r4, #0
 8002160:	42ab      	cmp	r3, r5
 8002162:	dd10      	ble.n	8002186 <__aeabi_d2iz+0x36>
 8002164:	4c0f      	ldr	r4, [pc, #60]	; (80021a4 <__aeabi_d2iz+0x54>)
 8002166:	42a3      	cmp	r3, r4
 8002168:	dc0f      	bgt.n	800218a <__aeabi_d2iz+0x3a>
 800216a:	2480      	movs	r4, #128	; 0x80
 800216c:	4d0e      	ldr	r5, [pc, #56]	; (80021a8 <__aeabi_d2iz+0x58>)
 800216e:	0364      	lsls	r4, r4, #13
 8002170:	4322      	orrs	r2, r4
 8002172:	1aed      	subs	r5, r5, r3
 8002174:	2d1f      	cmp	r5, #31
 8002176:	dd0b      	ble.n	8002190 <__aeabi_d2iz+0x40>
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <__aeabi_d2iz+0x5c>)
 800217a:	1ac3      	subs	r3, r0, r3
 800217c:	40da      	lsrs	r2, r3
 800217e:	4254      	negs	r4, r2
 8002180:	2900      	cmp	r1, #0
 8002182:	d100      	bne.n	8002186 <__aeabi_d2iz+0x36>
 8002184:	0014      	movs	r4, r2
 8002186:	0020      	movs	r0, r4
 8002188:	bd30      	pop	{r4, r5, pc}
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <__aeabi_d2iz+0x60>)
 800218c:	18cc      	adds	r4, r1, r3
 800218e:	e7fa      	b.n	8002186 <__aeabi_d2iz+0x36>
 8002190:	4c08      	ldr	r4, [pc, #32]	; (80021b4 <__aeabi_d2iz+0x64>)
 8002192:	40e8      	lsrs	r0, r5
 8002194:	46a4      	mov	ip, r4
 8002196:	4463      	add	r3, ip
 8002198:	409a      	lsls	r2, r3
 800219a:	4302      	orrs	r2, r0
 800219c:	e7ef      	b.n	800217e <__aeabi_d2iz+0x2e>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	000003fe 	.word	0x000003fe
 80021a4:	0000041d 	.word	0x0000041d
 80021a8:	00000433 	.word	0x00000433
 80021ac:	00000413 	.word	0x00000413
 80021b0:	7fffffff 	.word	0x7fffffff
 80021b4:	fffffbed 	.word	0xfffffbed
	...

080021c0 <__aeabi_i2d>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d030      	beq.n	8002228 <__aeabi_i2d+0x68>
 80021c6:	17c3      	asrs	r3, r0, #31
 80021c8:	18c4      	adds	r4, r0, r3
 80021ca:	405c      	eors	r4, r3
 80021cc:	0fc5      	lsrs	r5, r0, #31
 80021ce:	0020      	movs	r0, r4
 80021d0:	f000 f876 	bl	80022c0 <__clzsi2>
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <__aeabi_i2d+0x74>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <__aeabi_i2d+0x78>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	2a1f      	cmp	r2, #31
 80021de:	dd18      	ble.n	8002212 <__aeabi_i2d+0x52>
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <__aeabi_i2d+0x7c>)
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	4094      	lsls	r4, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	0324      	lsls	r4, r4, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	0b24      	lsrs	r4, r4, #12
 80021ee:	0d5b      	lsrs	r3, r3, #21
 80021f0:	2100      	movs	r1, #0
 80021f2:	0010      	movs	r0, r2
 80021f4:	0324      	lsls	r4, r4, #12
 80021f6:	0d0a      	lsrs	r2, r1, #20
 80021f8:	0b24      	lsrs	r4, r4, #12
 80021fa:	0512      	lsls	r2, r2, #20
 80021fc:	4322      	orrs	r2, r4
 80021fe:	4c10      	ldr	r4, [pc, #64]	; (8002240 <__aeabi_i2d+0x80>)
 8002200:	051b      	lsls	r3, r3, #20
 8002202:	4022      	ands	r2, r4
 8002204:	4313      	orrs	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	07ed      	lsls	r5, r5, #31
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	432b      	orrs	r3, r5
 800220e:	0019      	movs	r1, r3
 8002210:	bd70      	pop	{r4, r5, r6, pc}
 8002212:	0021      	movs	r1, r4
 8002214:	4091      	lsls	r1, r2
 8002216:	000a      	movs	r2, r1
 8002218:	210b      	movs	r1, #11
 800221a:	1a08      	subs	r0, r1, r0
 800221c:	40c4      	lsrs	r4, r0
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	0324      	lsls	r4, r4, #12
 8002222:	0b24      	lsrs	r4, r4, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e7e3      	b.n	80021f0 <__aeabi_i2d+0x30>
 8002228:	2500      	movs	r5, #0
 800222a:	2300      	movs	r3, #0
 800222c:	2400      	movs	r4, #0
 800222e:	2200      	movs	r2, #0
 8002230:	e7de      	b.n	80021f0 <__aeabi_i2d+0x30>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	0000041e 	.word	0x0000041e
 8002238:	00000433 	.word	0x00000433
 800223c:	00000413 	.word	0x00000413
 8002240:	800fffff 	.word	0x800fffff
	...

08002250 <__aeabi_ui2d>:
 8002250:	b510      	push	{r4, lr}
 8002252:	1e04      	subs	r4, r0, #0
 8002254:	d028      	beq.n	80022a8 <__aeabi_ui2d+0x58>
 8002256:	f000 f833 	bl	80022c0 <__clzsi2>
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <__aeabi_ui2d+0x60>)
 800225c:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <__aeabi_ui2d+0x64>)
 800225e:	1a1b      	subs	r3, r3, r0
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	2a1f      	cmp	r2, #31
 8002264:	dd15      	ble.n	8002292 <__aeabi_ui2d+0x42>
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <__aeabi_ui2d+0x68>)
 8002268:	1ad2      	subs	r2, r2, r3
 800226a:	4094      	lsls	r4, r2
 800226c:	2200      	movs	r2, #0
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	055b      	lsls	r3, r3, #21
 8002272:	0b24      	lsrs	r4, r4, #12
 8002274:	0d5b      	lsrs	r3, r3, #21
 8002276:	2100      	movs	r1, #0
 8002278:	0010      	movs	r0, r2
 800227a:	0324      	lsls	r4, r4, #12
 800227c:	0d0a      	lsrs	r2, r1, #20
 800227e:	0b24      	lsrs	r4, r4, #12
 8002280:	0512      	lsls	r2, r2, #20
 8002282:	4322      	orrs	r2, r4
 8002284:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <__aeabi_ui2d+0x6c>)
 8002286:	051b      	lsls	r3, r3, #20
 8002288:	4022      	ands	r2, r4
 800228a:	4313      	orrs	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	0859      	lsrs	r1, r3, #1
 8002290:	bd10      	pop	{r4, pc}
 8002292:	0021      	movs	r1, r4
 8002294:	4091      	lsls	r1, r2
 8002296:	000a      	movs	r2, r1
 8002298:	210b      	movs	r1, #11
 800229a:	1a08      	subs	r0, r1, r0
 800229c:	40c4      	lsrs	r4, r0
 800229e:	055b      	lsls	r3, r3, #21
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	0b24      	lsrs	r4, r4, #12
 80022a4:	0d5b      	lsrs	r3, r3, #21
 80022a6:	e7e6      	b.n	8002276 <__aeabi_ui2d+0x26>
 80022a8:	2300      	movs	r3, #0
 80022aa:	2400      	movs	r4, #0
 80022ac:	2200      	movs	r2, #0
 80022ae:	e7e2      	b.n	8002276 <__aeabi_ui2d+0x26>
 80022b0:	0000041e 	.word	0x0000041e
 80022b4:	00000433 	.word	0x00000433
 80022b8:	00000413 	.word	0x00000413
 80022bc:	800fffff 	.word	0x800fffff

080022c0 <__clzsi2>:
 80022c0:	211c      	movs	r1, #28
 80022c2:	2301      	movs	r3, #1
 80022c4:	041b      	lsls	r3, r3, #16
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d301      	bcc.n	80022ce <__clzsi2+0xe>
 80022ca:	0c00      	lsrs	r0, r0, #16
 80022cc:	3910      	subs	r1, #16
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	4298      	cmp	r0, r3
 80022d2:	d301      	bcc.n	80022d8 <__clzsi2+0x18>
 80022d4:	0a00      	lsrs	r0, r0, #8
 80022d6:	3908      	subs	r1, #8
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	4298      	cmp	r0, r3
 80022dc:	d301      	bcc.n	80022e2 <__clzsi2+0x22>
 80022de:	0900      	lsrs	r0, r0, #4
 80022e0:	3904      	subs	r1, #4
 80022e2:	a202      	add	r2, pc, #8	; (adr r2, 80022ec <__clzsi2+0x2c>)
 80022e4:	5c10      	ldrb	r0, [r2, r0]
 80022e6:	1840      	adds	r0, r0, r1
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	02020304 	.word	0x02020304
 80022f0:	01010101 	.word	0x01010101
	...

08002300 <__clzdi2>:
 8002300:	b510      	push	{r4, lr}
 8002302:	2900      	cmp	r1, #0
 8002304:	d103      	bne.n	800230e <__clzdi2+0xe>
 8002306:	f7ff ffdb 	bl	80022c0 <__clzsi2>
 800230a:	3020      	adds	r0, #32
 800230c:	e002      	b.n	8002314 <__clzdi2+0x14>
 800230e:	1c08      	adds	r0, r1, #0
 8002310:	f7ff ffd6 	bl	80022c0 <__clzsi2>
 8002314:	bd10      	pop	{r4, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
	...

08002320 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	4770      	bx	lr
	...

08002330 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	4770      	bx	lr
	...

08002340 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8002340:	e7fe      	b.n	8002340 <__default_exit>
 8002342:	46c0      	nop			; (mov r8, r8)
	...

08002350 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002350:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <__init_ram_areas+0x60>)
 8002354:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002362:	e009      	b.n	8002378 <__init_ram_areas+0x28>
      *p = *tp;
 8002364:	9b02      	ldr	r3, [sp, #8]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	9b01      	ldr	r3, [sp, #4]
 800236a:	601a      	str	r2, [r3, #0]
      p++;
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	9301      	str	r3, [sp, #4]
      tp++;
 8002372:	9b02      	ldr	r3, [sp, #8]
 8002374:	3304      	adds	r3, #4
 8002376:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8002378:	9b03      	ldr	r3, [sp, #12]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	9b01      	ldr	r3, [sp, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d8f0      	bhi.n	8002364 <__init_ram_areas+0x14>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002382:	e005      	b.n	8002390 <__init_ram_areas+0x40>
      *p = 0;
 8002384:	9b01      	ldr	r3, [sp, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
      p++;
 800238a:	9b01      	ldr	r3, [sp, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	9b01      	ldr	r3, [sp, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d8f4      	bhi.n	8002384 <__init_ram_areas+0x34>
    }
    rap++;
 800239a:	9b03      	ldr	r3, [sp, #12]
 800239c:	3310      	adds	r3, #16
 800239e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80023a0:	9a03      	ldr	r2, [sp, #12]
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__init_ram_areas+0x64>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3d6      	bcc.n	8002356 <__init_ram_areas+0x6>
#endif
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	b004      	add	sp, #16
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	08009260 	.word	0x08009260
 80023b4:	080092e0 	.word	0x080092e0
	...

080023c0 <_unhandled_exception>:
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
 80023c0:	e7fe      	b.n	80023c0 <_unhandled_exception>
 80023c2:	46c0      	nop			; (mov r8, r8)
	...

080023d0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b530      	push	{r4, r5, lr}
 80023d2:	b083      	sub	sp, #12
 80023d4:	0002      	movs	r2, r0
 80023d6:	9100      	str	r1, [sp, #0]
 80023d8:	466b      	mov	r3, sp
 80023da:	3307      	adds	r3, #7
 80023dc:	701a      	strb	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
 80023de:	466b      	mov	r3, sp
 80023e0:	3307      	adds	r3, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b7f      	cmp	r3, #127	; 0x7f
 80023e6:	d936      	bls.n	8002456 <NVIC_SetPriority+0x86>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e8:	4c32      	ldr	r4, [pc, #200]	; (80024b4 <NVIC_SetPriority+0xe4>)
 80023ea:	466b      	mov	r3, sp
 80023ec:	3307      	adds	r3, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	001a      	movs	r2, r3
 80023f2:	230f      	movs	r3, #15
 80023f4:	4013      	ands	r3, r2
 80023f6:	3b08      	subs	r3, #8
 80023f8:	0899      	lsrs	r1, r3, #2
 80023fa:	4a2e      	ldr	r2, [pc, #184]	; (80024b4 <NVIC_SetPriority+0xe4>)
 80023fc:	466b      	mov	r3, sp
 80023fe:	3307      	adds	r3, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	230f      	movs	r3, #15
 8002406:	4003      	ands	r3, r0
 8002408:	3b08      	subs	r3, #8
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3306      	adds	r3, #6
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	18d3      	adds	r3, r2, r3
 8002412:	3304      	adds	r3, #4
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	466a      	mov	r2, sp
 8002418:	3207      	adds	r2, #7
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	0010      	movs	r0, r2
 800241e:	2203      	movs	r2, #3
 8002420:	4002      	ands	r2, r0
 8002422:	00d2      	lsls	r2, r2, #3
 8002424:	20ff      	movs	r0, #255	; 0xff
 8002426:	4090      	lsls	r0, r2
 8002428:	0002      	movs	r2, r0
 800242a:	43d2      	mvns	r2, r2
 800242c:	401a      	ands	r2, r3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800242e:	9b00      	ldr	r3, [sp, #0]
 8002430:	019b      	lsls	r3, r3, #6
 8002432:	20ff      	movs	r0, #255	; 0xff
 8002434:	4018      	ands	r0, r3
 8002436:	466b      	mov	r3, sp
 8002438:	3307      	adds	r3, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	001d      	movs	r5, r3
 800243e:	2303      	movs	r3, #3
 8002440:	402b      	ands	r3, r5
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4098      	lsls	r0, r3
 8002446:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002448:	431a      	orrs	r2, r3
 800244a:	1d8b      	adds	r3, r1, #6
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	3304      	adds	r3, #4
 8002452:	601a      	str	r2, [r3, #0]
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002454:	e02b      	b.n	80024ae <NVIC_SetPriority+0xde>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002456:	4c18      	ldr	r4, [pc, #96]	; (80024b8 <NVIC_SetPriority+0xe8>)
 8002458:	466b      	mov	r3, sp
 800245a:	3307      	adds	r3, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	4915      	ldr	r1, [pc, #84]	; (80024b8 <NVIC_SetPriority+0xe8>)
 8002464:	466a      	mov	r2, sp
 8002466:	3207      	adds	r2, #7
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	b252      	sxtb	r2, r2
 800246c:	0892      	lsrs	r2, r2, #2
 800246e:	32c0      	adds	r2, #192	; 0xc0
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	5852      	ldr	r2, [r2, r1]
 8002474:	4669      	mov	r1, sp
 8002476:	3107      	adds	r1, #7
 8002478:	7809      	ldrb	r1, [r1, #0]
 800247a:	0008      	movs	r0, r1
 800247c:	2103      	movs	r1, #3
 800247e:	4001      	ands	r1, r0
 8002480:	00c9      	lsls	r1, r1, #3
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	4088      	lsls	r0, r1
 8002486:	0001      	movs	r1, r0
 8002488:	43c9      	mvns	r1, r1
 800248a:	4011      	ands	r1, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800248c:	9a00      	ldr	r2, [sp, #0]
 800248e:	0192      	lsls	r2, r2, #6
 8002490:	20ff      	movs	r0, #255	; 0xff
 8002492:	4010      	ands	r0, r2
 8002494:	466a      	mov	r2, sp
 8002496:	3207      	adds	r2, #7
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	0015      	movs	r5, r2
 800249c:	2203      	movs	r2, #3
 800249e:	402a      	ands	r2, r5
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	4090      	lsls	r0, r2
 80024a4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a6:	430a      	orrs	r2, r1
 80024a8:	33c0      	adds	r3, #192	; 0xc0
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	511a      	str	r2, [r3, r4]
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	b003      	add	sp, #12
 80024b2:	bd30      	pop	{r4, r5, pc}
 80024b4:	e000ed00 	.word	0xe000ed00
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	00000000 	.word	0x00000000

080024c0 <port_init>:
/*===========================================================================*/

/**
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {
 80024c0:	b510      	push	{r4, lr}

  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 80024c2:	2302      	movs	r3, #2
 80024c4:	425b      	negs	r3, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ff81 	bl	80023d0 <NVIC_SetPriority>
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
	...

080024e0 <port_lock>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e0:	b672      	cpsid	i
 * @details In this port this function disables interrupts globally.
 */
static inline void port_lock(void) {

  __disable_irq();
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
	...

080024f0 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 80024f0:	b662      	cpsie	i
 * @details In this port this function enables interrupts globally.
 */
static inline void port_unlock(void) {

  __enable_irq();
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	4770      	bx	lr
 80024f6:	46c0      	nop			; (mov r8, r8)
	...

08002500 <port_lock_from_isr>:
/**
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function disables interrupts globally.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002500:	b510      	push	{r4, lr}

  port_lock();
 8002502:	f7ff ffed 	bl	80024e0 <port_lock>
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	bd10      	pop	{r4, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	0000      	movs	r0, r0
	...

08002510 <port_unlock_from_isr>:
/**
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function enables interrupts globally.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002510:	b510      	push	{r4, lr}

  port_unlock();
 8002512:	f7ff ffed 	bl	80024f0 <port_unlock>
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	bd10      	pop	{r4, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	0000      	movs	r0, r0
	...

08002520 <port_disable>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
 * @brief   Disables all the interrupt sources.
 */
static inline void port_disable(void) {

  __disable_irq();
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	4770      	bx	lr
 8002526:	46c0      	nop			; (mov r8, r8)
	...

08002530 <port_enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 8002530:	b662      	cpsie	i
 * @brief   Enables all the interrupt sources.
 */
static inline void port_enable(void) {

  __enable_irq();
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	4770      	bx	lr
 8002536:	46c0      	nop			; (mov r8, r8)
	...

08002540 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	4770      	bx	lr
	...

08002550 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <st_lld_get_counter+0xc>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	b29b      	uxth	r3, r3
}
 8002556:	0018      	movs	r0, r3
 8002558:	4770      	bx	lr
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40000400 	.word	0x40000400

08002560 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8002560:	b510      	push	{r4, lr}

  stStopAlarm();
 8002562:	f001 fe55 	bl	8004210 <stStopAlarm>
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	bd10      	pop	{r4, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	0000      	movs	r0, r0
	...

08002570 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8002570:	b500      	push	{lr}
 8002572:	b083      	sub	sp, #12
 8002574:	0002      	movs	r2, r0
 8002576:	466b      	mov	r3, sp
 8002578:	3306      	adds	r3, #6
 800257a:	801a      	strh	r2, [r3, #0]

  stSetAlarm(time);
 800257c:	466b      	mov	r3, sp
 800257e:	3306      	adds	r3, #6
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	0018      	movs	r0, r3
 8002584:	f001 fe4c 	bl	8004220 <stSetAlarm>
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	b003      	add	sp, #12
 800258c:	bd00      	pop	{pc}
 800258e:	46c0      	nop			; (mov r8, r8)

08002590 <port_timer_get_time>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8002590:	b510      	push	{r4, lr}

  return stGetCounter();
 8002592:	f7ff ffdd 	bl	8002550 <st_lld_get_counter>
 8002596:	0003      	movs	r3, r0
}
 8002598:	0018      	movs	r0, r3
 800259a:	bd10      	pop	{r4, pc}
 800259c:	0000      	movs	r0, r0
	...

080025a0 <chSysEnable>:
 * @note    This API is no replacement for @p chSysUnlock(), the
 *          @p chSysUnlock() could do more than just enable the interrupts.
 *
 * @special
 */
static inline void chSysEnable(void) {
 80025a0:	b510      	push	{r4, lr}

  _dbg_check_enable();
 80025a2:	f000 f96d 	bl	8002880 <_dbg_check_enable>
  port_enable();
 80025a6:	f7ff ffc3 	bl	8002530 <port_enable>
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)

080025b0 <chSysLockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 80025b0:	b510      	push	{r4, lr}

  port_lock_from_isr();
 80025b2:	f7ff ffa5 	bl	8002500 <port_lock_from_isr>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80025b6:	f000 f9ab 	bl	8002910 <_dbg_check_lock_from_isr>
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	46c0      	nop			; (mov r8, r8)

080025c0 <chSysUnlockFromISR>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 80025c0:	b510      	push	{r4, lr}

  _dbg_check_unlock_from_isr();
 80025c2:	f000 f9bd 	bl	8002940 <_dbg_check_unlock_from_isr>
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 80025c6:	f7ff ffa3 	bl	8002510 <port_unlock_from_isr>
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)

080025d0 <chVTGetSystemTimeX>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 80025d0:	b510      	push	{r4, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 80025d2:	f7ff ffdd 	bl	8002590 <port_timer_get_time>
 80025d6:	0003      	movs	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80025d8:	0018      	movs	r0, r3
 80025da:	bd10      	pop	{r4, pc}
 80025dc:	0000      	movs	r0, r0
	...

080025e0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 80025e0:	b510      	push	{r4, lr}
 80025e2:	b084      	sub	sp, #16

  chDbgCheckClassI();
 80025e4:	f000 fa04 	bl	80029f0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80025e8:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <chVTDoTickI+0x108>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	9303      	str	r3, [sp, #12]
  now = chVTGetSystemTimeX();
 80025ee:	240a      	movs	r4, #10
 80025f0:	446c      	add	r4, sp
 80025f2:	f7ff ffed 	bl	80025d0 <chVTGetSystemTimeX>
 80025f6:	0003      	movs	r3, r0
 80025f8:	8023      	strh	r3, [r4, #0]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80025fa:	e02e      	b.n	800265a <chVTDoTickI+0x7a>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80025fc:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <chVTDoTickI+0x108>)
 80025fe:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002600:	9b03      	ldr	r3, [sp, #12]
 8002602:	891b      	ldrh	r3, [r3, #8]
 8002604:	18d3      	adds	r3, r2, r3
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <chVTDoTickI+0x108>)
 800260a:	84da      	strh	r2, [r3, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800260c:	9b03      	ldr	r3, [sp, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a36      	ldr	r2, [pc, #216]	; (80026ec <chVTDoTickI+0x10c>)
 8002612:	605a      	str	r2, [r3, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <chVTDoTickI+0x108>)
 800261a:	61da      	str	r2, [r3, #28]
    fn = vtp->vt_func;
 800261c:	9b03      	ldr	r3, [sp, #12]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	9301      	str	r3, [sp, #4]
    vtp->vt_func = NULL;
 8002622:	9b03      	ldr	r3, [sp, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	60da      	str	r2, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <chVTDoTickI+0x108>)
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <chVTDoTickI+0x10c>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d101      	bne.n	8002636 <chVTDoTickI+0x56>
      port_timer_stop_alarm();
 8002632:	f7ff ff95 	bl	8002560 <port_timer_stop_alarm>
    }

    /* Leaving the system critical zone in order to execute the callback
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();
 8002636:	f7ff ffc3 	bl	80025c0 <chSysUnlockFromISR>

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800263a:	9b03      	ldr	r3, [sp, #12]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	9b01      	ldr	r3, [sp, #4]
 8002640:	0010      	movs	r0, r2
 8002642:	4798      	blx	r3

    /* Re-entering the critical zone in order to continue the exploration
       of the list.*/
    chSysLockFromISR();
 8002644:	f7ff ffb4 	bl	80025b0 <chSysLockFromISR>

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <chVTDoTickI+0x108>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	9303      	str	r3, [sp, #12]
    now = chVTGetSystemTimeX();
 800264e:	240a      	movs	r4, #10
 8002650:	446c      	add	r4, sp
 8002652:	f7ff ffbd 	bl	80025d0 <chVTGetSystemTimeX>
 8002656:	0003      	movs	r3, r0
 8002658:	8023      	strh	r3, [r4, #0]
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	891a      	ldrh	r2, [r3, #8]
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <chVTDoTickI+0x108>)
 8002660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002662:	210a      	movs	r1, #10
 8002664:	4469      	add	r1, sp
 8002666:	8809      	ldrh	r1, [r1, #0]
 8002668:	1acb      	subs	r3, r1, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	429a      	cmp	r2, r3
 800266e:	d9c5      	bls.n	80025fc <chVTDoTickI+0x1c>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <chVTDoTickI+0x108>)
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <chVTDoTickI+0x10c>)
 8002676:	429a      	cmp	r2, r3
 8002678:	d033      	beq.n	80026e2 <chVTDoTickI+0x102>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800267a:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <chVTDoTickI+0x108>)
 800267c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	891b      	ldrh	r3, [r3, #8]
 8002682:	18d3      	adds	r3, r2, r3
 8002684:	b299      	uxth	r1, r3
 8002686:	ab02      	add	r3, sp, #8
 8002688:	220a      	movs	r2, #10
 800268a:	446a      	add	r2, sp
 800268c:	8812      	ldrh	r2, [r2, #0]
 800268e:	1a8a      	subs	r2, r1, r2
 8002690:	801a      	strh	r2, [r3, #0]
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8002692:	ab02      	add	r3, sp, #8
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d802      	bhi.n	80026a0 <chVTDoTickI+0xc0>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800269a:	ab02      	add	r3, sp, #8
 800269c:	2202      	movs	r2, #2
 800269e:	801a      	strh	r2, [r3, #0]
  }
  port_timer_set_alarm(now + delta);
 80026a0:	220a      	movs	r2, #10
 80026a2:	446a      	add	r2, sp
 80026a4:	ab02      	add	r3, sp, #8
 80026a6:	8812      	ldrh	r2, [r2, #0]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	18d3      	adds	r3, r2, r3
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff ff5e 	bl	8002570 <port_timer_set_alarm>

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 80026b4:	f7ff ff8c 	bl	80025d0 <chVTGetSystemTimeX>
 80026b8:	0003      	movs	r3, r0
 80026ba:	001a      	movs	r2, r3
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <chVTDoTickI+0x108>)
 80026be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	230a      	movs	r3, #10
 80026c4:	446b      	add	r3, sp
 80026c6:	8819      	ldrh	r1, [r3, #0]
 80026c8:	ab02      	add	r3, sp, #8
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	18cb      	adds	r3, r1, r3
 80026ce:	4906      	ldr	r1, [pc, #24]	; (80026e8 <chVTDoTickI+0x108>)
 80026d0:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 80026d2:	1a5b      	subs	r3, r3, r1
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dd05      	ble.n	80026e4 <chVTDoTickI+0x104>
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <chVTDoTickI+0x110>)
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 f880 	bl	80027e0 <chSysHalt>
 80026e0:	e000      	b.n	80026e4 <chVTDoTickI+0x104>
    return;
 80026e2:	46c0      	nop			; (mov r8, r8)
              (now + delta - ch.vtlist.vt_lasttime),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80026e4:	b004      	add	sp, #16
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	20001620 	.word	0x20001620
 80026ec:	2000163c 	.word	0x2000163c
 80026f0:	080092e0 	.word	0x080092e0
	...

08002700 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 8002700:	b082      	sub	sp, #8
 8002702:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <chRegSetThreadName+0x14>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	9a01      	ldr	r2, [sp, #4]
 800270a:	619a      	str	r2, [r3, #24]
#else
  (void)name;
#endif
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	b002      	add	sp, #8
 8002710:	4770      	bx	lr
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	20001620 	.word	0x20001620
	...

08002720 <chRegSetThreadNameX>:
 * @param[in] tp        pointer to the thread
 * @param[in] name      thread name as a zero terminated string
 *
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {
 8002720:	b082      	sub	sp, #8
 8002722:	9001      	str	r0, [sp, #4]
 8002724:	9100      	str	r1, [sp, #0]

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8002726:	9b01      	ldr	r3, [sp, #4]
 8002728:	9a00      	ldr	r2, [sp, #0]
 800272a:	619a      	str	r2, [r3, #24]
#else
  (void)tp;
  (void)name;
#endif
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	b002      	add	sp, #8
 8002730:	4770      	bx	lr
 8002732:	46c0      	nop			; (mov r8, r8)
	...

08002740 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002740:	b500      	push	{lr}
 8002742:	b083      	sub	sp, #12
 8002744:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8002746:	f7ff fefb 	bl	8002540 <port_wait_for_interrupt>
 800274a:	e7fc      	b.n	8002746 <_idle_thread+0x6>
 800274c:	0000      	movs	r0, r0
	...

08002750 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8002750:	b500      	push	{lr}
 8002752:	b085      	sub	sp, #20
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
 8002754:	f7ff feb4 	bl	80024c0 <port_init>
  _scheduler_init();
 8002758:	f000 fbf2 	bl	8002f40 <_scheduler_init>
  _vt_init();
 800275c:	f000 f9f8 	bl	8002b50 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8002760:	f001 fbf6 	bl	8003f50 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8002764:	f001 fc4c 	bl	8004000 <_heap_init>
#endif
#if CH_DBG_STATISTICS == TRUE
  _stats_init();
#endif
#if CH_DBG_ENABLE_TRACE == TRUE
  _dbg_trace_init();
 8002768:	f000 f972 	bl	8002a50 <_dbg_trace_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <chSysInit+0x74>)
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	0018      	movs	r0, r3
 8002772:	f000 febd 	bl	80034f0 <_thread_init>
 8002776:	0002      	movs	r2, r0
 8002778:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <chSysInit+0x78>)
 800277a:	619a      	str	r2, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <chSysInit+0x78>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2220      	movs	r2, #32
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <chSysInit+0x78>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <chSysInit+0x7c>)
 800278c:	61da      	str	r2, [r3, #28]
#if CH_DBG_STATISTICS == TRUE
  /* Starting measurement for this thread.*/
  chTMStartMeasurementX(&currp->p_stats);
#endif

  chSysEnable();
 800278e:	f7ff ff07 	bl	80025a0 <chSysEnable>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Note, &ch_debug points to the string "main" if the registry is
     active.*/
  chRegSetThreadName((const char *)&ch_debug);
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <chSysInit+0x80>)
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff ffb3 	bl	8002700 <chRegSetThreadName>
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <chSysInit+0x84>)
 800279c:	480e      	ldr	r0, [pc, #56]	; (80027d8 <chSysInit+0x88>)
 800279e:	2300      	movs	r3, #0
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	0013      	movs	r3, r2
 80027a4:	2201      	movs	r2, #1
 80027a6:	21e0      	movs	r1, #224	; 0xe0
 80027a8:	f000 ff42 	bl	8003630 <chThdCreateStatic>
 80027ac:	0003      	movs	r3, r0
 80027ae:	9303      	str	r3, [sp, #12]
                                      sizeof(ch.idle_thread_wa),
                                      IDLEPRIO,
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <chSysInit+0x8c>)
 80027b2:	9b03      	ldr	r3, [sp, #12]
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7ff ffb2 	bl	8002720 <chRegSetThreadNameX>
  }
#endif
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	b005      	add	sp, #20
 80027c0:	bd00      	pop	{pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	20001a5c 	.word	0x20001a5c
 80027c8:	20001620 	.word	0x20001620
 80027cc:	20000400 	.word	0x20000400
 80027d0:	080093b0 	.word	0x080093b0
 80027d4:	08002741 	.word	0x08002741
 80027d8:	20001aa8 	.word	0x20001aa8
 80027dc:	08009150 	.word	0x08009150

080027e0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80027e0:	b500      	push	{lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	9001      	str	r0, [sp, #4]

  port_disable();
 80027e6:	f7ff fe9b 	bl	8002520 <port_disable>
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80027ea:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <chSysHalt+0x14>)
 80027ec:	9a01      	ldr	r2, [sp, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Harmless infinite loop.*/
  while (true) {
 80027f0:	e7fe      	b.n	80027f0 <chSysHalt+0x10>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20001620 	.word	0x20001620
	...

08002800 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8002800:	b510      	push	{r4, lr}

  chDbgCheckClassI();
 8002802:	f000 f8f5 	bl	80029f0 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
#endif
  chVTDoTickI();
 8002806:	f7ff feeb 	bl	80025e0 <chVTDoTickI>
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	bd10      	pop	{r4, pc}
 800280e:	46c0      	nop			; (mov r8, r8)

08002810 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	4770      	bx	lr
 8002816:	46c0      	nop			; (mov r8, r8)
	...

08002820 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8002820:	b662      	cpsie	i
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	4770      	bx	lr
 8002826:	46c0      	nop			; (mov r8, r8)
	...

08002830 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8002830:	b510      	push	{r4, lr}
  port_lock();
 8002832:	f7ff ffed 	bl	8002810 <port_lock>
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	bd10      	pop	{r4, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	0000      	movs	r0, r0
	...

08002840 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8002840:	b510      	push	{r4, lr}
  port_unlock();
 8002842:	f7ff ffed 	bl	8002820 <port_unlock>
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	bd10      	pop	{r4, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	0000      	movs	r0, r0
	...

08002850 <st_lld_get_counter>:
  return (systime_t)STM32_ST_TIM->CNT;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <st_lld_get_counter+0xc>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b29b      	uxth	r3, r3
}
 8002856:	0018      	movs	r0, r3
 8002858:	4770      	bx	lr
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40000400 	.word	0x40000400

08002860 <port_timer_get_time>:
static inline systime_t port_timer_get_time(void) {
 8002860:	b510      	push	{r4, lr}
  return stGetCounter();
 8002862:	f7ff fff5 	bl	8002850 <st_lld_get_counter>
 8002866:	0003      	movs	r3, r0
}
 8002868:	0018      	movs	r0, r3
 800286a:	bd10      	pop	{r4, pc}
 800286c:	0000      	movs	r0, r0
	...

08002870 <chVTGetSystemTimeX>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002870:	b510      	push	{r4, lr}
  return port_timer_get_time();
 8002872:	f7ff fff5 	bl	8002860 <port_timer_get_time>
 8002876:	0003      	movs	r3, r0
}
 8002878:	0018      	movs	r0, r3
 800287a:	bd10      	pop	{r4, pc}
 800287c:	0000      	movs	r0, r0
	...

08002880 <_dbg_check_enable>:
/**
 * @brief   Guard code for @p chSysEnable().
 *
 * @notapi
 */
void _dbg_check_enable(void) {
 8002880:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <_dbg_check_enable+0x20>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <_dbg_check_enable+0x12>
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <_dbg_check_enable+0x20>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <_dbg_check_enable+0x1a>
    chSysHalt("SV#3");
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <_dbg_check_enable+0x24>)
 8002894:	0018      	movs	r0, r3
 8002896:	f7ff ffa3 	bl	80027e0 <chSysHalt>
  }
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	bd10      	pop	{r4, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20001620 	.word	0x20001620
 80028a4:	08009170 	.word	0x08009170
	...

080028b0 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 80028b0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <_dbg_check_lock+0x24>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <_dbg_check_lock+0x12>
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <_dbg_check_lock+0x24>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <_dbg_check_lock+0x1a>
    chSysHalt("SV#4");
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <_dbg_check_lock+0x28>)
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff8b 	bl	80027e0 <chSysHalt>
  }
  _dbg_enter_lock();
 80028ca:	4b02      	ldr	r3, [pc, #8]	; (80028d4 <_dbg_check_lock+0x24>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	bd10      	pop	{r4, pc}
 80028d4:	20001620 	.word	0x20001620
 80028d8:	08009178 	.word	0x08009178
 80028dc:	00000000 	.word	0x00000000

080028e0 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 80028e0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <_dbg_check_unlock+0x24>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <_dbg_check_unlock+0x12>
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <_dbg_check_unlock+0x24>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dc03      	bgt.n	80028fa <_dbg_check_unlock+0x1a>
    chSysHalt("SV#5");
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <_dbg_check_unlock+0x28>)
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff ff73 	bl	80027e0 <chSysHalt>
  }
  _dbg_leave_lock();
 80028fa:	4b02      	ldr	r3, [pc, #8]	; (8002904 <_dbg_check_unlock+0x24>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	bd10      	pop	{r4, pc}
 8002904:	20001620 	.word	0x20001620
 8002908:	08009180 	.word	0x08009180
 800290c:	00000000 	.word	0x00000000

08002910 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8002910:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <_dbg_check_lock_from_isr+0x24>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	dd03      	ble.n	8002922 <_dbg_check_lock_from_isr+0x12>
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <_dbg_check_lock_from_isr+0x24>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <_dbg_check_lock_from_isr+0x1a>
    chSysHalt("SV#6");
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <_dbg_check_lock_from_isr+0x28>)
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff ff5b 	bl	80027e0 <chSysHalt>
  }
  _dbg_enter_lock();
 800292a:	4b02      	ldr	r3, [pc, #8]	; (8002934 <_dbg_check_lock_from_isr+0x24>)
 800292c:	2201      	movs	r2, #1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	bd10      	pop	{r4, pc}
 8002934:	20001620 	.word	0x20001620
 8002938:	08009188 	.word	0x08009188
 800293c:	00000000 	.word	0x00000000

08002940 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8002940:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <_dbg_check_unlock_from_isr+0x24>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	2b00      	cmp	r3, #0
 8002948:	dd03      	ble.n	8002952 <_dbg_check_unlock_from_isr+0x12>
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <_dbg_check_unlock_from_isr+0x24>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	2b00      	cmp	r3, #0
 8002950:	dc03      	bgt.n	800295a <_dbg_check_unlock_from_isr+0x1a>
    chSysHalt("SV#7");
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <_dbg_check_unlock_from_isr+0x28>)
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff ff43 	bl	80027e0 <chSysHalt>
  }
  _dbg_leave_lock();
 800295a:	4b02      	ldr	r3, [pc, #8]	; (8002964 <_dbg_check_unlock_from_isr+0x24>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	bd10      	pop	{r4, pc}
 8002964:	20001620 	.word	0x20001620
 8002968:	08009190 	.word	0x08009190
 800296c:	00000000 	.word	0x00000000

08002970 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8002970:	b510      	push	{r4, lr}

  port_lock_from_isr();
 8002972:	f7ff ff5d 	bl	8002830 <port_lock_from_isr>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <_dbg_check_enter_isr+0x30>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	db03      	blt.n	8002986 <_dbg_check_enter_isr+0x16>
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <_dbg_check_enter_isr+0x30>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <_dbg_check_enter_isr+0x1e>
    chSysHalt("SV#8");
 8002986:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <_dbg_check_enter_isr+0x34>)
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff ff29 	bl	80027e0 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <_dbg_check_enter_isr+0x30>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	4b02      	ldr	r3, [pc, #8]	; (80029a0 <_dbg_check_enter_isr+0x30>)
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
  port_unlock_from_isr();
 8002998:	f7ff ff52 	bl	8002840 <port_unlock_from_isr>
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	bd10      	pop	{r4, pc}
 80029a0:	20001620 	.word	0x20001620
 80029a4:	08009198 	.word	0x08009198
	...

080029b0 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 80029b0:	b510      	push	{r4, lr}

  port_lock_from_isr();
 80029b2:	f7ff ff3d 	bl	8002830 <port_lock_from_isr>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <_dbg_check_leave_isr+0x30>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	dd03      	ble.n	80029c6 <_dbg_check_leave_isr+0x16>
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <_dbg_check_leave_isr+0x30>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <_dbg_check_leave_isr+0x1e>
    chSysHalt("SV#9");
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <_dbg_check_leave_isr+0x34>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ff09 	bl	80027e0 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <_dbg_check_leave_isr+0x30>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	4b02      	ldr	r3, [pc, #8]	; (80029e0 <_dbg_check_leave_isr+0x30>)
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  port_unlock_from_isr();
 80029d8:	f7ff ff32 	bl	8002840 <port_unlock_from_isr>
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	20001620 	.word	0x20001620
 80029e4:	080091a0 	.word	0x080091a0
	...

080029f0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 80029f0:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <chDbgCheckClassI+0x20>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db03      	blt.n	8002a02 <chDbgCheckClassI+0x12>
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <chDbgCheckClassI+0x20>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dc03      	bgt.n	8002a0a <chDbgCheckClassI+0x1a>
    chSysHalt("SV#10");
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <chDbgCheckClassI+0x24>)
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff feeb 	bl	80027e0 <chSysHalt>
  }
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	bd10      	pop	{r4, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	20001620 	.word	0x20001620
 8002a14:	080091a8 	.word	0x080091a8
	...

08002a20 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8002a20:	b510      	push	{r4, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <chDbgCheckClassS+0x20>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <chDbgCheckClassS+0x12>
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <chDbgCheckClassS+0x20>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	dc03      	bgt.n	8002a3a <chDbgCheckClassS+0x1a>
    chSysHalt("SV#11");
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <chDbgCheckClassS+0x24>)
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fed3 	bl	80027e0 <chSysHalt>
  }
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	bd10      	pop	{r4, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	20001620 	.word	0x20001620
 8002a44:	080091b0 	.word	0x080091b0
	...

08002a50 <_dbg_trace_init>:
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <_dbg_trace_init+0x10>)
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8002a56:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <_dbg_trace_init+0x10>)
 8002a58:	4a02      	ldr	r2, [pc, #8]	; (8002a64 <_dbg_trace_init+0x14>)
 8002a5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	4770      	bx	lr
 8002a60:	20001620 	.word	0x20001620
 8002a64:	2000165c 	.word	0x2000165c
	...

08002a70 <_dbg_trace>:
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8002a70:	b510      	push	{r4, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	9001      	str	r0, [sp, #4]

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <_dbg_trace+0x54>)
 8002a78:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002a7a:	f7ff fef9 	bl	8002870 <chVTGetSystemTimeX>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	8023      	strh	r3, [r4, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <_dbg_trace+0x54>)
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <_dbg_trace+0x54>)
 8002a88:	6992      	ldr	r2, [r2, #24]
 8002a8a:	605a      	str	r2, [r3, #4]
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <_dbg_trace+0x54>)
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	9a01      	ldr	r2, [sp, #4]
 8002a92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a94:	609a      	str	r2, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <_dbg_trace+0x54>)
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	9a01      	ldr	r2, [sp, #4]
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	5c52      	ldrb	r2, [r2, r1]
 8002aa0:	731a      	strb	r2, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <_dbg_trace+0x54>)
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <_dbg_trace+0x54>)
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <_dbg_trace+0x54>)
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <_dbg_trace+0x58>)
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <_dbg_trace+0x4e>
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <_dbg_trace+0x54>)
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <_dbg_trace+0x5c>)
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd10      	pop	{r4, pc}
 8002ac4:	20001620 	.word	0x20001620
 8002ac8:	20001a5c 	.word	0x20001a5c
 8002acc:	2000165c 	.word	0x2000165c

08002ad0 <st_lld_get_counter>:
  return (systime_t)STM32_ST_TIM->CNT;
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <st_lld_get_counter+0xc>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b29b      	uxth	r3, r3
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	4770      	bx	lr
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40000400 	.word	0x40000400

08002ae0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 8002ae0:	b500      	push	{lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	466b      	mov	r3, sp
 8002ae8:	3306      	adds	r3, #6
 8002aea:	801a      	strh	r2, [r3, #0]
  stStartAlarm(time);
 8002aec:	466b      	mov	r3, sp
 8002aee:	3306      	adds	r3, #6
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 fb6c 	bl	80041d0 <stStartAlarm>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	b003      	add	sp, #12
 8002afc:	bd00      	pop	{pc}
 8002afe:	46c0      	nop			; (mov r8, r8)

08002b00 <port_timer_stop_alarm>:
static inline void port_timer_stop_alarm(void) {
 8002b00:	b510      	push	{r4, lr}
  stStopAlarm();
 8002b02:	f001 fb85 	bl	8004210 <stStopAlarm>
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	bd10      	pop	{r4, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	0000      	movs	r0, r0
	...

08002b10 <port_timer_set_alarm>:
static inline void port_timer_set_alarm(systime_t time) {
 8002b10:	b500      	push	{lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	0002      	movs	r2, r0
 8002b16:	466b      	mov	r3, sp
 8002b18:	3306      	adds	r3, #6
 8002b1a:	801a      	strh	r2, [r3, #0]
  stSetAlarm(time);
 8002b1c:	466b      	mov	r3, sp
 8002b1e:	3306      	adds	r3, #6
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 fb7c 	bl	8004220 <stSetAlarm>
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	b003      	add	sp, #12
 8002b2c:	bd00      	pop	{pc}
 8002b2e:	46c0      	nop			; (mov r8, r8)

08002b30 <port_timer_get_time>:
static inline systime_t port_timer_get_time(void) {
 8002b30:	b510      	push	{r4, lr}
  return stGetCounter();
 8002b32:	f7ff ffcd 	bl	8002ad0 <st_lld_get_counter>
 8002b36:	0003      	movs	r3, r0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	bd10      	pop	{r4, pc}
 8002b3c:	0000      	movs	r0, r0
	...

08002b40 <chVTGetSystemTimeX>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002b40:	b510      	push	{r4, lr}
  return port_timer_get_time();
 8002b42:	f7ff fff5 	bl	8002b30 <port_timer_get_time>
 8002b46:	0003      	movs	r3, r0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	0000      	movs	r0, r0
	...

08002b50 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <_vt_init+0x20>)
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <_vt_init+0x24>)
 8002b54:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <_vt_init+0x20>)
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <_vt_init+0x24>)
 8002b5a:	621a      	str	r2, [r3, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <_vt_init+0x20>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4252      	negs	r2, r2
 8002b62:	849a      	strh	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8002b64:	4b02      	ldr	r3, [pc, #8]	; (8002b70 <_vt_init+0x20>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	84da      	strh	r2, [r3, #38]	; 0x26
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	4770      	bx	lr
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20001620 	.word	0x20001620
 8002b74:	2000163c 	.word	0x2000163c
	...

08002b80 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8002b80:	b510      	push	{r4, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	9003      	str	r0, [sp, #12]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	446b      	add	r3, sp
 8002b8e:	1c0a      	adds	r2, r1, #0
 8002b90:	801a      	strh	r2, [r3, #0]
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 8002b92:	f7ff ff2d 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8002b96:	9b03      	ldr	r3, [sp, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <chVTDoSetI+0x2c>
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <chVTDoSetI+0x2c>
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	446b      	add	r3, sp
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <chVTDoSetI+0x34>
 8002bac:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <chVTDoSetI+0x184>)
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f7ff fe16 	bl	80027e0 <chSysHalt>

  vtp->vt_par = par;
 8002bb4:	9b03      	ldr	r3, [sp, #12]
 8002bb6:	9a00      	ldr	r2, [sp, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
  vtp->vt_func = vtfunc;
 8002bba:	9b03      	ldr	r3, [sp, #12]
 8002bbc:	9a01      	ldr	r2, [sp, #4]
 8002bbe:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 8002bc0:	ac04      	add	r4, sp, #16
 8002bc2:	f7ff ffbd 	bl	8002b40 <chVTGetSystemTimeX>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	8023      	strh	r3, [r4, #0]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8002bca:	230a      	movs	r3, #10
 8002bcc:	446b      	add	r3, sp
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d803      	bhi.n	8002bdc <chVTDoSetI+0x5c>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	446b      	add	r3, sp
 8002bd8:	2202      	movs	r2, #2
 8002bda:	801a      	strh	r2, [r3, #0]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <chVTDoSetI+0x188>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <chVTDoSetI+0x18c>)
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11f      	bne.n	8002c26 <chVTDoSetI+0xa6>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <chVTDoSetI+0x188>)
 8002be8:	aa04      	add	r2, sp, #16
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	84da      	strh	r2, [r3, #38]	; 0x26
      ch.vtlist.vt_next = vtp;
 8002bee:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <chVTDoSetI+0x188>)
 8002bf0:	9a03      	ldr	r2, [sp, #12]
 8002bf2:	61da      	str	r2, [r3, #28]
      ch.vtlist.vt_prev = vtp;
 8002bf4:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <chVTDoSetI+0x188>)
 8002bf6:	9a03      	ldr	r2, [sp, #12]
 8002bf8:	621a      	str	r2, [r3, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8002bfa:	9b03      	ldr	r3, [sp, #12]
 8002bfc:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <chVTDoSetI+0x18c>)
 8002bfe:	601a      	str	r2, [r3, #0]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002c00:	9b03      	ldr	r3, [sp, #12]
 8002c02:	4a42      	ldr	r2, [pc, #264]	; (8002d0c <chVTDoSetI+0x18c>)
 8002c04:	605a      	str	r2, [r3, #4]
      vtp->vt_delta = delay;
 8002c06:	9b03      	ldr	r3, [sp, #12]
 8002c08:	220a      	movs	r2, #10
 8002c0a:	446a      	add	r2, sp
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	811a      	strh	r2, [r3, #8]

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <chVTDoSetI+0x188>)
 8002c12:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002c14:	230a      	movs	r3, #10
 8002c16:	446b      	add	r3, sp
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	18d3      	adds	r3, r2, r3
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff ff5e 	bl	8002ae0 <port_timer_start_alarm>

      return;
 8002c24:	e06c      	b.n	8002d00 <chVTDoSetI+0x180>
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.vt_next;
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <chVTDoSetI+0x188>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	9305      	str	r3, [sp, #20]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.vt_lasttime + delay;
 8002c2c:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <chVTDoSetI+0x188>)
 8002c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c30:	aa04      	add	r2, sp, #16
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b299      	uxth	r1, r3
 8002c38:	2312      	movs	r3, #18
 8002c3a:	446b      	add	r3, sp
 8002c3c:	220a      	movs	r2, #10
 8002c3e:	446a      	add	r2, sp
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	188a      	adds	r2, r1, r2
 8002c44:	801a      	strh	r2, [r3, #0]

    if (delta < now - ch.vtlist.vt_lasttime) {
 8002c46:	2312      	movs	r3, #18
 8002c48:	446b      	add	r3, sp
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	ab04      	add	r3, sp, #16
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	492d      	ldr	r1, [pc, #180]	; (8002d08 <chVTDoSetI+0x188>)
 8002c52:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 8002c54:	1a5b      	subs	r3, r3, r1
 8002c56:	429a      	cmp	r2, r3
 8002c58:	da0c      	bge.n	8002c74 <chVTDoSetI+0xf4>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->vt_delta;
 8002c5a:	9b05      	ldr	r3, [sp, #20]
 8002c5c:	891a      	ldrh	r2, [r3, #8]
 8002c5e:	2312      	movs	r3, #18
 8002c60:	446b      	add	r3, sp
 8002c62:	2112      	movs	r1, #18
 8002c64:	4469      	add	r1, sp
 8002c66:	8809      	ldrh	r1, [r1, #0]
 8002c68:	1a8a      	subs	r2, r1, r2
 8002c6a:	801a      	strh	r2, [r3, #0]
      p = p->vt_next;
 8002c6c:	9b05      	ldr	r3, [sp, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	9305      	str	r3, [sp, #20]
 8002c72:	e01d      	b.n	8002cb0 <chVTDoSetI+0x130>
    }
    else if (delta < p->vt_delta) {
 8002c74:	9b05      	ldr	r3, [sp, #20]
 8002c76:	891b      	ldrh	r3, [r3, #8]
 8002c78:	2212      	movs	r2, #18
 8002c7a:	446a      	add	r2, sp
 8002c7c:	8812      	ldrh	r2, [r2, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d216      	bcs.n	8002cb0 <chVTDoSetI+0x130>
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.vt_lasttime + delta);
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <chVTDoSetI+0x188>)
 8002c84:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002c86:	2312      	movs	r3, #18
 8002c88:	446b      	add	r3, sp
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	18d3      	adds	r3, r2, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff ff3d 	bl	8002b10 <port_timer_set_alarm>
  p = ch.vtlist.vt_next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->vt_delta < delta) {
 8002c96:	e00b      	b.n	8002cb0 <chVTDoSetI+0x130>
    delta -= p->vt_delta;
 8002c98:	9b05      	ldr	r3, [sp, #20]
 8002c9a:	891a      	ldrh	r2, [r3, #8]
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	446b      	add	r3, sp
 8002ca0:	2112      	movs	r1, #18
 8002ca2:	4469      	add	r1, sp
 8002ca4:	8809      	ldrh	r1, [r1, #0]
 8002ca6:	1a8a      	subs	r2, r1, r2
 8002ca8:	801a      	strh	r2, [r3, #0]
    p = p->vt_next;
 8002caa:	9b05      	ldr	r3, [sp, #20]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	9305      	str	r3, [sp, #20]
  while (p->vt_delta < delta) {
 8002cb0:	9b05      	ldr	r3, [sp, #20]
 8002cb2:	891b      	ldrh	r3, [r3, #8]
 8002cb4:	2212      	movs	r2, #18
 8002cb6:	446a      	add	r2, sp
 8002cb8:	8812      	ldrh	r2, [r2, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d8ec      	bhi.n	8002c98 <chVTDoSetI+0x118>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8002cbe:	9b03      	ldr	r3, [sp, #12]
 8002cc0:	9a05      	ldr	r2, [sp, #20]
 8002cc2:	601a      	str	r2, [r3, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	9b03      	ldr	r3, [sp, #12]
 8002ccc:	605a      	str	r2, [r3, #4]
  vtp->vt_prev->vt_next = vtp;
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	9a03      	ldr	r2, [sp, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
  p->vt_prev = vtp;
 8002cd6:	9b05      	ldr	r3, [sp, #20]
 8002cd8:	9a03      	ldr	r2, [sp, #12]
 8002cda:	605a      	str	r2, [r3, #4]
  vtp->vt_delta = delta
 8002cdc:	9b03      	ldr	r3, [sp, #12]
 8002cde:	2212      	movs	r2, #18
 8002ce0:	446a      	add	r2, sp
 8002ce2:	8812      	ldrh	r2, [r2, #0]
 8002ce4:	811a      	strh	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8002ce6:	9b05      	ldr	r3, [sp, #20]
 8002ce8:	891a      	ldrh	r2, [r3, #8]
 8002cea:	2312      	movs	r3, #18
 8002cec:	446b      	add	r3, sp
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	9b05      	ldr	r3, [sp, #20]
 8002cf6:	811a      	strh	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <chVTDoSetI+0x188>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4252      	negs	r2, r2
 8002cfe:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8002d00:	b006      	add	sp, #24
 8002d02:	bd10      	pop	{r4, pc}
 8002d04:	080092f0 	.word	0x080092f0
 8002d08:	20001620 	.word	0x20001620
 8002d0c:	2000163c 	.word	0x2000163c

08002d10 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8002d10:	b500      	push	{lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8002d16:	f7ff fe6b 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
 8002d1a:	9b01      	ldr	r3, [sp, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <chVTDoResetI+0x18>
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <chVTDoResetI+0x114>)
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff fd5c 	bl	80027e0 <chSysHalt>
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");
 8002d28:	9b01      	ldr	r3, [sp, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <chVTDoResetI+0x28>
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <chVTDoResetI+0x114>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fd54 	bl	80027e0 <chSysHalt>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <chVTDoResetI+0x118>)
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	9b01      	ldr	r3, [sp, #4]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d01c      	beq.n	8002d7c <chVTDoResetI+0x6c>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	9a01      	ldr	r2, [sp, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8002d4c:	9b01      	ldr	r3, [sp, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	9a01      	ldr	r2, [sp, #4]
 8002d52:	6852      	ldr	r2, [r2, #4]
 8002d54:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8002d56:	9b01      	ldr	r3, [sp, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8002d5c:	9b01      	ldr	r3, [sp, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <chVTDoResetI+0x11c>)
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d058      	beq.n	8002e18 <chVTDoResetI+0x108>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8002d66:	9b01      	ldr	r3, [sp, #4]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	8919      	ldrh	r1, [r3, #8]
 8002d70:	9b01      	ldr	r3, [sp, #4]
 8002d72:	891b      	ldrh	r3, [r3, #8]
 8002d74:	18cb      	adds	r3, r1, r3
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8113      	strh	r3, [r2, #8]

    return;
 8002d7a:	e04d      	b.n	8002e18 <chVTDoResetI+0x108>
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8002d7c:	9b01      	ldr	r3, [sp, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <chVTDoResetI+0x118>)
 8002d82:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <chVTDoResetI+0x118>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a28      	ldr	r2, [pc, #160]	; (8002e2c <chVTDoResetI+0x11c>)
 8002d8a:	605a      	str	r2, [r3, #4]
  vtp->vt_func = NULL;
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <chVTDoResetI+0x118>)
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <chVTDoResetI+0x11c>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d102      	bne.n	8002da2 <chVTDoResetI+0x92>
    port_timer_stop_alarm();
 8002d9c:	f7ff feb0 	bl	8002b00 <port_timer_stop_alarm>

    return;
 8002da0:	e03d      	b.n	8002e1e <chVTDoResetI+0x10e>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <chVTDoResetI+0x118>)
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <chVTDoResetI+0x118>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	8919      	ldrh	r1, [r3, #8]
 8002dac:	9b01      	ldr	r3, [sp, #4]
 8002dae:	891b      	ldrh	r3, [r3, #8]
 8002db0:	18cb      	adds	r3, r1, r3
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	8113      	strh	r3, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8002db6:	f7ff fec3 	bl	8002b40 <chVTGetSystemTimeX>
 8002dba:	0003      	movs	r3, r0
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <chVTDoResetI+0x118>)
 8002dc0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002dc2:	ab03      	add	r3, sp, #12
 8002dc4:	1a8a      	subs	r2, r1, r2
 8002dc6:	801a      	strh	r2, [r3, #0]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <chVTDoResetI+0x118>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	891b      	ldrh	r3, [r3, #8]
 8002dce:	aa03      	add	r2, sp, #12
 8002dd0:	8812      	ldrh	r2, [r2, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d222      	bcs.n	8002e1c <chVTDoResetI+0x10c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <chVTDoResetI+0x118>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	8919      	ldrh	r1, [r3, #8]
 8002ddc:	230e      	movs	r3, #14
 8002dde:	446b      	add	r3, sp
 8002de0:	aa03      	add	r2, sp, #12
 8002de2:	8812      	ldrh	r2, [r2, #0]
 8002de4:	1a8a      	subs	r2, r1, r2
 8002de6:	801a      	strh	r2, [r3, #0]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8002de8:	230e      	movs	r3, #14
 8002dea:	446b      	add	r3, sp
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d803      	bhi.n	8002dfa <chVTDoResetI+0xea>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8002df2:	230e      	movs	r3, #14
 8002df4:	446b      	add	r3, sp
 8002df6:	2202      	movs	r2, #2
 8002df8:	801a      	strh	r2, [r3, #0]
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <chVTDoResetI+0x118>)
 8002dfc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8002dfe:	ab03      	add	r3, sp, #12
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	18d3      	adds	r3, r2, r3
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	230e      	movs	r3, #14
 8002e08:	446b      	add	r3, sp
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff fe7d 	bl	8002b10 <port_timer_set_alarm>
 8002e16:	e002      	b.n	8002e1e <chVTDoResetI+0x10e>
    return;
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	e000      	b.n	8002e1e <chVTDoResetI+0x10e>
    return;
 8002e1c:	46c0      	nop			; (mov r8, r8)
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002e1e:	b005      	add	sp, #20
 8002e20:	bd00      	pop	{pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	08009300 	.word	0x08009300
 8002e28:	20001620 	.word	0x20001620
 8002e2c:	2000163c 	.word	0x2000163c

08002e30 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002e30:	b672      	cpsid	i
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	4770      	bx	lr
 8002e36:	46c0      	nop			; (mov r8, r8)
	...

08002e40 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8002e40:	b662      	cpsie	i
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	4770      	bx	lr
 8002e46:	46c0      	nop			; (mov r8, r8)
	...

08002e50 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8002e50:	b510      	push	{r4, lr}
  port_lock();
 8002e52:	f7ff ffed 	bl	8002e30 <port_lock>
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	0000      	movs	r0, r0
	...

08002e60 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8002e60:	b510      	push	{r4, lr}
  port_unlock();
 8002e62:	f7ff ffed 	bl	8002e40 <port_unlock>
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	0000      	movs	r0, r0
	...

08002e70 <queue_init>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 8002e70:	b082      	sub	sp, #8
 8002e72:	9001      	str	r0, [sp, #4]

  tqp->p_next = (thread_t *)tqp;
 8002e74:	9b01      	ldr	r3, [sp, #4]
 8002e76:	9a01      	ldr	r2, [sp, #4]
 8002e78:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	9a01      	ldr	r2, [sp, #4]
 8002e7e:	605a      	str	r2, [r3, #4]
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	b002      	add	sp, #8
 8002e84:	4770      	bx	lr
 8002e86:	46c0      	nop			; (mov r8, r8)
	...

08002e90 <queue_fifo_remove>:
  tp->p_prev = tqp->p_prev;
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8002e90:	b084      	sub	sp, #16
 8002e92:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->p_next;
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	9303      	str	r3, [sp, #12]

  tqp->p_next = tp->p_next;
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	9b01      	ldr	r3, [sp, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8002ea2:	9b01      	ldr	r3, [sp, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	9a01      	ldr	r2, [sp, #4]
 8002ea8:	605a      	str	r2, [r3, #4]

  return tp;
 8002eaa:	9b03      	ldr	r3, [sp, #12]
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	b004      	add	sp, #16
 8002eb0:	4770      	bx	lr
 8002eb2:	46c0      	nop			; (mov r8, r8)
	...

08002ec0 <queue_dequeue>:
  tqp->p_prev->p_next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	9001      	str	r0, [sp, #4]

  tp->p_prev->p_next = tp->p_next;
 8002ec4:	9b01      	ldr	r3, [sp, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	9a01      	ldr	r2, [sp, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8002ece:	9b01      	ldr	r3, [sp, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	9a01      	ldr	r2, [sp, #4]
 8002ed4:	6852      	ldr	r2, [r2, #4]
 8002ed6:	605a      	str	r2, [r3, #4]

  return tp;
 8002ed8:	9b01      	ldr	r3, [sp, #4]
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	b002      	add	sp, #8
 8002ede:	4770      	bx	lr

08002ee0 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 8002ee0:	b510      	push	{r4, lr}
  port_lock_from_isr();
 8002ee2:	f7ff ffb5 	bl	8002e50 <port_lock_from_isr>
  _dbg_check_lock_from_isr();
 8002ee6:	f7ff fd13 	bl	8002910 <_dbg_check_lock_from_isr>
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	bd10      	pop	{r4, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)

08002ef0 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8002ef0:	b510      	push	{r4, lr}
  _dbg_check_unlock_from_isr();
 8002ef2:	f7ff fd25 	bl	8002940 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 8002ef6:	f7ff ffb3 	bl	8002e60 <port_unlock_from_isr>
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)

08002f00 <chVTIsArmedI>:
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 8002f00:	b500      	push	{lr}
 8002f02:	b083      	sub	sp, #12
 8002f04:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
 8002f06:	f7ff fd73 	bl	80029f0 <chDbgCheckClassI>
  return (bool)(vtp->vt_func != NULL);
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	4193      	sbcs	r3, r2
 8002f12:	b2db      	uxtb	r3, r3
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	b003      	add	sp, #12
 8002f18:	bd00      	pop	{pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	0000      	movs	r0, r0
	...

08002f20 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8002f20:	b500      	push	{lr}
 8002f22:	b083      	sub	sp, #12
 8002f24:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8002f26:	f7ff fd63 	bl	80029f0 <chDbgCheckClassI>

  sp->s_cnt++;
 8002f2a:	9b01      	ldr	r3, [sp, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	9b01      	ldr	r3, [sp, #4]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	b003      	add	sp, #12
 8002f38:	bd00      	pop	{pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	0000      	movs	r0, r0
	...

08002f40 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8002f40:	b510      	push	{r4, lr}

  queue_init(&ch.rlist.r_queue);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <_scheduler_init+0x20>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff93 	bl	8002e70 <queue_init>
  ch.rlist.r_prio = NOPRIO;
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <_scheduler_init+0x20>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <_scheduler_init+0x20>)
 8002f52:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <_scheduler_init+0x20>)
 8002f54:	611a      	str	r2, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8002f56:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <_scheduler_init+0x20>)
 8002f58:	4a01      	ldr	r2, [pc, #4]	; (8002f60 <_scheduler_init+0x20>)
 8002f5a:	615a      	str	r2, [r3, #20]
#endif
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	bd10      	pop	{r4, pc}
 8002f60:	20001620 	.word	0x20001620
	...

08002f70 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8002f70:	b500      	push	{lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	9001      	str	r0, [sp, #4]
  thread_t *cp;

  chDbgCheckClassI();
 8002f76:	f7ff fd3b 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <chSchReadyI+0x18>
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <chSchReadyI+0x78>)
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fc2c 	bl	80027e0 <chSysHalt>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	5c9b      	ldrb	r3, [r3, r2]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <chSchReadyI+0x2c>
 8002f92:	9b01      	ldr	r3, [sp, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	2b0f      	cmp	r3, #15
 8002f9a:	d103      	bne.n	8002fa4 <chSchReadyI+0x34>
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <chSchReadyI+0x78>)
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff fc1e 	bl	80027e0 <chSysHalt>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002fa4:	9b01      	ldr	r3, [sp, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]
  cp = (thread_t *)&ch.rlist.r_queue;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <chSchReadyI+0x7c>)
 8002fae:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->p_next;
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	9303      	str	r3, [sp, #12]
  } while (cp->p_prio >= tp->p_prio);
 8002fb6:	9b03      	ldr	r3, [sp, #12]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	9b01      	ldr	r3, [sp, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d2f6      	bcs.n	8002fb0 <chSchReadyI+0x40>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002fc2:	9b01      	ldr	r3, [sp, #4]
 8002fc4:	9a03      	ldr	r2, [sp, #12]
 8002fc6:	601a      	str	r2, [r3, #0]
  tp->p_prev = cp->p_prev;
 8002fc8:	9b03      	ldr	r3, [sp, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 8002fd0:	9b01      	ldr	r3, [sp, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	9a01      	ldr	r2, [sp, #4]
 8002fd6:	601a      	str	r2, [r3, #0]
  cp->p_prev = tp;
 8002fd8:	9b03      	ldr	r3, [sp, #12]
 8002fda:	9a01      	ldr	r2, [sp, #4]
 8002fdc:	605a      	str	r2, [r3, #4]

  return tp;
 8002fde:	9b01      	ldr	r3, [sp, #4]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	b005      	add	sp, #20
 8002fe4:	bd00      	pop	{pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	08009330 	.word	0x08009330
 8002fec:	20001620 	.word	0x20001620

08002ff0 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	466b      	mov	r3, sp
 8002ff8:	3307      	adds	r3, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();
 8002ffc:	f7ff fd10 	bl	8002a20 <chDbgCheckClassS>

  otp = currp;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <chSchGoSleepS+0x78>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	9303      	str	r3, [sp, #12]
  otp->p_state = newstate;
 8003006:	9b03      	ldr	r3, [sp, #12]
 8003008:	466a      	mov	r2, sp
 800300a:	3207      	adds	r2, #7
 800300c:	2120      	movs	r1, #32
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	545a      	strb	r2, [r3, r1]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <chSchGoSleepS+0x78>)
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff ff3b 	bl	8002e90 <queue_fifo_remove>
 800301a:	0002      	movs	r2, r0
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <chSchGoSleepS+0x78>)
 800301e:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <chSchGoSleepS+0x78>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2220      	movs	r2, #32
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
  chSysSwitch(currp, otp);
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fd1f 	bl	8002a70 <_dbg_trace>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003032:	f3ef 8309 	mrs	r3, PSP
 8003036:	001c      	movs	r4, r3
  return(result);
 8003038:	0023      	movs	r3, r4
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	9b02      	ldr	r3, [sp, #8]
 800303e:	3b24      	subs	r3, #36	; 0x24
 8003040:	001a      	movs	r2, r3
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	d203      	bcs.n	8003052 <chSchGoSleepS+0x62>
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <chSchGoSleepS+0x7c>)
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fbc7 	bl	80027e0 <chSysHalt>
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <chSchGoSleepS+0x78>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	9a03      	ldr	r2, [sp, #12]
 8003058:	0011      	movs	r1, r2
 800305a:	0018      	movs	r0, r3
 800305c:	f7fd f898 	bl	8000190 <_port_switch>
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	b004      	add	sp, #16
 8003064:	bd10      	pop	{r4, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	20001620 	.word	0x20001620
 800306c:	080091c0 	.word	0x080091c0

08003070 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8003070:	b500      	push	{lr}
 8003072:	b085      	sub	sp, #20
 8003074:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 8003076:	9b01      	ldr	r3, [sp, #4]
 8003078:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 800307a:	f7ff ff31 	bl	8002ee0 <chSysLockFromISR>
  switch (tp->p_state) {
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	2b07      	cmp	r3, #7
 8003086:	d816      	bhi.n	80030b6 <wakeup+0x46>
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <wakeup+0x60>)
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	469f      	mov	pc, r3
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8003092:	f7ff ff2d 	bl	8002ef0 <chSysUnlockFromISR>
    return;
 8003096:	e019      	b.n	80030cc <wakeup+0x5c>
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8003098:	9b03      	ldr	r3, [sp, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
    break;
 80030a0:	e00a      	b.n	80030b8 <wakeup+0x48>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80030a2:	9b03      	ldr	r3, [sp, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff ff3a 	bl	8002f20 <chSemFastSignalI>
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
  case CH_STATE_QUEUED:
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff ff06 	bl	8002ec0 <queue_dequeue>
    break;
 80030b4:	e000      	b.n	80030b8 <wakeup+0x48>
  default:
    /* Any other state, nothing to do.*/
    break;
 80030b6:	46c0      	nop			; (mov r8, r8)
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4252      	negs	r2, r2
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80030c0:	9b03      	ldr	r3, [sp, #12]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7ff ff54 	bl	8002f70 <chSchReadyI>
  chSysUnlockFromISR();
 80030c8:	f7ff ff12 	bl	8002ef0 <chSysUnlockFromISR>
}
 80030cc:	b005      	add	sp, #20
 80030ce:	bd00      	pop	{pc}
 80030d0:	08009310 	.word	0x08009310
	...

080030e0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80030e0:	b510      	push	{r4, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	0002      	movs	r2, r0
 80030e6:	466b      	mov	r3, sp
 80030e8:	3307      	adds	r3, #7
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	ab01      	add	r3, sp, #4
 80030ee:	1c0a      	adds	r2, r1, #0
 80030f0:	801a      	strh	r2, [r3, #0]

  chDbgCheckClassS();
 80030f2:	f7ff fc95 	bl	8002a20 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 80030f6:	ab01      	add	r3, sp, #4
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <chSchGoSleepTimeoutS+0x6c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d019      	beq.n	8003134 <chSchGoSleepTimeoutS+0x54>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <chSchGoSleepTimeoutS+0x70>)
 8003102:	699c      	ldr	r4, [r3, #24]
 8003104:	4a13      	ldr	r2, [pc, #76]	; (8003154 <chSchGoSleepTimeoutS+0x74>)
 8003106:	ab01      	add	r3, sp, #4
 8003108:	8819      	ldrh	r1, [r3, #0]
 800310a:	a803      	add	r0, sp, #12
 800310c:	0023      	movs	r3, r4
 800310e:	f7ff fd37 	bl	8002b80 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003112:	466b      	mov	r3, sp
 8003114:	3307      	adds	r3, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff ff69 	bl	8002ff0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800311e:	ab03      	add	r3, sp, #12
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff feed 	bl	8002f00 <chVTIsArmedI>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d00a      	beq.n	8003140 <chSchGoSleepTimeoutS+0x60>
      chVTDoResetI(&vt);
 800312a:	ab03      	add	r3, sp, #12
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff fdef 	bl	8002d10 <chVTDoResetI>
 8003132:	e005      	b.n	8003140 <chSchGoSleepTimeoutS+0x60>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003134:	466b      	mov	r3, sp
 8003136:	3307      	adds	r3, #7
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff ff58 	bl	8002ff0 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <chSchGoSleepTimeoutS+0x70>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003146:	0018      	movs	r0, r3
 8003148:	b008      	add	sp, #32
 800314a:	bd10      	pop	{r4, pc}
 800314c:	0000ffff 	.word	0x0000ffff
 8003150:	20001620 	.word	0x20001620
 8003154:	08003071 	.word	0x08003071
	...

08003160 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003160:	b510      	push	{r4, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	9001      	str	r0, [sp, #4]
 8003166:	9100      	str	r1, [sp, #0]

  chDbgCheckClassS();
 8003168:	f7ff fc5a 	bl	8002a20 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <chSchWakeupS+0xa4>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <chSchWakeupS+0xa4>)
 8003172:	429a      	cmp	r2, r3
 8003174:	d00b      	beq.n	800318e <chSchWakeupS+0x2e>
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <chSchWakeupS+0xa4>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <chSchWakeupS+0xa4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d203      	bcs.n	800318e <chSchWakeupS+0x2e>
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <chSchWakeupS+0xa8>)
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff fb29 	bl	80027e0 <chSysHalt>
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800318e:	9b01      	ldr	r3, [sp, #4]
 8003190:	9a00      	ldr	r2, [sp, #0]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <chSchWakeupS+0xa4>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d804      	bhi.n	80031ac <chSchWakeupS+0x4c>
    (void) chSchReadyI(ntp);
 80031a2:	9b01      	ldr	r3, [sp, #4]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff fee3 	bl	8002f70 <chSchReadyI>
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80031aa:	e027      	b.n	80031fc <chSchWakeupS+0x9c>
    thread_t *otp = chSchReadyI(currp);
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <chSchWakeupS+0xa4>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff fedd 	bl	8002f70 <chSchReadyI>
 80031b6:	0003      	movs	r3, r0
 80031b8:	9303      	str	r3, [sp, #12]
    setcurrp(ntp);
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <chSchWakeupS+0xa4>)
 80031bc:	9a01      	ldr	r2, [sp, #4]
 80031be:	619a      	str	r2, [r3, #24]
    ntp->p_state = CH_STATE_CURRENT;
 80031c0:	9b01      	ldr	r3, [sp, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	2101      	movs	r1, #1
 80031c6:	5499      	strb	r1, [r3, r2]
    chSysSwitch(ntp, otp);
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fc50 	bl	8002a70 <_dbg_trace>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80031d0:	f3ef 8309 	mrs	r3, PSP
 80031d4:	001c      	movs	r4, r3
  return(result);
 80031d6:	0023      	movs	r3, r4
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	9b02      	ldr	r3, [sp, #8]
 80031dc:	3b24      	subs	r3, #36	; 0x24
 80031de:	001a      	movs	r2, r3
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d203      	bcs.n	80031f0 <chSchWakeupS+0x90>
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <chSchWakeupS+0xac>)
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff faf8 	bl	80027e0 <chSysHalt>
 80031f0:	9a03      	ldr	r2, [sp, #12]
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7fc ffca 	bl	8000190 <_port_switch>
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	b004      	add	sp, #16
 8003200:	bd10      	pop	{r4, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20001620 	.word	0x20001620
 8003208:	08009340 	.word	0x08009340
 800320c:	080091c0 	.word	0x080091c0

08003210 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8003210:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <chSchIsPreemptionRequired+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->p_prio;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <chSchIsPreemptionRequired+0x24>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8003222:	9b01      	ldr	r3, [sp, #4]
 8003224:	9a00      	ldr	r2, [sp, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	419b      	sbcs	r3, r3
 800322a:	425b      	negs	r3, r3
 800322c:	b2db      	uxtb	r3, r3
#endif
}
 800322e:	0018      	movs	r0, r3
 8003230:	b002      	add	sp, #8
 8003232:	4770      	bx	lr
 8003234:	20001620 	.word	0x20001620
	...

08003240 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8003240:	b510      	push	{r4, lr}
 8003242:	b084      	sub	sp, #16
  thread_t *otp, *cp;

  otp = currp;
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	9302      	str	r3, [sp, #8]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800324a:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff fe1f 	bl	8002e90 <queue_fifo_remove>
 8003252:	0002      	movs	r2, r0
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 8003256:	619a      	str	r2, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2220      	movs	r2, #32
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]

  otp->p_state = CH_STATE_READY;
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	2220      	movs	r2, #32
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]
  cp = (thread_t *)&ch.rlist.r_queue;
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 800326c:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->p_next;
 800326e:	9b03      	ldr	r3, [sp, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	9303      	str	r3, [sp, #12]
  } while (cp->p_prio > otp->p_prio);
 8003274:	9b03      	ldr	r3, [sp, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	9b02      	ldr	r3, [sp, #8]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d8f6      	bhi.n	800326e <chSchDoRescheduleAhead+0x2e>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8003280:	9b02      	ldr	r3, [sp, #8]
 8003282:	9a03      	ldr	r2, [sp, #12]
 8003284:	601a      	str	r2, [r3, #0]
  otp->p_prev = cp->p_prev;
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	9b02      	ldr	r3, [sp, #8]
 800328c:	605a      	str	r2, [r3, #4]
  otp->p_prev->p_next = otp;
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	9a02      	ldr	r2, [sp, #8]
 8003294:	601a      	str	r2, [r3, #0]
  cp->p_prev = otp;
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	9a02      	ldr	r2, [sp, #8]
 800329a:	605a      	str	r2, [r3, #4]

  chSysSwitch(currp, otp);
 800329c:	9b02      	ldr	r3, [sp, #8]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff fbe6 	bl	8002a70 <_dbg_trace>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80032a4:	f3ef 8309 	mrs	r3, PSP
 80032a8:	001c      	movs	r4, r3
  return(result);
 80032aa:	0023      	movs	r3, r4
 80032ac:	9301      	str	r3, [sp, #4]
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	3b24      	subs	r3, #36	; 0x24
 80032b2:	001a      	movs	r2, r3
 80032b4:	9b02      	ldr	r3, [sp, #8]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d203      	bcs.n	80032c4 <chSchDoRescheduleAhead+0x84>
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <chSchDoRescheduleAhead+0x9c>)
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff fa8e 	bl	80027e0 <chSysHalt>
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <chSchDoRescheduleAhead+0x98>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	9a02      	ldr	r2, [sp, #8]
 80032ca:	0011      	movs	r1, r2
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fc ff5f 	bl	8000190 <_port_switch>
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	b004      	add	sp, #16
 80032d6:	bd10      	pop	{r4, pc}
 80032d8:	20001620 	.word	0x20001620
 80032dc:	080091c0 	.word	0x080091c0

080032e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80032e0:	b510      	push	{r4, lr}
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 80032e2:	f7ff ffad 	bl	8003240 <chSchDoRescheduleAhead>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	0000      	movs	r0, r0
	...

080032f0 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 80032f0:	b672      	cpsid	i
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	4770      	bx	lr
 80032f6:	46c0      	nop			; (mov r8, r8)
	...

08003300 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8003300:	b662      	cpsie	i
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	4770      	bx	lr
 8003306:	46c0      	nop			; (mov r8, r8)
	...

08003310 <list_init>:
static inline void list_init(threads_list_t *tlp) {
 8003310:	b082      	sub	sp, #8
 8003312:	9001      	str	r0, [sp, #4]
  tlp->p_next = (thread_t *)tlp;
 8003314:	9b01      	ldr	r3, [sp, #4]
 8003316:	9a01      	ldr	r2, [sp, #4]
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	b002      	add	sp, #8
 800331e:	4770      	bx	lr

08003320 <list_notempty>:
static inline bool list_notempty(threads_list_t *tlp) {
 8003320:	b082      	sub	sp, #8
 8003322:	9001      	str	r0, [sp, #4]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 8003324:	9b01      	ldr	r3, [sp, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	1e5a      	subs	r2, r3, #1
 800332e:	4193      	sbcs	r3, r2
 8003330:	b2db      	uxtb	r3, r3
}
 8003332:	0018      	movs	r0, r3
 8003334:	b002      	add	sp, #8
 8003336:	4770      	bx	lr
	...

08003340 <queue_init>:
static inline void queue_init(threads_queue_t *tqp) {
 8003340:	b082      	sub	sp, #8
 8003342:	9001      	str	r0, [sp, #4]
  tqp->p_next = (thread_t *)tqp;
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	9a01      	ldr	r2, [sp, #4]
 8003348:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	9a01      	ldr	r2, [sp, #4]
 800334e:	605a      	str	r2, [r3, #4]
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	b002      	add	sp, #8
 8003354:	4770      	bx	lr
 8003356:	46c0      	nop			; (mov r8, r8)
	...

08003360 <queue_notempty>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8003360:	b082      	sub	sp, #8
 8003362:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	9b01      	ldr	r3, [sp, #4]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	4193      	sbcs	r3, r2
 8003370:	b2db      	uxtb	r3, r3
}
 8003372:	0018      	movs	r0, r3
 8003374:	b002      	add	sp, #8
 8003376:	4770      	bx	lr
	...

08003380 <list_remove>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 8003380:	b084      	sub	sp, #16
 8003382:	9001      	str	r0, [sp, #4]
  thread_t *tp = tlp->p_next;
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	9303      	str	r3, [sp, #12]
  tlp->p_next = tp->p_next;
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	9b01      	ldr	r3, [sp, #4]
 8003390:	601a      	str	r2, [r3, #0]
  return tp;
 8003392:	9b03      	ldr	r3, [sp, #12]
}
 8003394:	0018      	movs	r0, r3
 8003396:	b004      	add	sp, #16
 8003398:	4770      	bx	lr
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	0000      	movs	r0, r0
	...

080033a0 <queue_insert>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 80033a0:	b082      	sub	sp, #8
 80033a2:	9001      	str	r0, [sp, #4]
 80033a4:	9100      	str	r1, [sp, #0]
  tp->p_next = (thread_t *)tqp;
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	9a00      	ldr	r2, [sp, #0]
 80033aa:	601a      	str	r2, [r3, #0]
  tp->p_prev = tqp->p_prev;
 80033ac:	9b00      	ldr	r3, [sp, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	605a      	str	r2, [r3, #4]
  tp->p_prev->p_next = tp;
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	9a01      	ldr	r2, [sp, #4]
 80033ba:	601a      	str	r2, [r3, #0]
  tqp->p_prev = tp;
 80033bc:	9b00      	ldr	r3, [sp, #0]
 80033be:	9a01      	ldr	r2, [sp, #4]
 80033c0:	605a      	str	r2, [r3, #4]
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	b002      	add	sp, #8
 80033c6:	4770      	bx	lr
	...

080033d0 <queue_fifo_remove>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 80033d0:	b084      	sub	sp, #16
 80033d2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->p_next;
 80033d4:	9b01      	ldr	r3, [sp, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	9303      	str	r3, [sp, #12]
  tqp->p_next = tp->p_next;
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	9b01      	ldr	r3, [sp, #4]
 80033e0:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80033e2:	9b01      	ldr	r3, [sp, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	9a01      	ldr	r2, [sp, #4]
 80033e8:	605a      	str	r2, [r3, #4]
  return tp;
 80033ea:	9b03      	ldr	r3, [sp, #12]
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	b004      	add	sp, #16
 80033f0:	4770      	bx	lr
 80033f2:	46c0      	nop			; (mov r8, r8)
	...

08003400 <chSysLock>:
static inline void chSysLock(void) {
 8003400:	b510      	push	{r4, lr}
  port_lock();
 8003402:	f7ff ff75 	bl	80032f0 <port_lock>
  _dbg_check_lock();
 8003406:	f7ff fa53 	bl	80028b0 <_dbg_check_lock>
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	bd10      	pop	{r4, pc}
 800340e:	46c0      	nop			; (mov r8, r8)

08003410 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8003410:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8003412:	f7ff fa65 	bl	80028e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <chSysUnlock+0x30>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <chSysUnlock+0x30>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d00b      	beq.n	8003438 <chSysUnlock+0x28>
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <chSysUnlock+0x30>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <chSysUnlock+0x30>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d203      	bcs.n	8003438 <chSysUnlock+0x28>
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <chSysUnlock+0x34>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff f9d4 	bl	80027e0 <chSysHalt>
  port_unlock();
 8003438:	f7ff ff62 	bl	8003300 <port_unlock>
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	bd10      	pop	{r4, pc}
 8003440:	20001620 	.word	0x20001620
 8003444:	08009360 	.word	0x08009360
	...

08003450 <chThdSleepS>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {
 8003450:	b500      	push	{lr}
 8003452:	b083      	sub	sp, #12
 8003454:	0002      	movs	r2, r0
 8003456:	466b      	mov	r3, sp
 8003458:	3306      	adds	r3, #6
 800345a:	801a      	strh	r2, [r3, #0]

  chDbgCheck(time != TIME_IMMEDIATE);
 800345c:	466b      	mov	r3, sp
 800345e:	3306      	adds	r3, #6
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <chThdSleepS+0x1e>
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <chThdSleepS+0x34>)
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff f9b9 	bl	80027e0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800346e:	466b      	mov	r3, sp
 8003470:	3306      	adds	r3, #6
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	0019      	movs	r1, r3
 8003476:	2008      	movs	r0, #8
 8003478:	f7ff fe32 	bl	80030e0 <chSchGoSleepTimeoutS>
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	b003      	add	sp, #12
 8003480:	bd00      	pop	{pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	08009370 	.word	0x08009370
	...

08003490 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003490:	b500      	push	{lr}
 8003492:	b085      	sub	sp, #20
 8003494:	9001      	str	r0, [sp, #4]
 8003496:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff ff60 	bl	8003360 <queue_notempty>
 80034a0:	0003      	movs	r3, r0
 80034a2:	001a      	movs	r2, r3
 80034a4:	2301      	movs	r3, #1
 80034a6:	4053      	eors	r3, r2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <chThdDoDequeueNextI+0x26>
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <chThdDoDequeueNextI+0x58>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff f995 	bl	80027e0 <chSysHalt>

  tp = queue_fifo_remove(tqp);
 80034b6:	9b01      	ldr	r3, [sp, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ff89 	bl	80033d0 <queue_fifo_remove>
 80034be:	0003      	movs	r3, r0
 80034c0:	9303      	str	r3, [sp, #12]

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d003      	beq.n	80034d4 <chThdDoDequeueNextI+0x44>
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <chThdDoDequeueNextI+0x58>)
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7ff f986 	bl	80027e0 <chSysHalt>

  tp->p_u.rdymsg = msg;
 80034d4:	9b03      	ldr	r3, [sp, #12]
 80034d6:	9a00      	ldr	r2, [sp, #0]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fd47 	bl	8002f70 <chSchReadyI>
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	b005      	add	sp, #20
 80034e6:	bd00      	pop	{pc}
 80034e8:	08009390 	.word	0x08009390
 80034ec:	00000000 	.word	0x00000000

080034f0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 80034f0:	b500      	push	{lr}
 80034f2:	b083      	sub	sp, #12
 80034f4:	9001      	str	r0, [sp, #4]
 80034f6:	9100      	str	r1, [sp, #0]

  tp->p_prio = prio;
 80034f8:	9b01      	ldr	r3, [sp, #4]
 80034fa:	9a00      	ldr	r2, [sp, #0]
 80034fc:	609a      	str	r2, [r3, #8]
  tp->p_state = CH_STATE_WTSTART;
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	2102      	movs	r1, #2
 8003504:	5499      	strb	r1, [r3, r2]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	2221      	movs	r2, #33	; 0x21
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800350e:	9b01      	ldr	r3, [sp, #4]
 8003510:	9a00      	ldr	r2, [sp, #0]
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
  tp->p_mtxlist = NULL;
 8003514:	9b01      	ldr	r3, [sp, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800351a:	9b01      	ldr	r3, [sp, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8003520:	9b01      	ldr	r3, [sp, #4]
 8003522:	2222      	movs	r2, #34	; 0x22
 8003524:	2101      	movs	r1, #1
 8003526:	5499      	strb	r1, [r3, r2]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8003528:	9b01      	ldr	r3, [sp, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 800352e:	9b01      	ldr	r3, [sp, #4]
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <_thread_init+0x80>)
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <_thread_init+0x80>)
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	615a      	str	r2, [r3, #20]
 800353c:	9b01      	ldr	r3, [sp, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	9a01      	ldr	r2, [sp, #4]
 8003542:	611a      	str	r2, [r3, #16]
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <_thread_init+0x80>)
 8003546:	9a01      	ldr	r2, [sp, #4]
 8003548:	615a      	str	r2, [r3, #20]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	3328      	adds	r3, #40	; 0x28
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff fede 	bl	8003310 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8003554:	9b01      	ldr	r3, [sp, #4]
 8003556:	332c      	adds	r3, #44	; 0x2c
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff fef1 	bl	8003340 <queue_init>
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	3348      	adds	r3, #72	; 0x48
 8003562:	001a      	movs	r2, r3
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	61da      	str	r2, [r3, #28]
  chTMObjectInit(&tp->p_stats);
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
 8003568:	9b01      	ldr	r3, [sp, #4]
}
 800356a:	0018      	movs	r0, r3
 800356c:	b003      	add	sp, #12
 800356e:	bd00      	pop	{pc}
 8003570:	20001620 	.word	0x20001620
	...

08003580 <_thread_memfill>:
 * @param[in] endp      last address to fill +1
 * @param[in] v         filler value
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 8003580:	b084      	sub	sp, #16
 8003582:	9003      	str	r0, [sp, #12]
 8003584:	9102      	str	r1, [sp, #8]
 8003586:	466b      	mov	r3, sp
 8003588:	3307      	adds	r3, #7
 800358a:	701a      	strb	r2, [r3, #0]

  while (startp < endp) {
 800358c:	e006      	b.n	800359c <_thread_memfill+0x1c>
    *startp++ = v;
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	466a      	mov	r2, sp
 8003596:	3207      	adds	r2, #7
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	701a      	strb	r2, [r3, #0]
  while (startp < endp) {
 800359c:	9a03      	ldr	r2, [sp, #12]
 800359e:	9b02      	ldr	r3, [sp, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3f4      	bcc.n	800358e <_thread_memfill+0xe>
  }
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	b004      	add	sp, #16
 80035a8:	4770      	bx	lr
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	0000      	movs	r0, r0
	...

080035b0 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 80035b0:	b500      	push	{lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	9003      	str	r0, [sp, #12]
 80035b6:	9102      	str	r1, [sp, #8]
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9300      	str	r3, [sp, #0]
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
 80035c0:	f7ff fa16 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
 80035c4:	9b03      	ldr	r3, [sp, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <chThdCreateI+0x2c>
 80035ca:	9b02      	ldr	r3, [sp, #8]
 80035cc:	2bcf      	cmp	r3, #207	; 0xcf
 80035ce:	d905      	bls.n	80035dc <chThdCreateI+0x2c>
 80035d0:	9b01      	ldr	r3, [sp, #4]
 80035d2:	2b7f      	cmp	r3, #127	; 0x7f
 80035d4:	d802      	bhi.n	80035dc <chThdCreateI+0x2c>
 80035d6:	9b00      	ldr	r3, [sp, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <chThdCreateI+0x34>
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <chThdCreateI+0x6c>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff f8fe 	bl	80027e0 <chSysHalt>
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80035e4:	9b02      	ldr	r3, [sp, #8]
 80035e6:	3b24      	subs	r3, #36	; 0x24
 80035e8:	9a03      	ldr	r2, [sp, #12]
 80035ea:	18d2      	adds	r2, r2, r3
 80035ec:	9b05      	ldr	r3, [sp, #20]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	9b05      	ldr	r3, [sp, #20]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	9a00      	ldr	r2, [sp, #0]
 80035f6:	611a      	str	r2, [r3, #16]
 80035f8:	9b05      	ldr	r3, [sp, #20]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	9a08      	ldr	r2, [sp, #32]
 80035fe:	615a      	str	r2, [r3, #20]
 8003600:	9b05      	ldr	r3, [sp, #20]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a06      	ldr	r2, [pc, #24]	; (8003620 <chThdCreateI+0x70>)
 8003606:	621a      	str	r2, [r3, #32]

  return _thread_init(tp, prio);
 8003608:	9a01      	ldr	r2, [sp, #4]
 800360a:	9b05      	ldr	r3, [sp, #20]
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f7ff ff6e 	bl	80034f0 <_thread_init>
 8003614:	0003      	movs	r3, r0
}
 8003616:	0018      	movs	r0, r3
 8003618:	b007      	add	sp, #28
 800361a:	bd00      	pop	{pc}
 800361c:	08009350 	.word	0x08009350
 8003620:	080001b1 	.word	0x080001b1
	...

08003630 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8003630:	b510      	push	{r4, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	9005      	str	r0, [sp, #20]
 8003636:	9104      	str	r1, [sp, #16]
 8003638:	9203      	str	r2, [sp, #12]
 800363a:	9302      	str	r3, [sp, #8]
  thread_t *tp;
  
#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 800363c:	9b05      	ldr	r3, [sp, #20]
 800363e:	3348      	adds	r3, #72	; 0x48
 8003640:	0019      	movs	r1, r3
 8003642:	9b05      	ldr	r3, [sp, #20]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	0018      	movs	r0, r3
 8003648:	f7ff ff9a 	bl	8003580 <_thread_memfill>
                  (uint8_t *)wsp + sizeof(thread_t),
                  CH_DBG_THREAD_FILL_VALUE);
  _thread_memfill((uint8_t *)wsp + sizeof(thread_t),
 800364c:	9b05      	ldr	r3, [sp, #20]
 800364e:	3348      	adds	r3, #72	; 0x48
 8003650:	0018      	movs	r0, r3
 8003652:	9a05      	ldr	r2, [sp, #20]
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	2255      	movs	r2, #85	; 0x55
 800365a:	0019      	movs	r1, r3
 800365c:	f7ff ff90 	bl	8003580 <_thread_memfill>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8003660:	f7ff fece 	bl	8003400 <chSysLock>
  tp = chThdCreateI(wsp, size, prio, pf, arg);
 8003664:	9c02      	ldr	r4, [sp, #8]
 8003666:	9a03      	ldr	r2, [sp, #12]
 8003668:	9904      	ldr	r1, [sp, #16]
 800366a:	9805      	ldr	r0, [sp, #20]
 800366c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	0023      	movs	r3, r4
 8003672:	f7ff ff9d 	bl	80035b0 <chThdCreateI>
 8003676:	0003      	movs	r3, r0
 8003678:	9307      	str	r3, [sp, #28]
  chSchWakeupS(tp, MSG_OK);
 800367a:	9b07      	ldr	r3, [sp, #28]
 800367c:	2100      	movs	r1, #0
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fd6e 	bl	8003160 <chSchWakeupS>
  chSysUnlock();
 8003684:	f7ff fec4 	bl	8003410 <chSysUnlock>

  return tp;
 8003688:	9b07      	ldr	r3, [sp, #28]
}
 800368a:	0018      	movs	r0, r3
 800368c:	b008      	add	sp, #32
 800368e:	bd10      	pop	{r4, pc}

08003690 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8003690:	b500      	push	{lr}
 8003692:	b083      	sub	sp, #12
 8003694:	0002      	movs	r2, r0
 8003696:	466b      	mov	r3, sp
 8003698:	3306      	adds	r3, #6
 800369a:	801a      	strh	r2, [r3, #0]

  chSysLock();
 800369c:	f7ff feb0 	bl	8003400 <chSysLock>
  chThdSleepS(time);
 80036a0:	466b      	mov	r3, sp
 80036a2:	3306      	adds	r3, #6
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff fed2 	bl	8003450 <chThdSleepS>
  chSysUnlock();
 80036ac:	f7ff feb0 	bl	8003410 <chSysUnlock>
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	b003      	add	sp, #12
 80036b4:	bd00      	pop	{pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
	...

080036c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80036c0:	b500      	push	{lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80036c6:	f7ff fe9b 	bl	8003400 <chSysLock>
  chThdExitS(msg);
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f000 f807 	bl	80036e0 <chThdExitS>
  /* The thread never returns here.*/
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	b003      	add	sp, #12
 80036d6:	bd00      	pop	{pc}
	...

080036e0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80036e0:	b500      	push	{lr}
 80036e2:	b085      	sub	sp, #20
 80036e4:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <chThdExitS+0x6c>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	9303      	str	r3, [sp, #12]

  tp->p_u.exitcode = msg;
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	9a01      	ldr	r2, [sp, #4]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80036f2:	e008      	b.n	8003706 <chThdExitS+0x26>
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	3328      	adds	r3, #40	; 0x28
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff fe41 	bl	8003380 <list_remove>
 80036fe:	0003      	movs	r3, r0
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff fc35 	bl	8002f70 <chSchReadyI>
  while (list_notempty(&tp->p_waiting)) {
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	3328      	adds	r3, #40	; 0x28
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff fe08 	bl	8003320 <list_notempty>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d1ef      	bne.n	80036f4 <chThdExitS+0x14>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8003714:	9b03      	ldr	r3, [sp, #12]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	001a      	movs	r2, r3
 800371c:	2303      	movs	r3, #3
 800371e:	4013      	ands	r3, r2
 8003720:	d109      	bne.n	8003736 <chThdExitS+0x56>
    REG_REMOVE(tp);
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	9a03      	ldr	r2, [sp, #12]
 8003728:	6912      	ldr	r2, [r2, #16]
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	9a03      	ldr	r2, [sp, #12]
 8003732:	6952      	ldr	r2, [r2, #20]
 8003734:	615a      	str	r2, [r3, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8003736:	200f      	movs	r0, #15
 8003738:	f7ff fc5a 	bl	8002ff0 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <chThdExitS+0x70>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff f84e 	bl	80027e0 <chSysHalt>
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	b005      	add	sp, #20
 8003748:	bd00      	pop	{pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	20001620 	.word	0x20001620
 8003750:	08009380 	.word	0x08009380
	...

08003760 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003760:	b500      	push	{lr}
 8003762:	b083      	sub	sp, #12
 8003764:	9001      	str	r0, [sp, #4]
 8003766:	000a      	movs	r2, r1
 8003768:	466b      	mov	r3, sp
 800376a:	3302      	adds	r3, #2
 800376c:	801a      	strh	r2, [r3, #0]

  if (TIME_IMMEDIATE == timeout) {
 800376e:	466b      	mov	r3, sp
 8003770:	3302      	adds	r3, #2
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
 8003778:	2301      	movs	r3, #1
 800377a:	425b      	negs	r3, r3
 800377c:	e00e      	b.n	800379c <chThdEnqueueTimeoutS+0x3c>
  }

  queue_insert(currp, tqp);
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <chThdEnqueueTimeoutS+0x44>)
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	9a01      	ldr	r2, [sp, #4]
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff fe0a 	bl	80033a0 <queue_insert>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800378c:	466b      	mov	r3, sp
 800378e:	3302      	adds	r3, #2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	0019      	movs	r1, r3
 8003794:	2004      	movs	r0, #4
 8003796:	f7ff fca3 	bl	80030e0 <chSchGoSleepTimeoutS>
 800379a:	0003      	movs	r3, r0
}
 800379c:	0018      	movs	r0, r3
 800379e:	b003      	add	sp, #12
 80037a0:	bd00      	pop	{pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20001620 	.word	0x20001620
	...

080037b0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80037b0:	b500      	push	{lr}
 80037b2:	b083      	sub	sp, #12
 80037b4:	9001      	str	r0, [sp, #4]
 80037b6:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
 80037b8:	9b01      	ldr	r3, [sp, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fdd0 	bl	8003360 <queue_notempty>
 80037c0:	1e03      	subs	r3, r0, #0
 80037c2:	d005      	beq.n	80037d0 <chThdDequeueNextI+0x20>
    chThdDoDequeueNextI(tqp, msg);
 80037c4:	9a00      	ldr	r2, [sp, #0]
 80037c6:	9b01      	ldr	r3, [sp, #4]
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff fe60 	bl	8003490 <chThdDoDequeueNextI>
  }
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	b003      	add	sp, #12
 80037d4:	bd00      	pop	{pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
	...

080037e0 <queue_init>:
static inline void queue_init(threads_queue_t *tqp) {
 80037e0:	b082      	sub	sp, #8
 80037e2:	9001      	str	r0, [sp, #4]
  tqp->p_next = (thread_t *)tqp;
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	9a01      	ldr	r2, [sp, #4]
 80037e8:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 80037ea:	9b01      	ldr	r3, [sp, #4]
 80037ec:	9a01      	ldr	r2, [sp, #4]
 80037ee:	605a      	str	r2, [r3, #4]
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	b002      	add	sp, #8
 80037f4:	4770      	bx	lr
 80037f6:	46c0      	nop			; (mov r8, r8)
	...

08003800 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8003800:	b500      	push	{lr}
 8003802:	b083      	sub	sp, #12
 8003804:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <chMtxObjectInit+0x14>
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <chMtxObjectInit+0x28>)
 800380e:	0018      	movs	r0, r3
 8003810:	f7fe ffe6 	bl	80027e0 <chSysHalt>

  queue_init(&mp->m_queue);
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f7ff ffe2 	bl	80037e0 <queue_init>
  mp->m_owner = NULL;
 800381c:	9b01      	ldr	r3, [sp, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	b003      	add	sp, #12
 8003826:	bd00      	pop	{pc}
 8003828:	080093d0 	.word	0x080093d0
 800382c:	00000000 	.word	0x00000000

08003830 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003830:	b500      	push	{lr}
 8003832:	b085      	sub	sp, #20
 8003834:	9001      	str	r0, [sp, #4]
 8003836:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
 8003838:	f7ff f8da 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800383c:	9b01      	ldr	r3, [sp, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <chEvtBroadcastFlagsI+0x1a>
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <chEvtBroadcastFlagsI+0x64>)
 8003844:	0018      	movs	r0, r3
 8003846:	f7fe ffcb 	bl	80027e0 <chSysHalt>

  elp = esp->es_next;
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8003850:	e019      	b.n	8003886 <chEvtBroadcastFlagsI+0x56>
  /*lint -restore*/
    elp->el_flags |= flags;
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	9b00      	ldr	r3, [sp, #0]
 8003858:	431a      	orrs	r2, r3
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800385e:	9b00      	ldr	r3, [sp, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <chEvtBroadcastFlagsI+0x40>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800386e:	d007      	beq.n	8003880 <chEvtBroadcastFlagsI+0x50>
      chEvtSignalI(elp->el_listener, elp->el_events);
 8003870:	9b03      	ldr	r3, [sp, #12]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	9b03      	ldr	r3, [sp, #12]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	0019      	movs	r1, r3
 800387a:	0010      	movs	r0, r2
 800387c:	f000 f810 	bl	80038a0 <chEvtSignalI>
    }
    elp = elp->el_next;
 8003880:	9b03      	ldr	r3, [sp, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8003886:	9a03      	ldr	r2, [sp, #12]
 8003888:	9b01      	ldr	r3, [sp, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d1e1      	bne.n	8003852 <chEvtBroadcastFlagsI+0x22>
  }
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	b005      	add	sp, #20
 8003892:	bd00      	pop	{pc}
 8003894:	080093e0 	.word	0x080093e0
	...

080038a0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80038a0:	b500      	push	{lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	9001      	str	r0, [sp, #4]
 80038a6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
 80038a8:	f7ff f8a2 	bl	80029f0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80038ac:	9b01      	ldr	r3, [sp, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <chEvtSignalI+0x1a>
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <chEvtSignalI+0x6c>)
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fe ff93 	bl	80027e0 <chSysHalt>

  tp->p_epending |= events;
 80038ba:	9b01      	ldr	r3, [sp, #4]
 80038bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	9b01      	ldr	r3, [sp, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80038c6:	9b01      	ldr	r3, [sp, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	5c9b      	ldrb	r3, [r3, r2]
 80038cc:	2b0a      	cmp	r3, #10
 80038ce:	d105      	bne.n	80038dc <chEvtSignalI+0x3c>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4013      	ands	r3, r2
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 80038da:	d10d      	bne.n	80038f8 <chEvtSignalI+0x58>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 80038e2:	2b0b      	cmp	r3, #11
 80038e4:	d10f      	bne.n	8003906 <chEvtSignalI+0x66>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 80038e6:	9b01      	ldr	r3, [sp, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	9b01      	ldr	r3, [sp, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	401a      	ands	r2, r3
 80038f0:	9b01      	ldr	r3, [sp, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d106      	bne.n	8003906 <chEvtSignalI+0x66>
    tp->p_u.rdymsg = MSG_OK;
 80038f8:	9b01      	ldr	r3, [sp, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff fb35 	bl	8002f70 <chSchReadyI>
  }
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	b003      	add	sp, #12
 800390a:	bd00      	pop	{pc}
 800390c:	08009400 	.word	0x08009400

08003910 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003910:	b672      	cpsid	i
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	4770      	bx	lr
 8003916:	46c0      	nop			; (mov r8, r8)
	...

08003920 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8003920:	b662      	cpsie	i
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	4770      	bx	lr
 8003926:	46c0      	nop			; (mov r8, r8)
	...

08003930 <queue_init>:
static inline void queue_init(threads_queue_t *tqp) {
 8003930:	b082      	sub	sp, #8
 8003932:	9001      	str	r0, [sp, #4]
  tqp->p_next = (thread_t *)tqp;
 8003934:	9b01      	ldr	r3, [sp, #4]
 8003936:	9a01      	ldr	r2, [sp, #4]
 8003938:	601a      	str	r2, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 800393a:	9b01      	ldr	r3, [sp, #4]
 800393c:	9a01      	ldr	r2, [sp, #4]
 800393e:	605a      	str	r2, [r3, #4]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	b002      	add	sp, #8
 8003944:	4770      	bx	lr
 8003946:	46c0      	nop			; (mov r8, r8)
	...

08003950 <chSysLock>:
static inline void chSysLock(void) {
 8003950:	b510      	push	{r4, lr}
  port_lock();
 8003952:	f7ff ffdd 	bl	8003910 <port_lock>
  _dbg_check_lock();
 8003956:	f7fe ffab 	bl	80028b0 <_dbg_check_lock>
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	bd10      	pop	{r4, pc}
 800395e:	46c0      	nop			; (mov r8, r8)

08003960 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8003960:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8003962:	f7fe ffbd 	bl	80028e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <chSysUnlock+0x30>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <chSysUnlock+0x30>)
 800396c:	429a      	cmp	r2, r3
 800396e:	d00b      	beq.n	8003988 <chSysUnlock+0x28>
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <chSysUnlock+0x30>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <chSysUnlock+0x30>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d203      	bcs.n	8003988 <chSysUnlock+0x28>
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <chSysUnlock+0x34>)
 8003982:	0018      	movs	r0, r3
 8003984:	f7fe ff2c 	bl	80027e0 <chSysHalt>
  port_unlock();
 8003988:	f7ff ffca 	bl	8003920 <port_unlock>
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	bd10      	pop	{r4, pc}
 8003990:	20001620 	.word	0x20001620
 8003994:	08009410 	.word	0x08009410
	...

080039a0 <chThdQueueObjectInit>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80039a0:	b500      	push	{lr}
 80039a2:	b083      	sub	sp, #12
 80039a4:	9001      	str	r0, [sp, #4]
  queue_init(tqp);
 80039a6:	9b01      	ldr	r3, [sp, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7ff ffc1 	bl	8003930 <queue_init>
}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	b003      	add	sp, #12
 80039b2:	bd00      	pop	{pc}
	...

080039c0 <chIQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
 80039c0:	b500      	push	{lr}
 80039c2:	b083      	sub	sp, #12
 80039c4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 80039c6:	f7ff f813 	bl	80029f0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(iqp) == 0U);
 80039ca:	9b01      	ldr	r3, [sp, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	425a      	negs	r2, r3
 80039d0:	4153      	adcs	r3, r2
 80039d2:	b2db      	uxtb	r3, r3
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	b003      	add	sp, #12
 80039d8:	bd00      	pop	{pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	0000      	movs	r0, r0
	...

080039e0 <chIQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {
 80039e0:	b500      	push	{lr}
 80039e2:	b083      	sub	sp, #12
 80039e4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 80039e6:	f7ff f803 	bl	80029f0 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 80039ea:	9b01      	ldr	r3, [sp, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	9b01      	ldr	r3, [sp, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d105      	bne.n	8003a02 <chIQIsFullI+0x22>
 80039f6:	9b01      	ldr	r3, [sp, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <chIQIsFullI+0x22>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <chIQIsFullI+0x24>
 8003a02:	2300      	movs	r3, #0
 8003a04:	1c1a      	adds	r2, r3, #0
 8003a06:	2301      	movs	r3, #1
 8003a08:	4013      	ands	r3, r2
 8003a0a:	b2db      	uxtb	r3, r3
  /*lint -restore*/
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	b003      	add	sp, #12
 8003a10:	bd00      	pop	{pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
	...

08003a20 <chOQIsEmptyI>:
 * @retval false        if the queue is not empty.
 * @retval true         if the queue is empty.
 *
 * @iclass
 */
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
 8003a20:	b500      	push	{lr}
 8003a22:	b083      	sub	sp, #12
 8003a24:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8003a26:	f7fe ffe3 	bl	80029f0 <chDbgCheckClassI>

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8003a2a:	9b01      	ldr	r3, [sp, #4]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d105      	bne.n	8003a42 <chOQIsEmptyI+0x22>
 8003a36:	9b01      	ldr	r3, [sp, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <chOQIsEmptyI+0x22>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <chOQIsEmptyI+0x24>
 8003a42:	2300      	movs	r3, #0
 8003a44:	1c1a      	adds	r2, r3, #0
 8003a46:	2301      	movs	r3, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b2db      	uxtb	r3, r3
  /*lint -restore*/
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	b003      	add	sp, #12
 8003a50:	bd00      	pop	{pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
	...

08003a60 <chOQIsFullI>:
 * @retval false        if the queue is not full.
 * @retval true         if the queue is full.
 *
 * @iclass
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {
 8003a60:	b500      	push	{lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
 8003a66:	f7fe ffc3 	bl	80029f0 <chDbgCheckClassI>

  return (bool)(chQSpaceI(oqp) == 0U);
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	425a      	negs	r2, r3
 8003a70:	4153      	adcs	r3, r2
 8003a72:	b2db      	uxtb	r3, r3
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	b003      	add	sp, #12
 8003a78:	bd00      	pop	{pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	0000      	movs	r0, r0
	...

08003a80 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 8003a80:	b500      	push	{lr}
 8003a82:	b085      	sub	sp, #20
 8003a84:	9003      	str	r0, [sp, #12]
 8003a86:	9102      	str	r1, [sp, #8]
 8003a88:	9201      	str	r2, [sp, #4]
 8003a8a:	9300      	str	r3, [sp, #0]

  chThdQueueObjectInit(&iqp->q_waiting);
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff ff86 	bl	80039a0 <chThdQueueObjectInit>
  iqp->q_counter = 0;
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	9a02      	ldr	r2, [sp, #8]
 8003a9e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	9a02      	ldr	r2, [sp, #8]
 8003aa4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8003aa6:	9b03      	ldr	r3, [sp, #12]
 8003aa8:	9a02      	ldr	r2, [sp, #8]
 8003aaa:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8003aac:	9a02      	ldr	r2, [sp, #8]
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	18d2      	adds	r2, r2, r3
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8003ab6:	9b03      	ldr	r3, [sp, #12]
 8003ab8:	9a00      	ldr	r2, [sp, #0]
 8003aba:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8003abc:	9b03      	ldr	r3, [sp, #12]
 8003abe:	9a06      	ldr	r2, [sp, #24]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	b005      	add	sp, #20
 8003ac6:	bd00      	pop	{pc}
	...

08003ad0 <chIQPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 8003ad0:	b500      	push	{lr}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	9001      	str	r0, [sp, #4]
 8003ad6:	000a      	movs	r2, r1
 8003ad8:	466b      	mov	r3, sp
 8003ada:	3303      	adds	r3, #3
 8003adc:	701a      	strb	r2, [r3, #0]

  chDbgCheckClassI();
 8003ade:	f7fe ff87 	bl	80029f0 <chDbgCheckClassI>

  if (chIQIsFullI(iqp)) {
 8003ae2:	9b01      	ldr	r3, [sp, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7ff ff7b 	bl	80039e0 <chIQIsFullI>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d002      	beq.n	8003af4 <chIQPutI+0x24>
    return Q_FULL;
 8003aee:	2304      	movs	r3, #4
 8003af0:	425b      	negs	r3, r3
 8003af2:	e01d      	b.n	8003b30 <chIQPutI+0x60>
  }

  iqp->q_counter++;
 8003af4:	9b01      	ldr	r3, [sp, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	9b01      	ldr	r3, [sp, #4]
 8003afc:	609a      	str	r2, [r3, #8]
  *iqp->q_wrptr++ = b;
 8003afe:	9b01      	ldr	r3, [sp, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	9a01      	ldr	r2, [sp, #4]
 8003b06:	6151      	str	r1, [r2, #20]
 8003b08:	466a      	mov	r2, sp
 8003b0a:	3203      	adds	r2, #3
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8003b10:	9b01      	ldr	r3, [sp, #4]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d303      	bcc.n	8003b24 <chIQPutI+0x54>
    iqp->q_wrptr = iqp->q_buffer;
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	615a      	str	r2, [r3, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	2100      	movs	r1, #0
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff fe41 	bl	80037b0 <chThdDequeueNextI>

  return Q_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	b003      	add	sp, #12
 8003b34:	bd00      	pop	{pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
	...

08003b40 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8003b40:	b500      	push	{lr}
 8003b42:	b085      	sub	sp, #20
 8003b44:	9001      	str	r0, [sp, #4]
 8003b46:	000a      	movs	r2, r1
 8003b48:	466b      	mov	r3, sp
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	801a      	strh	r2, [r3, #0]
  uint8_t b;

  chSysLock();
 8003b4e:	f7ff feff 	bl	8003950 <chSysLock>
  if (iqp->q_notify != NULL) {
 8003b52:	9b01      	ldr	r3, [sp, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <chIQGetTimeout+0x48>
    iqp->q_notify(iqp);
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	9a01      	ldr	r2, [sp, #4]
 8003b60:	0010      	movs	r0, r2
 8003b62:	4798      	blx	r3
  }

  while (chIQIsEmptyI(iqp)) {
 8003b64:	e010      	b.n	8003b88 <chIQGetTimeout+0x48>
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8003b66:	9a01      	ldr	r2, [sp, #4]
 8003b68:	466b      	mov	r3, sp
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	0019      	movs	r1, r3
 8003b70:	0010      	movs	r0, r2
 8003b72:	f7ff fdf5 	bl	8003760 <chThdEnqueueTimeoutS>
 8003b76:	0003      	movs	r3, r0
 8003b78:	9303      	str	r3, [sp, #12]
    if (msg < Q_OK) {
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da03      	bge.n	8003b88 <chIQGetTimeout+0x48>
      chSysUnlock();
 8003b80:	f7ff feee 	bl	8003960 <chSysUnlock>
      return msg;
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	e022      	b.n	8003bce <chIQGetTimeout+0x8e>
  while (chIQIsEmptyI(iqp)) {
 8003b88:	9b01      	ldr	r3, [sp, #4]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff ff18 	bl	80039c0 <chIQIsEmptyI>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d1e8      	bne.n	8003b66 <chIQGetTimeout+0x26>
    }
  }

  iqp->q_counter--;
 8003b94:	9b01      	ldr	r3, [sp, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	9b01      	ldr	r3, [sp, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8003b9e:	9b01      	ldr	r3, [sp, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	9a01      	ldr	r2, [sp, #4]
 8003ba6:	6191      	str	r1, [r2, #24]
 8003ba8:	220b      	movs	r2, #11
 8003baa:	446a      	add	r2, sp
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	7013      	strb	r3, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003bb0:	9b01      	ldr	r3, [sp, #4]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	9b01      	ldr	r3, [sp, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d303      	bcc.n	8003bc4 <chIQGetTimeout+0x84>
    iqp->q_rdptr = iqp->q_buffer;
 8003bbc:	9b01      	ldr	r3, [sp, #4]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }
  chSysUnlock();
 8003bc4:	f7ff fecc 	bl	8003960 <chSysUnlock>

  return (msg_t)b;
 8003bc8:	230b      	movs	r3, #11
 8003bca:	446b      	add	r3, sp
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	b005      	add	sp, #20
 8003bd2:	bd00      	pop	{pc}
	...

08003be0 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8003be0:	b500      	push	{lr}
 8003be2:	b087      	sub	sp, #28
 8003be4:	9003      	str	r0, [sp, #12]
 8003be6:	9102      	str	r1, [sp, #8]
 8003be8:	9201      	str	r2, [sp, #4]
 8003bea:	001a      	movs	r2, r3
 8003bec:	466b      	mov	r3, sp
 8003bee:	3302      	adds	r3, #2
 8003bf0:	801a      	strh	r2, [r3, #0]
  qnotify_t nfy = iqp->q_notify;
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	9304      	str	r3, [sp, #16]
  size_t r = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9305      	str	r3, [sp, #20]

  chDbgCheck(n > 0U);
 8003bfc:	9b01      	ldr	r3, [sp, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <chIQReadTimeout+0x2a>
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <chIQReadTimeout+0xc0>)
 8003c04:	0018      	movs	r0, r3
 8003c06:	f7fe fdeb 	bl	80027e0 <chSysHalt>

  chSysLock();
 8003c0a:	f7ff fea1 	bl	8003950 <chSysLock>
  while (true) {
    if (nfy != NULL) {
 8003c0e:	9b04      	ldr	r3, [sp, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <chIQReadTimeout+0x5a>
      nfy(iqp);
 8003c14:	9a03      	ldr	r2, [sp, #12]
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	0010      	movs	r0, r2
 8003c1a:	4798      	blx	r3
    }

    while (chIQIsEmptyI(iqp)) {
 8003c1c:	e00d      	b.n	8003c3a <chIQReadTimeout+0x5a>
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 8003c1e:	9a03      	ldr	r2, [sp, #12]
 8003c20:	466b      	mov	r3, sp
 8003c22:	3302      	adds	r3, #2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f7ff fd99 	bl	8003760 <chThdEnqueueTimeoutS>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d003      	beq.n	8003c3a <chIQReadTimeout+0x5a>
        chSysUnlock();
 8003c32:	f7ff fe95 	bl	8003960 <chSysUnlock>
        return r;
 8003c36:	9b05      	ldr	r3, [sp, #20]
 8003c38:	e02e      	b.n	8003c98 <chIQReadTimeout+0xb8>
    while (chIQIsEmptyI(iqp)) {
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7ff febf 	bl	80039c0 <chIQIsEmptyI>
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d1eb      	bne.n	8003c1e <chIQReadTimeout+0x3e>
      }
    }

    iqp->q_counter--;
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	609a      	str	r2, [r3, #8]
    *bp++ = *iqp->q_rdptr++;
 8003c50:	9b02      	ldr	r3, [sp, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	9202      	str	r2, [sp, #8]
 8003c56:	9a03      	ldr	r2, [sp, #12]
 8003c58:	6992      	ldr	r2, [r2, #24]
 8003c5a:	1c50      	adds	r0, r2, #1
 8003c5c:	9903      	ldr	r1, [sp, #12]
 8003c5e:	6188      	str	r0, [r1, #24]
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	699a      	ldr	r2, [r3, #24]
 8003c68:	9b03      	ldr	r3, [sp, #12]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d303      	bcc.n	8003c78 <chIQReadTimeout+0x98>
      iqp->q_rdptr = iqp->q_buffer;
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	619a      	str	r2, [r3, #24]
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 8003c78:	f7ff fe72 	bl	8003960 <chSysUnlock>

    r++;
 8003c7c:	9b05      	ldr	r3, [sp, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	9305      	str	r3, [sp, #20]
    if (--n == 0U) {
 8003c82:	9b01      	ldr	r3, [sp, #4]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <chIQReadTimeout+0xb2>
      return r;
 8003c8e:	9b05      	ldr	r3, [sp, #20]
 8003c90:	e002      	b.n	8003c98 <chIQReadTimeout+0xb8>
    }

    chSysLock();
 8003c92:	f7ff fe5d 	bl	8003950 <chSysLock>
    if (nfy != NULL) {
 8003c96:	e7ba      	b.n	8003c0e <chIQReadTimeout+0x2e>
  }
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	b007      	add	sp, #28
 8003c9c:	bd00      	pop	{pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	08009420 	.word	0x08009420
	...

08003cb0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 8003cb0:	b500      	push	{lr}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	9003      	str	r0, [sp, #12]
 8003cb6:	9102      	str	r1, [sp, #8]
 8003cb8:	9201      	str	r2, [sp, #4]
 8003cba:	9300      	str	r3, [sp, #0]

  chThdQueueObjectInit(&oqp->q_waiting);
 8003cbc:	9b03      	ldr	r3, [sp, #12]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff fe6e 	bl	80039a0 <chThdQueueObjectInit>
  oqp->q_counter = size;
 8003cc4:	9b03      	ldr	r3, [sp, #12]
 8003cc6:	9a01      	ldr	r2, [sp, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	9a02      	ldr	r2, [sp, #8]
 8003cce:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	9a02      	ldr	r2, [sp, #8]
 8003cd4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8003cd6:	9b03      	ldr	r3, [sp, #12]
 8003cd8:	9a02      	ldr	r2, [sp, #8]
 8003cda:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8003cdc:	9a02      	ldr	r2, [sp, #8]
 8003cde:	9b01      	ldr	r3, [sp, #4]
 8003ce0:	18d2      	adds	r2, r2, r3
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8003ce6:	9b03      	ldr	r3, [sp, #12]
 8003ce8:	9a00      	ldr	r2, [sp, #0]
 8003cea:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	9a06      	ldr	r2, [sp, #24]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	b005      	add	sp, #20
 8003cf6:	bd00      	pop	{pc}
	...

08003d00 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003d00:	b500      	push	{lr}
 8003d02:	b085      	sub	sp, #20
 8003d04:	9001      	str	r0, [sp, #4]
 8003d06:	0008      	movs	r0, r1
 8003d08:	0011      	movs	r1, r2
 8003d0a:	466b      	mov	r3, sp
 8003d0c:	3303      	adds	r3, #3
 8003d0e:	1c02      	adds	r2, r0, #0
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	466b      	mov	r3, sp
 8003d14:	1c0a      	adds	r2, r1, #0
 8003d16:	801a      	strh	r2, [r3, #0]

  chSysLock();
 8003d18:	f7ff fe1a 	bl	8003950 <chSysLock>
  while (chOQIsFullI(oqp)) {
 8003d1c:	e00f      	b.n	8003d3e <chOQPutTimeout+0x3e>
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8003d1e:	9a01      	ldr	r2, [sp, #4]
 8003d20:	466b      	mov	r3, sp
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	0019      	movs	r1, r3
 8003d26:	0010      	movs	r0, r2
 8003d28:	f7ff fd1a 	bl	8003760 <chThdEnqueueTimeoutS>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	9303      	str	r3, [sp, #12]
    if (msg < Q_OK) {
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da03      	bge.n	8003d3e <chOQPutTimeout+0x3e>
      chSysUnlock();
 8003d36:	f7ff fe13 	bl	8003960 <chSysUnlock>
      return msg;
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	e029      	b.n	8003d92 <chOQPutTimeout+0x92>
  while (chOQIsFullI(oqp)) {
 8003d3e:	9b01      	ldr	r3, [sp, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff fe8d 	bl	8003a60 <chOQIsFullI>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d1e9      	bne.n	8003d1e <chOQPutTimeout+0x1e>
    }
  }

  oqp->q_counter--;
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	1e5a      	subs	r2, r3, #1
 8003d50:	9b01      	ldr	r3, [sp, #4]
 8003d52:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8003d54:	9b01      	ldr	r3, [sp, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	9a01      	ldr	r2, [sp, #4]
 8003d5c:	6151      	str	r1, [r2, #20]
 8003d5e:	466a      	mov	r2, sp
 8003d60:	3203      	adds	r2, #3
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003d66:	9b01      	ldr	r3, [sp, #4]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	9b01      	ldr	r3, [sp, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d303      	bcc.n	8003d7a <chOQPutTimeout+0x7a>
    oqp->q_wrptr = oqp->q_buffer;
 8003d72:	9b01      	ldr	r3, [sp, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	615a      	str	r2, [r3, #20]
  }

  if (oqp->q_notify != NULL) {
 8003d7a:	9b01      	ldr	r3, [sp, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <chOQPutTimeout+0x8c>
    oqp->q_notify(oqp);
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	9a01      	ldr	r2, [sp, #4]
 8003d88:	0010      	movs	r0, r2
 8003d8a:	4798      	blx	r3
  }
  chSysUnlock();
 8003d8c:	f7ff fde8 	bl	8003960 <chSysUnlock>

  return Q_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	b005      	add	sp, #20
 8003d96:	bd00      	pop	{pc}
	...

08003da0 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 8003da0:	b500      	push	{lr}
 8003da2:	b085      	sub	sp, #20
 8003da4:	9001      	str	r0, [sp, #4]
  uint8_t b;

  chDbgCheckClassI();
 8003da6:	f7fe fe23 	bl	80029f0 <chDbgCheckClassI>

  if (chOQIsEmptyI(oqp)) {
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fe37 	bl	8003a20 <chOQIsEmptyI>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d002      	beq.n	8003dbc <chOQGetI+0x1c>
    return Q_EMPTY;
 8003db6:	2303      	movs	r3, #3
 8003db8:	425b      	negs	r3, r3
 8003dba:	e01f      	b.n	8003dfc <chOQGetI+0x5c>
  }

  oqp->q_counter++;
 8003dbc:	9b01      	ldr	r3, [sp, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	9b01      	ldr	r3, [sp, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
  b = *oqp->q_rdptr++;
 8003dc6:	9b01      	ldr	r3, [sp, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	9a01      	ldr	r2, [sp, #4]
 8003dce:	6191      	str	r1, [r2, #24]
 8003dd0:	220f      	movs	r2, #15
 8003dd2:	446a      	add	r2, sp
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	7013      	strb	r3, [r2, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8003dd8:	9b01      	ldr	r3, [sp, #4]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	9b01      	ldr	r3, [sp, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d303      	bcc.n	8003dec <chOQGetI+0x4c>
    oqp->q_rdptr = oqp->q_buffer;
 8003de4:	9b01      	ldr	r3, [sp, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	9b01      	ldr	r3, [sp, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 8003dec:	9b01      	ldr	r3, [sp, #4]
 8003dee:	2100      	movs	r1, #0
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fcdd 	bl	80037b0 <chThdDequeueNextI>

  return (msg_t)b;
 8003df6:	230f      	movs	r3, #15
 8003df8:	446b      	add	r3, sp
 8003dfa:	781b      	ldrb	r3, [r3, #0]
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	b005      	add	sp, #20
 8003e00:	bd00      	pop	{pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
	...

08003e10 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8003e10:	b500      	push	{lr}
 8003e12:	b087      	sub	sp, #28
 8003e14:	9003      	str	r0, [sp, #12]
 8003e16:	9102      	str	r1, [sp, #8]
 8003e18:	9201      	str	r2, [sp, #4]
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	466b      	mov	r3, sp
 8003e1e:	3302      	adds	r3, #2
 8003e20:	801a      	strh	r2, [r3, #0]
  qnotify_t nfy = oqp->q_notify;
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	9304      	str	r3, [sp, #16]
  size_t w = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9305      	str	r3, [sp, #20]

  chDbgCheck(n > 0U);
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <chOQWriteTimeout+0x2a>
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <chOQWriteTimeout+0xc0>)
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7fe fcd3 	bl	80027e0 <chSysHalt>

  chSysLock();
 8003e3a:	f7ff fd89 	bl	8003950 <chSysLock>
  while (true) {
    while (chOQIsFullI(oqp)) {
 8003e3e:	e00d      	b.n	8003e5c <chOQWriteTimeout+0x4c>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8003e40:	9a03      	ldr	r2, [sp, #12]
 8003e42:	466b      	mov	r3, sp
 8003e44:	3302      	adds	r3, #2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0019      	movs	r1, r3
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	f7ff fc88 	bl	8003760 <chThdEnqueueTimeoutS>
 8003e50:	1e03      	subs	r3, r0, #0
 8003e52:	d003      	beq.n	8003e5c <chOQWriteTimeout+0x4c>
        chSysUnlock();
 8003e54:	f7ff fd84 	bl	8003960 <chSysUnlock>
        return w;
 8003e58:	9b05      	ldr	r3, [sp, #20]
 8003e5a:	e035      	b.n	8003ec8 <chOQWriteTimeout+0xb8>
    while (chOQIsFullI(oqp)) {
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7ff fdfe 	bl	8003a60 <chOQIsFullI>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d1eb      	bne.n	8003e40 <chOQWriteTimeout+0x30>
      }
    }
    
    oqp->q_counter--;
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	609a      	str	r2, [r3, #8]
    *oqp->q_wrptr++ = *bp++;
 8003e72:	9b03      	ldr	r3, [sp, #12]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	9a03      	ldr	r2, [sp, #12]
 8003e7a:	6151      	str	r1, [r2, #20]
 8003e7c:	9a02      	ldr	r2, [sp, #8]
 8003e7e:	1c51      	adds	r1, r2, #1
 8003e80:	9102      	str	r1, [sp, #8]
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d303      	bcc.n	8003e9a <chOQWriteTimeout+0x8a>
      oqp->q_wrptr = oqp->q_buffer;
 8003e92:	9b03      	ldr	r3, [sp, #12]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	615a      	str	r2, [r3, #20]
    }

    if (nfy != NULL) {
 8003e9a:	9b04      	ldr	r3, [sp, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <chOQWriteTimeout+0x98>
      nfy(oqp);
 8003ea0:	9a03      	ldr	r2, [sp, #12]
 8003ea2:	9b04      	ldr	r3, [sp, #16]
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	4798      	blx	r3
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 8003ea8:	f7ff fd5a 	bl	8003960 <chSysUnlock>

    w++;
 8003eac:	9b05      	ldr	r3, [sp, #20]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	9305      	str	r3, [sp, #20]
    if (--n == 0U) {
 8003eb2:	9b01      	ldr	r3, [sp, #4]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	9b01      	ldr	r3, [sp, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <chOQWriteTimeout+0xb2>
      return w;
 8003ebe:	9b05      	ldr	r3, [sp, #20]
 8003ec0:	e002      	b.n	8003ec8 <chOQWriteTimeout+0xb8>
    }
    chSysLock();
 8003ec2:	f7ff fd45 	bl	8003950 <chSysLock>
    while (chOQIsFullI(oqp)) {
 8003ec6:	e7c9      	b.n	8003e5c <chOQWriteTimeout+0x4c>
  }
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	b007      	add	sp, #28
 8003ecc:	bd00      	pop	{pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	08009430 	.word	0x08009430
	...

08003ee0 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	4770      	bx	lr
 8003ee6:	46c0      	nop			; (mov r8, r8)
	...

08003ef0 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8003ef0:	b662      	cpsie	i
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	4770      	bx	lr
 8003ef6:	46c0      	nop			; (mov r8, r8)
	...

08003f00 <chSysLock>:
static inline void chSysLock(void) {
 8003f00:	b510      	push	{r4, lr}
  port_lock();
 8003f02:	f7ff ffed 	bl	8003ee0 <port_lock>
  _dbg_check_lock();
 8003f06:	f7fe fcd3 	bl	80028b0 <_dbg_check_lock>
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)

08003f10 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8003f10:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8003f12:	f7fe fce5 	bl	80028e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <chSysUnlock+0x30>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <chSysUnlock+0x30>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d00b      	beq.n	8003f38 <chSysUnlock+0x28>
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <chSysUnlock+0x30>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <chSysUnlock+0x30>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d203      	bcs.n	8003f38 <chSysUnlock+0x28>
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <chSysUnlock+0x34>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fe fc54 	bl	80027e0 <chSysHalt>
  port_unlock();
 8003f38:	f7ff ffda 	bl	8003ef0 <port_unlock>
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	bd10      	pop	{r4, pc}
 8003f40:	20001620 	.word	0x20001620
 8003f44:	08009450 	.word	0x08009450
	...

08003f50 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <_core_init+0x20>)
 8003f52:	3307      	adds	r3, #7
 8003f54:	2207      	movs	r2, #7
 8003f56:	4393      	bics	r3, r2
 8003f58:	001a      	movs	r2, r3
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <_core_init+0x24>)
 8003f5c:	601a      	str	r2, [r3, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8003f5e:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <_core_init+0x28>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	4393      	bics	r3, r2
 8003f64:	001a      	movs	r2, r3
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <_core_init+0x2c>)
 8003f68:	601a      	str	r2, [r3, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	4770      	bx	lr
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	20001e68 	.word	0x20001e68
 8003f74:	200015c0 	.word	0x200015c0
 8003f78:	20002000 	.word	0x20002000
 8003f7c:	200015c4 	.word	0x200015c4

08003f80 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8003f80:	b500      	push	{lr}
 8003f82:	b085      	sub	sp, #20
 8003f84:	9001      	str	r0, [sp, #4]
  void *p;

  chSysLock();
 8003f86:	f7ff ffbb 	bl	8003f00 <chSysLock>
  p = chCoreAllocI(size);
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f80f 	bl	8003fb0 <chCoreAllocI>
 8003f92:	0003      	movs	r3, r0
 8003f94:	9303      	str	r3, [sp, #12]
  chSysUnlock();
 8003f96:	f7ff ffbb 	bl	8003f10 <chSysUnlock>

  return p;
 8003f9a:	9b03      	ldr	r3, [sp, #12]
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	b005      	add	sp, #20
 8003fa0:	bd00      	pop	{pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
	...

08003fb0 <chCoreAllocI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocI(size_t size) {
 8003fb0:	b500      	push	{lr}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	9001      	str	r0, [sp, #4]
  void *p;

  chDbgCheckClassI();
 8003fb6:	f7fe fd1b 	bl	80029f0 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	3307      	adds	r3, #7
 8003fbe:	2207      	movs	r2, #7
 8003fc0:	4393      	bics	r3, r2
 8003fc2:	9301      	str	r3, [sp, #4]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <chCoreAllocI+0x48>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	001a      	movs	r2, r3
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <chCoreAllocI+0x4c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	9b01      	ldr	r3, [sp, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d201      	bcs.n	8003fdc <chCoreAllocI+0x2c>
  /*lint -restore*/
    return NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e009      	b.n	8003ff0 <chCoreAllocI+0x40>
  }
  p = nextmem;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <chCoreAllocI+0x4c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9303      	str	r3, [sp, #12]
  nextmem += size;
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <chCoreAllocI+0x4c>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	18d2      	adds	r2, r2, r3
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <chCoreAllocI+0x4c>)
 8003fec:	601a      	str	r2, [r3, #0]

  return p;
 8003fee:	9b03      	ldr	r3, [sp, #12]
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	b005      	add	sp, #20
 8003ff4:	bd00      	pop	{pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	200015c4 	.word	0x200015c4
 8003ffc:	200015c0 	.word	0x200015c0

08004000 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8004000:	b510      	push	{r4, lr}

  default_heap.h_provider = chCoreAlloc;
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <_heap_init+0x20>)
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <_heap_init+0x24>)
 8004006:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <_heap_init+0x20>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <_heap_init+0x20>)
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <_heap_init+0x28>)
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff fbf2 	bl	8003800 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.h_sem, (cnt_t)1);
#endif
}
 800401c:	46c0      	nop			; (mov r8, r8)
 800401e:	bd10      	pop	{r4, pc}
 8004020:	200015c8 	.word	0x200015c8
 8004024:	08003f81 	.word	0x08003f81
 8004028:	200015d8 	.word	0x200015d8
 800402c:	00000000 	.word	0x00000000

08004030 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004030:	b672      	cpsid	i
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	4770      	bx	lr
 8004036:	46c0      	nop			; (mov r8, r8)
	...

08004040 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004040:	b662      	cpsie	i
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	4770      	bx	lr
 8004046:	46c0      	nop			; (mov r8, r8)
	...

08004050 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8004050:	b510      	push	{r4, lr}
  port_lock();
 8004052:	f7ff ffed 	bl	8004030 <port_lock>
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	bd10      	pop	{r4, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	0000      	movs	r0, r0
	...

08004060 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8004060:	b510      	push	{r4, lr}
  port_unlock();
 8004062:	f7ff ffed 	bl	8004040 <port_unlock>
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	bd10      	pop	{r4, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	0000      	movs	r0, r0
	...

08004070 <NMI_Handler>:
 * @brief   NMI vector.
 * @details The NMI vector is used for exception mode re-entering after a
 *          context switch.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void NMI_Handler(void) {
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8004076:	f3ef 8309 	mrs	r3, PSP
 800407a:	001c      	movs	r4, r3
  return(result);
 800407c:	0023      	movs	r3, r4
/*lint -restore*/

  /* The port_extctx structure is pointed by the PSP register.*/
  struct port_extctx *ctxp = (struct port_extctx *)__get_PSP();
 800407e:	607b      	str	r3, [r7, #4]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3320      	adds	r3, #32
 8004084:	607b      	str	r3, [r7, #4]

  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 8004090:	f7ff ffe6 	bl	8004060 <port_unlock_from_isr>
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b003      	add	sp, #12
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	0000      	movs	r0, r0
	...

080040a0 <_port_irq_epilogue>:
/**
 * @brief   IRQ epilogue code.
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  if (lr != (regarm_t)0xFFFFFFF1U) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	330f      	adds	r3, #15
 80040ac:	d01d      	beq.n	80040ea <_port_irq_epilogue+0x4a>
    struct port_extctx *ctxp;

    port_lock_from_isr();
 80040ae:	f7ff ffcf 	bl	8004050 <port_lock_from_isr>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80040b2:	f3ef 8309 	mrs	r3, PSP
 80040b6:	001c      	movs	r4, r3
  return(result);
 80040b8:	0023      	movs	r3, r4

    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 80040ba:	60fb      	str	r3, [r7, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b20      	subs	r3, #32
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f383 8809 	msr	PSP, r3

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	0452      	lsls	r2, r2, #17
 80040d2:	61da      	str	r2, [r3, #28]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80040d4:	f7ff f89c 	bl	8003210 <chSchIsPreemptionRequired>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d003      	beq.n	80040e4 <_port_irq_epilogue+0x44>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <_port_irq_epilogue+0x54>)
 80040e0:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
 80040e2:	e002      	b.n	80040ea <_port_irq_epilogue+0x4a>
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <_port_irq_epilogue+0x58>)
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b005      	add	sp, #20
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	080001c1 	.word	0x080001c1
 80040f8:	080001cc 	.word	0x080001cc
 80040fc:	00000000 	.word	0x00000000

08004100 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	4770      	bx	lr
	...

08004110 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8004110:	b510      	push	{r4, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8004112:	f7ff fff5 	bl	8004100 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8004116:	f000 fafb 	bl	8004710 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <halInit+0x24>)
 800411c:	0018      	movs	r0, r3
 800411e:	f000 fc67 	bl	80049f0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 8004122:	f000 f9dd 	bl	80044e0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8004126:	f000 ff73 	bl	8005010 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800412a:	f000 f849 	bl	80041c0 <stInit>
#endif
}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	bd10      	pop	{r4, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	080094e0 	.word	0x080094e0
	...

08004140 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 8004140:	b082      	sub	sp, #8
 8004142:	0002      	movs	r2, r0
 8004144:	466b      	mov	r3, sp
 8004146:	3306      	adds	r3, #6
 8004148:	801a      	strh	r2, [r3, #0]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <st_lld_start_alarm+0x28>)
 800414c:	466a      	mov	r2, sp
 800414e:	3206      	adds	r2, #6
 8004150:	8812      	ldrh	r2, [r2, #0]
 8004152:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <st_lld_start_alarm+0x28>)
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <st_lld_start_alarm+0x28>)
 800415c:	2202      	movs	r2, #2
 800415e:	60da      	str	r2, [r3, #12]
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	b002      	add	sp, #8
 8004164:	4770      	bx	lr
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	40000400 	.word	0x40000400
 800416c:	00000000 	.word	0x00000000

08004170 <st_lld_stop_alarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8004170:	4b02      	ldr	r3, [pc, #8]	; (800417c <st_lld_stop_alarm+0xc>)
 8004172:	2200      	movs	r2, #0
 8004174:	60da      	str	r2, [r3, #12]
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	4770      	bx	lr
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	40000400 	.word	0x40000400

08004180 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8004180:	b082      	sub	sp, #8
 8004182:	0002      	movs	r2, r0
 8004184:	466b      	mov	r3, sp
 8004186:	3306      	adds	r3, #6
 8004188:	801a      	strh	r2, [r3, #0]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800418a:	4b04      	ldr	r3, [pc, #16]	; (800419c <st_lld_set_alarm+0x1c>)
 800418c:	466a      	mov	r2, sp
 800418e:	3206      	adds	r2, #6
 8004190:	8812      	ldrh	r2, [r2, #0]
 8004192:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	b002      	add	sp, #8
 8004198:	4770      	bx	lr
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	40000400 	.word	0x40000400

080041a0 <st_lld_is_alarm_active>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <st_lld_is_alarm_active+0x14>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	4013      	ands	r3, r2
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	4193      	sbcs	r3, r2
 80041ac:	b2db      	uxtb	r3, r3
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	4770      	bx	lr
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	40000400 	.word	0x40000400
	...

080041c0 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 80041c0:	b510      	push	{r4, lr}

  st_lld_init();
 80041c2:	f000 fbb5 	bl	8004930 <st_lld_init>
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	bd10      	pop	{r4, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	0000      	movs	r0, r0
	...

080041d0 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 80041d0:	b500      	push	{lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	0002      	movs	r2, r0
 80041d6:	466b      	mov	r3, sp
 80041d8:	3306      	adds	r3, #6
 80041da:	801a      	strh	r2, [r3, #0]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 80041dc:	f7ff ffe0 	bl	80041a0 <st_lld_is_alarm_active>
 80041e0:	1e03      	subs	r3, r0, #0
 80041e2:	d003      	beq.n	80041ec <stStartAlarm+0x1c>
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <stStartAlarm+0x30>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fe fafa 	bl	80027e0 <chSysHalt>

  st_lld_start_alarm(abstime);
 80041ec:	466b      	mov	r3, sp
 80041ee:	3306      	adds	r3, #6
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7ff ffa4 	bl	8004140 <st_lld_start_alarm>
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	b003      	add	sp, #12
 80041fc:	bd00      	pop	{pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	08009460 	.word	0x08009460
	...

08004210 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8004210:	b510      	push	{r4, lr}

  st_lld_stop_alarm();
 8004212:	f7ff ffad 	bl	8004170 <st_lld_stop_alarm>
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	bd10      	pop	{r4, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	0000      	movs	r0, r0
	...

08004220 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8004220:	b500      	push	{lr}
 8004222:	b083      	sub	sp, #12
 8004224:	0002      	movs	r2, r0
 8004226:	466b      	mov	r3, sp
 8004228:	3306      	adds	r3, #6
 800422a:	801a      	strh	r2, [r3, #0]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 800422c:	f7ff ffb8 	bl	80041a0 <st_lld_is_alarm_active>
 8004230:	0003      	movs	r3, r0
 8004232:	001a      	movs	r2, r3
 8004234:	2301      	movs	r3, #1
 8004236:	4053      	eors	r3, r2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <stSetAlarm+0x26>
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <stSetAlarm+0x38>)
 8004240:	0018      	movs	r0, r3
 8004242:	f7fe facd 	bl	80027e0 <chSysHalt>

  st_lld_set_alarm(abstime);
 8004246:	466b      	mov	r3, sp
 8004248:	3306      	adds	r3, #6
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff ff97 	bl	8004180 <st_lld_set_alarm>
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	b003      	add	sp, #12
 8004256:	bd00      	pop	{pc}
 8004258:	08009470 	.word	0x08009470
 800425c:	00000000 	.word	0x00000000

08004260 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004260:	b672      	cpsid	i
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	4770      	bx	lr
 8004266:	46c0      	nop			; (mov r8, r8)
	...

08004270 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004270:	b662      	cpsie	i
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	4770      	bx	lr
 8004276:	46c0      	nop			; (mov r8, r8)
	...

08004280 <chSysLock>:
static inline void chSysLock(void) {
 8004280:	b510      	push	{r4, lr}
  port_lock();
 8004282:	f7ff ffed 	bl	8004260 <port_lock>
  _dbg_check_lock();
 8004286:	f7fe fb13 	bl	80028b0 <_dbg_check_lock>
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	bd10      	pop	{r4, pc}
 800428e:	46c0      	nop			; (mov r8, r8)

08004290 <chSysUnlock>:
static inline void chSysUnlock(void) {
 8004290:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8004292:	f7fe fb25 	bl	80028e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <chSysUnlock+0x30>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <chSysUnlock+0x30>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d00b      	beq.n	80042b8 <chSysUnlock+0x28>
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <chSysUnlock+0x30>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <chSysUnlock+0x30>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d203      	bcs.n	80042b8 <chSysUnlock+0x28>
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <chSysUnlock+0x34>)
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7fe fa94 	bl	80027e0 <chSysHalt>
  port_unlock();
 80042b8:	f7ff ffda 	bl	8004270 <port_unlock>
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	bd10      	pop	{r4, pc}
 80042c0:	20001620 	.word	0x20001620
 80042c4:	080094b0 	.word	0x080094b0
	...

080042d0 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 80042d0:	b082      	sub	sp, #8
 80042d2:	9001      	str	r0, [sp, #4]

  esp->es_next = (event_listener_t *)esp;
 80042d4:	9b01      	ldr	r3, [sp, #4]
 80042d6:	9a01      	ldr	r2, [sp, #4]
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	b002      	add	sp, #8
 80042de:	4770      	bx	lr

080042e0 <chIQIsEmptyI>:
static inline bool chIQIsEmptyI(input_queue_t *iqp) {
 80042e0:	b500      	push	{lr}
 80042e2:	b083      	sub	sp, #12
 80042e4:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
 80042e6:	f7fe fb83 	bl	80029f0 <chDbgCheckClassI>
  return (bool)(chQSpaceI(iqp) == 0U);
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	425a      	negs	r2, r3
 80042f0:	4153      	adcs	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	b003      	add	sp, #12
 80042f8:	bd00      	pop	{pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	0000      	movs	r0, r0
	...

08004300 <osalSysLock>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8004300:	b510      	push	{r4, lr}

  chSysLock();
 8004302:	f7ff ffbd 	bl	8004280 <chSysLock>
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	bd10      	pop	{r4, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	0000      	movs	r0, r0
	...

08004310 <osalSysUnlock>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8004310:	b510      	push	{r4, lr}

  chSysUnlock();
 8004312:	f7ff ffbd 	bl	8004290 <chSysUnlock>
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	bd10      	pop	{r4, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	0000      	movs	r0, r0
	...

08004320 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event flags object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8004320:	b500      	push	{lr}
 8004322:	b083      	sub	sp, #12
 8004324:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8004326:	9b01      	ldr	r3, [sp, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff ffd1 	bl	80042d0 <chEvtObjectInit>
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	b003      	add	sp, #12
 8004332:	bd00      	pop	{pc}
	...

08004340 <osalEventBroadcastFlagsI>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8004340:	b500      	push	{lr}
 8004342:	b083      	sub	sp, #12
 8004344:	9001      	str	r0, [sp, #4]
 8004346:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8004348:	9a00      	ldr	r2, [sp, #0]
 800434a:	9b01      	ldr	r3, [sp, #4]
 800434c:	0011      	movs	r1, r2
 800434e:	0018      	movs	r0, r3
 8004350:	f7ff fa6e 	bl	8003830 <chEvtBroadcastFlagsI>
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	b003      	add	sp, #12
 8004358:	bd00      	pop	{pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	0000      	movs	r0, r0
	...

08004360 <write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
 8004360:	b500      	push	{lr}
 8004362:	b085      	sub	sp, #20
 8004364:	9003      	str	r0, [sp, #12]
 8004366:	9102      	str	r1, [sp, #8]
 8004368:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	3330      	adds	r3, #48	; 0x30
 800436e:	0018      	movs	r0, r3
 8004370:	4b04      	ldr	r3, [pc, #16]	; (8004384 <write+0x24>)
 8004372:	9a01      	ldr	r2, [sp, #4]
 8004374:	9902      	ldr	r1, [sp, #8]
 8004376:	f7ff fd4b 	bl	8003e10 <chOQWriteTimeout>
 800437a:	0003      	movs	r3, r0
                        n, TIME_INFINITE);
}
 800437c:	0018      	movs	r0, r3
 800437e:	b005      	add	sp, #20
 8004380:	bd00      	pop	{pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	0000ffff 	.word	0x0000ffff
	...

08004390 <read>:

static size_t read(void *ip, uint8_t *bp, size_t n) {
 8004390:	b500      	push	{lr}
 8004392:	b085      	sub	sp, #20
 8004394:	9003      	str	r0, [sp, #12]
 8004396:	9102      	str	r1, [sp, #8]
 8004398:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	330c      	adds	r3, #12
 800439e:	0018      	movs	r0, r3
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <read+0x24>)
 80043a2:	9a01      	ldr	r2, [sp, #4]
 80043a4:	9902      	ldr	r1, [sp, #8]
 80043a6:	f7ff fc1b 	bl	8003be0 <chIQReadTimeout>
 80043aa:	0003      	movs	r3, r0
                       n, TIME_INFINITE);
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	b005      	add	sp, #20
 80043b0:	bd00      	pop	{pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	0000ffff 	.word	0x0000ffff
	...

080043c0 <put>:

static msg_t put(void *ip, uint8_t b) {
 80043c0:	b500      	push	{lr}
 80043c2:	b083      	sub	sp, #12
 80043c4:	9001      	str	r0, [sp, #4]
 80043c6:	000a      	movs	r2, r1
 80043c8:	466b      	mov	r3, sp
 80043ca:	3303      	adds	r3, #3
 80043cc:	701a      	strb	r2, [r3, #0]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80043ce:	9b01      	ldr	r3, [sp, #4]
 80043d0:	3330      	adds	r3, #48	; 0x30
 80043d2:	0018      	movs	r0, r3
 80043d4:	4a05      	ldr	r2, [pc, #20]	; (80043ec <put+0x2c>)
 80043d6:	466b      	mov	r3, sp
 80043d8:	3303      	adds	r3, #3
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	0019      	movs	r1, r3
 80043de:	f7ff fc8f 	bl	8003d00 <chOQPutTimeout>
 80043e2:	0003      	movs	r3, r0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	b003      	add	sp, #12
 80043e8:	bd00      	pop	{pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	0000ffff 	.word	0x0000ffff

080043f0 <get>:

static msg_t get(void *ip) {
 80043f0:	b500      	push	{lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	330c      	adds	r3, #12
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <get+0x1c>)
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff fb9e 	bl	8003b40 <chIQGetTimeout>
 8004404:	0003      	movs	r3, r0
}
 8004406:	0018      	movs	r0, r3
 8004408:	b003      	add	sp, #12
 800440a:	bd00      	pop	{pc}
 800440c:	0000ffff 	.word	0x0000ffff

08004410 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
 8004410:	b500      	push	{lr}
 8004412:	b083      	sub	sp, #12
 8004414:	9001      	str	r0, [sp, #4]
 8004416:	0008      	movs	r0, r1
 8004418:	0011      	movs	r1, r2
 800441a:	466b      	mov	r3, sp
 800441c:	3303      	adds	r3, #3
 800441e:	1c02      	adds	r2, r0, #0
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	466b      	mov	r3, sp
 8004424:	1c0a      	adds	r2, r1, #0
 8004426:	801a      	strh	r2, [r3, #0]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8004428:	9b01      	ldr	r3, [sp, #4]
 800442a:	3330      	adds	r3, #48	; 0x30
 800442c:	0018      	movs	r0, r3
 800442e:	466b      	mov	r3, sp
 8004430:	881a      	ldrh	r2, [r3, #0]
 8004432:	466b      	mov	r3, sp
 8004434:	3303      	adds	r3, #3
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	0019      	movs	r1, r3
 800443a:	f7ff fc61 	bl	8003d00 <chOQPutTimeout>
 800443e:	0003      	movs	r3, r0
}
 8004440:	0018      	movs	r0, r3
 8004442:	b003      	add	sp, #12
 8004444:	bd00      	pop	{pc}
 8004446:	46c0      	nop			; (mov r8, r8)
	...

08004450 <gett>:

static msg_t gett(void *ip, systime_t timeout) {
 8004450:	b500      	push	{lr}
 8004452:	b083      	sub	sp, #12
 8004454:	9001      	str	r0, [sp, #4]
 8004456:	000a      	movs	r2, r1
 8004458:	466b      	mov	r3, sp
 800445a:	3302      	adds	r3, #2
 800445c:	801a      	strh	r2, [r3, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	330c      	adds	r3, #12
 8004462:	001a      	movs	r2, r3
 8004464:	466b      	mov	r3, sp
 8004466:	3302      	adds	r3, #2
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	0019      	movs	r1, r3
 800446c:	0010      	movs	r0, r2
 800446e:	f7ff fb67 	bl	8003b40 <chIQGetTimeout>
 8004472:	0003      	movs	r3, r0
}
 8004474:	0018      	movs	r0, r3
 8004476:	b003      	add	sp, #12
 8004478:	bd00      	pop	{pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	0000      	movs	r0, r0
	...

08004480 <writet>:

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8004480:	b500      	push	{lr}
 8004482:	b085      	sub	sp, #20
 8004484:	9003      	str	r0, [sp, #12]
 8004486:	9102      	str	r1, [sp, #8]
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	001a      	movs	r2, r3
 800448c:	466b      	mov	r3, sp
 800448e:	3302      	adds	r3, #2
 8004490:	801a      	strh	r2, [r3, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	3330      	adds	r3, #48	; 0x30
 8004496:	0018      	movs	r0, r3
 8004498:	466b      	mov	r3, sp
 800449a:	3302      	adds	r3, #2
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	9a01      	ldr	r2, [sp, #4]
 80044a0:	9902      	ldr	r1, [sp, #8]
 80044a2:	f7ff fcb5 	bl	8003e10 <chOQWriteTimeout>
 80044a6:	0003      	movs	r3, r0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	b005      	add	sp, #20
 80044ac:	bd00      	pop	{pc}
 80044ae:	46c0      	nop			; (mov r8, r8)

080044b0 <readt>:

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 80044b0:	b500      	push	{lr}
 80044b2:	b085      	sub	sp, #20
 80044b4:	9003      	str	r0, [sp, #12]
 80044b6:	9102      	str	r1, [sp, #8]
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	001a      	movs	r2, r3
 80044bc:	466b      	mov	r3, sp
 80044be:	3302      	adds	r3, #2
 80044c0:	801a      	strh	r2, [r3, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	330c      	adds	r3, #12
 80044c6:	0018      	movs	r0, r3
 80044c8:	466b      	mov	r3, sp
 80044ca:	3302      	adds	r3, #2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	9a01      	ldr	r2, [sp, #4]
 80044d0:	9902      	ldr	r1, [sp, #8]
 80044d2:	f7ff fb85 	bl	8003be0 <chIQReadTimeout>
 80044d6:	0003      	movs	r3, r0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	b005      	add	sp, #20
 80044dc:	bd00      	pop	{pc}
 80044de:	46c0      	nop			; (mov r8, r8)

080044e0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 80044e0:	b510      	push	{r4, lr}

  sd_lld_init();
 80044e2:	f000 fd15 	bl	8004f10 <sd_lld_init>
}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	0000      	movs	r0, r0
	...

080044f0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 80044f0:	b500      	push	{lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	9005      	str	r0, [sp, #20]
 80044f6:	9104      	str	r1, [sp, #16]
 80044f8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 80044fa:	9b05      	ldr	r3, [sp, #20]
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <sdObjectInit+0x5c>)
 80044fe:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8004500:	9b05      	ldr	r3, [sp, #20]
 8004502:	3304      	adds	r3, #4
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff ff0b 	bl	8004320 <osalEventObjectInit>
  sdp->state = SD_STOP;
 800450a:	9b05      	ldr	r3, [sp, #20]
 800450c:	2201      	movs	r2, #1
 800450e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8004510:	9b05      	ldr	r3, [sp, #20]
 8004512:	330c      	adds	r3, #12
 8004514:	0018      	movs	r0, r3
 8004516:	9b05      	ldr	r3, [sp, #20]
 8004518:	3354      	adds	r3, #84	; 0x54
 800451a:	0019      	movs	r1, r3
 800451c:	9a04      	ldr	r2, [sp, #16]
 800451e:	9b05      	ldr	r3, [sp, #20]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	0013      	movs	r3, r2
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	f7ff faab 	bl	8003a80 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800452a:	9b05      	ldr	r3, [sp, #20]
 800452c:	3330      	adds	r3, #48	; 0x30
 800452e:	0018      	movs	r0, r3
 8004530:	9b05      	ldr	r3, [sp, #20]
 8004532:	33d4      	adds	r3, #212	; 0xd4
 8004534:	0019      	movs	r1, r3
 8004536:	9a03      	ldr	r2, [sp, #12]
 8004538:	9b05      	ldr	r3, [sp, #20]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	0013      	movs	r3, r2
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	f7ff fbb6 	bl	8003cb0 <chOQObjectInit>
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	b007      	add	sp, #28
 8004548:	bd00      	pop	{pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	08009480 	.word	0x08009480

08004550 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8004550:	b500      	push	{lr}
 8004552:	b083      	sub	sp, #12
 8004554:	9001      	str	r0, [sp, #4]
 8004556:	9100      	str	r1, [sp, #0]

  osalDbgCheck(sdp != NULL);
 8004558:	9b01      	ldr	r3, [sp, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <sdStart+0x16>
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <sdStart+0x50>)
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe f93d 	bl	80027e0 <chSysHalt>

  osalSysLock();
 8004566:	f7ff fecb 	bl	8004300 <osalSysLock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	7a1b      	ldrb	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d007      	beq.n	8004582 <sdStart+0x32>
 8004572:	9b01      	ldr	r3, [sp, #4]
 8004574:	7a1b      	ldrb	r3, [r3, #8]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <sdStart+0x32>
 800457a:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <sdStart+0x50>)
 800457c:	0018      	movs	r0, r3
 800457e:	f7fe f92f 	bl	80027e0 <chSysHalt>
                "invalid state");
  sd_lld_start(sdp, config);
 8004582:	9a00      	ldr	r2, [sp, #0]
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fd01 	bl	8004f90 <sd_lld_start>
  sdp->state = SD_READY;
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 8004594:	f7ff febc 	bl	8004310 <osalSysUnlock>
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	b003      	add	sp, #12
 800459c:	bd00      	pop	{pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	080094a0 	.word	0x080094a0
	...

080045b0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 80045b0:	b500      	push	{lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	9001      	str	r0, [sp, #4]
 80045b6:	000a      	movs	r2, r1
 80045b8:	466b      	mov	r3, sp
 80045ba:	3303      	adds	r3, #3
 80045bc:	701a      	strb	r2, [r3, #0]

  osalDbgCheckClassI();
 80045be:	f7fe fa17 	bl	80029f0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <sdIncomingDataI+0x20>
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <sdIncomingDataI+0x64>)
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7fe f908 	bl	80027e0 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
 80045d0:	9b01      	ldr	r3, [sp, #4]
 80045d2:	330c      	adds	r3, #12
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff fe83 	bl	80042e0 <chIQIsEmptyI>
 80045da:	1e03      	subs	r3, r0, #0
 80045dc:	d005      	beq.n	80045ea <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2104      	movs	r1, #4
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff feab 	bl	8004340 <osalEventBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	330c      	adds	r3, #12
 80045ee:	001a      	movs	r2, r3
 80045f0:	466b      	mov	r3, sp
 80045f2:	3303      	adds	r3, #3
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	0019      	movs	r1, r3
 80045f8:	0010      	movs	r0, r2
 80045fa:	f7ff fa69 	bl	8003ad0 <chIQPutI>
 80045fe:	1e03      	subs	r3, r0, #0
 8004600:	da05      	bge.n	800460e <sdIncomingDataI+0x5e>
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 8004602:	9b01      	ldr	r3, [sp, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fe99 	bl	8004340 <osalEventBroadcastFlagsI>
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	b003      	add	sp, #12
 8004612:	bd00      	pop	{pc}
 8004614:	080094c0 	.word	0x080094c0
	...

08004620 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8004620:	b530      	push	{r4, r5, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	9001      	str	r0, [sp, #4]
 8004626:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 8004628:	4c1b      	ldr	r4, [pc, #108]	; (8004698 <nvicEnableVector+0x78>)
 800462a:	9b01      	ldr	r3, [sp, #4]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	491a      	ldr	r1, [pc, #104]	; (8004698 <nvicEnableVector+0x78>)
 8004630:	9a01      	ldr	r2, [sp, #4]
 8004632:	0892      	lsrs	r2, r2, #2
 8004634:	32c0      	adds	r2, #192	; 0xc0
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	5852      	ldr	r2, [r2, r1]
 800463a:	9901      	ldr	r1, [sp, #4]
 800463c:	2003      	movs	r0, #3
 800463e:	4001      	ands	r1, r0
 8004640:	00c9      	lsls	r1, r1, #3
 8004642:	20ff      	movs	r0, #255	; 0xff
 8004644:	4088      	lsls	r0, r1
 8004646:	0001      	movs	r1, r0
 8004648:	43c9      	mvns	r1, r1
 800464a:	4011      	ands	r1, r2
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
 800464c:	9a00      	ldr	r2, [sp, #0]
 800464e:	0190      	lsls	r0, r2, #6
 8004650:	9a01      	ldr	r2, [sp, #4]
 8004652:	2503      	movs	r5, #3
 8004654:	402a      	ands	r2, r5
 8004656:	00d2      	lsls	r2, r2, #3
 8004658:	4090      	lsls	r0, r2
 800465a:	0002      	movs	r2, r0
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 800465c:	430a      	orrs	r2, r1
 800465e:	33c0      	adds	r3, #192	; 0xc0
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	511a      	str	r2, [r3, r4]
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004664:	490c      	ldr	r1, [pc, #48]	; (8004698 <nvicEnableVector+0x78>)
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	9a01      	ldr	r2, [sp, #4]
 800466c:	201f      	movs	r0, #31
 800466e:	4002      	ands	r2, r0
 8004670:	2001      	movs	r0, #1
 8004672:	4090      	lsls	r0, r2
 8004674:	0002      	movs	r2, r0
 8004676:	3360      	adds	r3, #96	; 0x60
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800467c:	4906      	ldr	r1, [pc, #24]	; (8004698 <nvicEnableVector+0x78>)
 800467e:	9b01      	ldr	r3, [sp, #4]
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	9a01      	ldr	r2, [sp, #4]
 8004684:	201f      	movs	r0, #31
 8004686:	4002      	ands	r2, r0
 8004688:	2001      	movs	r0, #1
 800468a:	4090      	lsls	r0, r2
 800468c:	0002      	movs	r2, r0
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	505a      	str	r2, [r3, r1]
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	b003      	add	sp, #12
 8004696:	bd30      	pop	{r4, r5, pc}
 8004698:	e000e100 	.word	0xe000e100
 800469c:	00000000 	.word	0x00000000

080046a0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <hal_lld_backup_domain_init+0x5c>)
 80046a2:	4a16      	ldr	r2, [pc, #88]	; (80046fc <hal_lld_backup_domain_init+0x5c>)
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	0049      	lsls	r1, r1, #1
 80046aa:	430a      	orrs	r2, r1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046b0:	6a1a      	ldr	r2, [r3, #32]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	401a      	ands	r2, r3
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d006      	beq.n	80046ce <hal_lld_backup_domain_init+0x2e>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	0252      	lsls	r2, r2, #9
 80046c6:	621a      	str	r2, [r3, #32]
    RCC->BDCR = 0;
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	021b      	lsls	r3, r3, #8
 80046d6:	4013      	ands	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <hal_lld_backup_domain_init+0x56>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046de:	6a12      	ldr	r2, [r2, #32]
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	0089      	lsls	r1, r1, #2
 80046e4:	430a      	orrs	r2, r1
 80046e6:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046ea:	4a05      	ldr	r2, [pc, #20]	; (8004700 <hal_lld_backup_domain_init+0x60>)
 80046ec:	6a12      	ldr	r2, [r2, #32]
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	0209      	lsls	r1, r1, #8
 80046f2:	430a      	orrs	r2, r1
 80046f4:	621a      	str	r2, [r3, #32]
  }
#endif /* STM32_RTCSEL != STM32_RTCSEL_NOCLOCK */
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	4770      	bx	lr
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	40007000 	.word	0x40007000
 8004700:	40021000 	.word	0x40021000
	...

08004710 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8004710:	b510      	push	{r4, lr}

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <hal_lld_init+0x50>)
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <hal_lld_init+0x50>)
 8004718:	2201      	movs	r2, #1
 800471a:	4252      	negs	r2, r2
 800471c:	629a      	str	r2, [r3, #40]	; 0x28
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <hal_lld_init+0x50>)
 8004720:	2200      	movs	r2, #0
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <hal_lld_init+0x50>)
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <hal_lld_init+0x50>)
 800472a:	2201      	movs	r2, #1
 800472c:	4252      	negs	r2, r2
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <hal_lld_init+0x50>)
 8004732:	2200      	movs	r2, #0
 8004734:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <hal_lld_init+0x50>)
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <hal_lld_init+0x50>)
 800473a:	68d2      	ldr	r2, [r2, #12]
 800473c:	4909      	ldr	r1, [pc, #36]	; (8004764 <hal_lld_init+0x54>)
 800473e:	430a      	orrs	r2, r1
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <hal_lld_init+0x50>)
 8004744:	2200      	movs	r2, #0
 8004746:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <hal_lld_init+0x50>)
 800474a:	4a05      	ldr	r2, [pc, #20]	; (8004760 <hal_lld_init+0x50>)
 800474c:	69d2      	ldr	r2, [r2, #28]
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	0549      	lsls	r1, r1, #21
 8004752:	430a      	orrs	r2, r1
 8004754:	61da      	str	r2, [r3, #28]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 8004756:	f7ff ffa3 	bl	80046a0 <hal_lld_backup_domain_init>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	bd10      	pop	{r4, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	40021000 	.word	0x40021000
 8004764:	ffbfffff 	.word	0xffbfffff
	...

08004770 <stm32_clock_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <stm32_clock_init+0xdc>)
 8004772:	4a36      	ldr	r2, [pc, #216]	; (800484c <stm32_clock_init+0xdc>)
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	4b33      	ldr	r3, [pc, #204]	; (800484c <stm32_clock_init+0xdc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d0fa      	beq.n	800477e <stm32_clock_init+0xe>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8004788:	4b30      	ldr	r3, [pc, #192]	; (800484c <stm32_clock_init+0xdc>)
 800478a:	4a30      	ldr	r2, [pc, #192]	; (800484c <stm32_clock_init+0xdc>)
 800478c:	6852      	ldr	r2, [r2, #4]
 800478e:	2103      	movs	r1, #3
 8004790:	438a      	bics	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8004794:	4b2d      	ldr	r3, [pc, #180]	; (800484c <stm32_clock_init+0xdc>)
 8004796:	4a2d      	ldr	r2, [pc, #180]	; (800484c <stm32_clock_init+0xdc>)
 8004798:	6852      	ldr	r2, [r2, #4]
 800479a:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <stm32_clock_init+0xdc>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	220c      	movs	r2, #12
 80047a4:	4013      	ands	r3, r2
 80047a6:	d1fa      	bne.n	800479e <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <stm32_clock_init+0xdc>)
 80047aa:	4a28      	ldr	r2, [pc, #160]	; (800484c <stm32_clock_init+0xdc>)
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	21f9      	movs	r1, #249	; 0xf9
 80047b0:	400a      	ands	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <stm32_clock_init+0xdc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	605a      	str	r2, [r3, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_HSI14_ENABLED
  /* HSI14 activation.*/
  RCC->CR2 |= RCC_CR2_HSI14ON;
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <stm32_clock_init+0xdc>)
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <stm32_clock_init+0xdc>)
 80047be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c0:	2101      	movs	r1, #1
 80047c2:	430a      	orrs	r2, r1
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34
  while (!(RCC->CR2 & RCC_CR2_HSI14RDY))
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <stm32_clock_init+0xdc>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	2202      	movs	r2, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	d0fa      	beq.n	80047c8 <stm32_clock_init+0x58>
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80047d2:	4b1e      	ldr	r3, [pc, #120]	; (800484c <stm32_clock_init+0xdc>)
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <stm32_clock_init+0xdc>)
 80047d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047d8:	2101      	movs	r1, #1
 80047da:	430a      	orrs	r2, r1
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <stm32_clock_init+0xdc>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2202      	movs	r2, #2
 80047e6:	4013      	ands	r3, r2
 80047e8:	d0fa      	beq.n	80047e0 <stm32_clock_init+0x70>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  /* CFGR2 must be configured first since CFGR value could change CFGR2 */
  RCC->CFGR2 = STM32_PREDIV;
 80047ea:	4b18      	ldr	r3, [pc, #96]	; (800484c <stm32_clock_init+0xdc>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 80047f0:	4b16      	ldr	r3, [pc, #88]	; (800484c <stm32_clock_init+0xdc>)
 80047f2:	22a0      	movs	r2, #160	; 0xa0
 80047f4:	0392      	lsls	r2, r2, #14
 80047f6:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE |
               ((STM32_PREDIV & STM32_PLLXTPRE_MASK) << STM32_PLLXTPRE_OFFSET);
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <stm32_clock_init+0xdc>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <stm32_clock_init+0xdc>)
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <stm32_clock_init+0xdc>)
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	2180      	movs	r1, #128	; 0x80
 8004806:	0449      	lsls	r1, r1, #17
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <stm32_clock_init+0xdc>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	049b      	lsls	r3, r3, #18
 8004816:	4013      	ands	r3, r2
 8004818:	d0f9      	beq.n	800480e <stm32_clock_init+0x9e>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <stm32_clock_init+0xe0>)
 800481c:	2211      	movs	r2, #17
 800481e:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <stm32_clock_init+0xdc>)
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <stm32_clock_init+0xdc>)
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	2102      	movs	r1, #2
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <stm32_clock_init+0xdc>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	220c      	movs	r2, #12
 8004834:	4013      	ands	r3, r2
 8004836:	2b08      	cmp	r3, #8
 8004838:	d1f9      	bne.n	800482e <stm32_clock_init+0xbe>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800483a:	4b04      	ldr	r3, [pc, #16]	; (800484c <stm32_clock_init+0xdc>)
 800483c:	4a03      	ldr	r2, [pc, #12]	; (800484c <stm32_clock_init+0xdc>)
 800483e:	6992      	ldr	r2, [r2, #24]
 8004840:	2101      	movs	r1, #1
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
#endif /* !STM32_NO_INIT */
}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	4770      	bx	lr
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40021000 	.word	0x40021000
 8004850:	40022000 	.word	0x40022000
	...

08004860 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004860:	b672      	cpsid	i
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	4770      	bx	lr
 8004866:	46c0      	nop			; (mov r8, r8)
	...

08004870 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004870:	b662      	cpsie	i
}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	4770      	bx	lr
 8004876:	46c0      	nop			; (mov r8, r8)
	...

08004880 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8004880:	b510      	push	{r4, lr}
  port_lock();
 8004882:	f7ff ffed 	bl	8004860 <port_lock>
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	bd10      	pop	{r4, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	0000      	movs	r0, r0
	...

08004890 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8004890:	b510      	push	{r4, lr}
  port_unlock();
 8004892:	f7ff ffed 	bl	8004870 <port_unlock>
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	bd10      	pop	{r4, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	0000      	movs	r0, r0
	...

080048a0 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 80048a0:	b510      	push	{r4, lr}
  port_lock_from_isr();
 80048a2:	f7ff ffed 	bl	8004880 <port_lock_from_isr>
  _dbg_check_lock_from_isr();
 80048a6:	f7fe f833 	bl	8002910 <_dbg_check_lock_from_isr>
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)

080048b0 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 80048b0:	b510      	push	{r4, lr}
  _dbg_check_unlock_from_isr();
 80048b2:	f7fe f845 	bl	8002940 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 80048b6:	f7ff ffeb 	bl	8004890 <port_unlock_from_isr>
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	46c0      	nop			; (mov r8, r8)

080048c0 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 80048c0:	b510      	push	{r4, lr}
  chSysLockFromISR();
 80048c2:	f7ff ffed 	bl	80048a0 <chSysLockFromISR>
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	0000      	movs	r0, r0
	...

080048d0 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 80048d0:	b510      	push	{r4, lr}
  chSysUnlockFromISR();
 80048d2:	f7ff ffed 	bl	80048b0 <chSysUnlockFromISR>
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	0000      	movs	r0, r0
	...

080048e0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 80048e0:	b510      	push	{r4, lr}
  chSysTimerHandlerI();
 80048e2:	f7fd ff8d 	bl	8002800 <chSysTimerHandlerI>
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	bd10      	pop	{r4, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	0000      	movs	r0, r0
	...

080048f0 <Vector80>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80048f0:	b500      	push	{lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	f7fe f83a 	bl	8002970 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <Vector80+0x3c>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2202      	movs	r2, #2
 8004902:	4013      	ands	r3, r2
 8004904:	d008      	beq.n	8004918 <Vector80+0x28>
    STM32_ST_TIM->SR = 0U;
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <Vector80+0x3c>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 800490c:	f7ff ffd8 	bl	80048c0 <osalSysLockFromISR>
    osalOsTimerHandlerI();
 8004910:	f7ff ffe6 	bl	80048e0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8004914:	f7ff ffdc 	bl	80048d0 <osalSysUnlockFromISR>
  }

  OSAL_IRQ_EPILOGUE();
 8004918:	f7fe f84a 	bl	80029b0 <_dbg_check_leave_isr>
 800491c:	9b01      	ldr	r3, [sp, #4]
 800491e:	0018      	movs	r0, r3
 8004920:	f7ff fbbe 	bl	80040a0 <_port_irq_epilogue>
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	b003      	add	sp, #12
 8004928:	bd00      	pop	{pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	40000400 	.word	0x40000400

08004930 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8004930:	b510      	push	{r4, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <st_lld_init+0x58>)
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <st_lld_init+0x58>)
 8004936:	69d2      	ldr	r2, [r2, #28]
 8004938:	2102      	movs	r1, #2
 800493a:	430a      	orrs	r2, r1
 800493c:	61da      	str	r2, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <st_lld_init+0x5c>)
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <st_lld_init+0x5c>)
 8004942:	6892      	ldr	r2, [r2, #8]
 8004944:	2102      	movs	r1, #2
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <st_lld_init+0x60>)
 800494c:	4a11      	ldr	r2, [pc, #68]	; (8004994 <st_lld_init+0x64>)
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <st_lld_init+0x60>)
 8004952:	4a11      	ldr	r2, [pc, #68]	; (8004998 <st_lld_init+0x68>)
 8004954:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <st_lld_init+0x60>)
 8004958:	2200      	movs	r2, #0
 800495a:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <st_lld_init+0x60>)
 800495e:	2200      	movs	r2, #0
 8004960:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <st_lld_init+0x60>)
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <st_lld_init+0x60>)
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <st_lld_init+0x60>)
 8004970:	2201      	movs	r2, #1
 8004972:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <st_lld_init+0x60>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800497a:	2108      	movs	r1, #8
 800497c:	2010      	movs	r0, #16
 800497e:	f7ff fe4f 	bl	8004620 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	bd10      	pop	{r4, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	40021000 	.word	0x40021000
 800498c:	40015800 	.word	0x40015800
 8004990:	40000400 	.word	0x40000400
 8004994:	000012bf 	.word	0x000012bf
 8004998:	0000ffff 	.word	0x0000ffff
 800499c:	00000000 	.word	0x00000000

080049a0 <initgpio>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {
 80049a0:	b082      	sub	sp, #8
 80049a2:	9001      	str	r0, [sp, #4]
 80049a4:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 80049a6:	9b00      	ldr	r3, [sp, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	9b01      	ldr	r3, [sp, #4]
 80049ac:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80049ae:	9b00      	ldr	r3, [sp, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	9b01      	ldr	r3, [sp, #4]
 80049b4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80049b6:	9b00      	ldr	r3, [sp, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80049c6:	9b00      	ldr	r3, [sp, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	9b01      	ldr	r3, [sp, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	601a      	str	r2, [r3, #0]
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	b002      	add	sp, #8
 80049e2:	4770      	bx	lr
	...

080049f0 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 80049f0:	b500      	push	{lr}
 80049f2:	b083      	sub	sp, #12
 80049f4:	9001      	str	r0, [sp, #4]
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <_pal_lld_init+0x54>)
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <_pal_lld_init+0x54>)
 80049fa:	6952      	ldr	r2, [r2, #20]
 80049fc:	219c      	movs	r1, #156	; 0x9c
 80049fe:	03c9      	lsls	r1, r1, #15
 8004a00:	430a      	orrs	r2, r1
 8004a02:	615a      	str	r2, [r3, #20]

  /*
   * Initial GPIO setup.
   */
#if STM32_HAS_GPIOA
  initgpio(GPIOA, &config->PAData);
 8004a04:	9a01      	ldr	r2, [sp, #4]
 8004a06:	2390      	movs	r3, #144	; 0x90
 8004a08:	05db      	lsls	r3, r3, #23
 8004a0a:	0011      	movs	r1, r2
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff ffc7 	bl	80049a0 <initgpio>
#endif
#if STM32_HAS_GPIOB
  initgpio(GPIOB, &config->PBData);
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	331c      	adds	r3, #28
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <_pal_lld_init+0x58>)
 8004a18:	0019      	movs	r1, r3
 8004a1a:	0010      	movs	r0, r2
 8004a1c:	f7ff ffc0 	bl	80049a0 <initgpio>
#endif
#if STM32_HAS_GPIOC
  initgpio(GPIOC, &config->PCData);
 8004a20:	9b01      	ldr	r3, [sp, #4]
 8004a22:	3338      	adds	r3, #56	; 0x38
 8004a24:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <_pal_lld_init+0x5c>)
 8004a26:	0019      	movs	r1, r3
 8004a28:	0010      	movs	r0, r2
 8004a2a:	f7ff ffb9 	bl	80049a0 <initgpio>
#endif
#if STM32_HAS_GPIOE
  initgpio(GPIOE, &config->PEData);
#endif
#if STM32_HAS_GPIOF
  initgpio(GPIOF, &config->PFData);
 8004a2e:	9b01      	ldr	r3, [sp, #4]
 8004a30:	3354      	adds	r3, #84	; 0x54
 8004a32:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <_pal_lld_init+0x60>)
 8004a34:	0019      	movs	r1, r3
 8004a36:	0010      	movs	r0, r2
 8004a38:	f7ff ffb2 	bl	80049a0 <initgpio>
  initgpio(GPIOJ, &config->PJData);
#endif
#if STM32_HAS_GPIOK
  initgpio(GPIOK, &config->PKData);
#endif
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	b003      	add	sp, #12
 8004a40:	bd00      	pop	{pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	40021000 	.word	0x40021000
 8004a48:	48000400 	.word	0x48000400
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	48001400 	.word	0x48001400
	...

08004a60 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8004a60:	b08e      	sub	sp, #56	; 0x38
 8004a62:	9003      	str	r0, [sp, #12]
 8004a64:	9102      	str	r1, [sp, #8]
 8004a66:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004a68:	9b01      	ldr	r3, [sp, #4]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	2201      	movs	r2, #1
 8004a76:	4013      	ands	r3, r2
 8004a78:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	2203      	movs	r2, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2203      	movs	r2, #3
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	09db      	lsrs	r3, r3, #7
 8004a92:	220f      	movs	r2, #15
 8004a94:	4013      	ands	r3, r2
 8004a96:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 8004a9c:	9b02      	ldr	r3, [sp, #8]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <_pal_lld_setgroupmode+0x46>
 8004aa4:	e079      	b.n	8004b9a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8004aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aa8:	2207      	movs	r2, #7
 8004aaa:	4013      	ands	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	9a08      	ldr	r2, [sp, #32]
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	0013      	movs	r3, r2
 8004ab4:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aba:	409a      	lsls	r2, r3
 8004abc:	0013      	movs	r3, r2
 8004abe:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8004ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	0013      	movs	r3, r2
 8004aca:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 8004acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	220f      	movs	r2, #15
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	0013      	movs	r3, r2
 8004ada:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	9a06      	ldr	r2, [sp, #24]
 8004ae2:	43d2      	mvns	r2, r2
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	9a05      	ldr	r2, [sp, #20]
 8004af4:	43d2      	mvns	r2, r2
 8004af6:	401a      	ands	r2, r3
 8004af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004afa:	431a      	orrs	r2, r3
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	9a05      	ldr	r2, [sp, #20]
 8004b06:	43d2      	mvns	r2, r2
 8004b08:	401a      	ands	r2, r3
 8004b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8004b12:	9b01      	ldr	r3, [sp, #4]
 8004b14:	2203      	movs	r2, #3
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d11f      	bne.n	8004b5c <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	2b07      	cmp	r3, #7
 8004b20:	d809      	bhi.n	8004b36 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	9a04      	ldr	r2, [sp, #16]
 8004b28:	43d2      	mvns	r2, r2
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	9b03      	ldr	r3, [sp, #12]
 8004b32:	621a      	str	r2, [r3, #32]
 8004b34:	e008      	b.n	8004b48 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004b36:	9b03      	ldr	r3, [sp, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	9a04      	ldr	r2, [sp, #16]
 8004b3c:	43d2      	mvns	r2, r2
 8004b3e:	401a      	ands	r2, r3
 8004b40:	9b07      	ldr	r3, [sp, #28]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	9b03      	ldr	r3, [sp, #12]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	9a05      	ldr	r2, [sp, #20]
 8004b4e:	43d2      	mvns	r2, r2
 8004b50:	401a      	ands	r2, r3
 8004b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b54:	431a      	orrs	r2, r3
 8004b56:	9b03      	ldr	r3, [sp, #12]
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e01e      	b.n	8004b9a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9a05      	ldr	r2, [sp, #20]
 8004b62:	43d2      	mvns	r2, r2
 8004b64:	401a      	ands	r2, r3
 8004b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 8004b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b70:	2b07      	cmp	r3, #7
 8004b72:	d809      	bhi.n	8004b88 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004b74:	9b03      	ldr	r3, [sp, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	9a04      	ldr	r2, [sp, #16]
 8004b7a:	43d2      	mvns	r2, r2
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	9b07      	ldr	r3, [sp, #28]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	621a      	str	r2, [r3, #32]
 8004b86:	e008      	b.n	8004b9a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	9a04      	ldr	r2, [sp, #16]
 8004b8e:	43d2      	mvns	r2, r2
 8004b90:	401a      	ands	r2, r3
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	431a      	orrs	r2, r3
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 8004b9a:	9b02      	ldr	r3, [sp, #8]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	9302      	str	r3, [sp, #8]
    if (!mask)
 8004ba0:	9b02      	ldr	r3, [sp, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
 8004ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 8004bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8004bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8004bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 8004bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
 8004bc4:	e76a      	b.n	8004a9c <_pal_lld_setgroupmode+0x3c>
      return;
 8004bc6:	46c0      	nop			; (mov r8, r8)
  }
}
 8004bc8:	b00e      	add	sp, #56	; 0x38
 8004bca:	4770      	bx	lr
 8004bcc:	0000      	movs	r0, r0
	...

08004bd0 <port_lock>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd0:	b672      	cpsid	i
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	4770      	bx	lr
 8004bd6:	46c0      	nop			; (mov r8, r8)
	...

08004be0 <port_unlock>:
  __ASM volatile ("cpsie i" : : : "memory");
 8004be0:	b662      	cpsie	i
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	4770      	bx	lr
 8004be6:	46c0      	nop			; (mov r8, r8)
	...

08004bf0 <port_lock_from_isr>:
static inline void port_lock_from_isr(void) {
 8004bf0:	b510      	push	{r4, lr}
  port_lock();
 8004bf2:	f7ff ffed 	bl	8004bd0 <port_lock>
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	0000      	movs	r0, r0
	...

08004c00 <port_unlock_from_isr>:
static inline void port_unlock_from_isr(void) {
 8004c00:	b510      	push	{r4, lr}
  port_unlock();
 8004c02:	f7ff ffed 	bl	8004be0 <port_unlock>
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	0000      	movs	r0, r0
	...

08004c10 <chSysLockFromISR>:
static inline void chSysLockFromISR(void) {
 8004c10:	b510      	push	{r4, lr}
  port_lock_from_isr();
 8004c12:	f7ff ffed 	bl	8004bf0 <port_lock_from_isr>
  _dbg_check_lock_from_isr();
 8004c16:	f7fd fe7b 	bl	8002910 <_dbg_check_lock_from_isr>
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)

08004c20 <chSysUnlockFromISR>:
static inline void chSysUnlockFromISR(void) {
 8004c20:	b510      	push	{r4, lr}
  _dbg_check_unlock_from_isr();
 8004c22:	f7fd fe8d 	bl	8002940 <_dbg_check_unlock_from_isr>
  port_unlock_from_isr();
 8004c26:	f7ff ffeb 	bl	8004c00 <port_unlock_from_isr>
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)

08004c30 <chOQIsEmptyI>:
static inline bool chOQIsEmptyI(output_queue_t *oqp) {
 8004c30:	b500      	push	{lr}
 8004c32:	b083      	sub	sp, #12
 8004c34:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
 8004c36:	f7fd fedb 	bl	80029f0 <chDbgCheckClassI>
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8004c3a:	9b01      	ldr	r3, [sp, #4]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d105      	bne.n	8004c52 <chOQIsEmptyI+0x22>
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <chOQIsEmptyI+0x22>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <chOQIsEmptyI+0x24>
 8004c52:	2300      	movs	r3, #0
 8004c54:	1c1a      	adds	r2, r3, #0
 8004c56:	2301      	movs	r3, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b2db      	uxtb	r3, r3
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	b003      	add	sp, #12
 8004c60:	bd00      	pop	{pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
	...

08004c70 <osalSysLockFromISR>:
static inline void osalSysLockFromISR(void) {
 8004c70:	b510      	push	{r4, lr}
  chSysLockFromISR();
 8004c72:	f7ff ffcd 	bl	8004c10 <chSysLockFromISR>
}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	0000      	movs	r0, r0
	...

08004c80 <osalSysUnlockFromISR>:
static inline void osalSysUnlockFromISR(void) {
 8004c80:	b510      	push	{r4, lr}
  chSysUnlockFromISR();
 8004c82:	f7ff ffcd 	bl	8004c20 <chSysUnlockFromISR>
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	0000      	movs	r0, r0
	...

08004c90 <osalEventBroadcastFlagsI>:
                                            eventflags_t flags) {
 8004c90:	b500      	push	{lr}
 8004c92:	b083      	sub	sp, #12
 8004c94:	9001      	str	r0, [sp, #4]
 8004c96:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8004c98:	9a00      	ldr	r2, [sp, #0]
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	0011      	movs	r1, r2
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f7fe fdc6 	bl	8003830 <chEvtBroadcastFlagsI>
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	b003      	add	sp, #12
 8004ca8:	bd00      	pop	{pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	0000      	movs	r0, r0
	...

08004cb0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8004cb0:	b500      	push	{lr}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	9001      	str	r0, [sp, #4]
 8004cb6:	9100      	str	r1, [sp, #0]
  USART_TypeDef *u = sdp->usart;
 8004cb8:	9a01      	ldr	r2, [sp, #4]
 8004cba:	23aa      	movs	r3, #170	; 0xaa
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	58d3      	ldr	r3, [r2, r3]
 8004cc0:	9303      	str	r3, [sp, #12]
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8004cc2:	9a01      	ldr	r2, [sp, #4]
 8004cc4:	23ac      	movs	r3, #172	; 0xac
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	58d2      	ldr	r2, [r2, r3]
 8004cca:	9b00      	ldr	r3, [sp, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	0019      	movs	r1, r3
 8004cd0:	0010      	movs	r0, r2
 8004cd2:	f7fb fa85 	bl	80001e0 <__udivsi3>
 8004cd6:	0003      	movs	r3, r0
 8004cd8:	001a      	movs	r2, r3
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	60da      	str	r2, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8004cde:	9b00      	ldr	r3, [sp, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	9b03      	ldr	r3, [sp, #12]
 8004ce4:	605a      	str	r2, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8004ce6:	9b00      	ldr	r3, [sp, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	431a      	orrs	r2, r3
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8004cf6:	222e      	movs	r2, #46	; 0x2e
 8004cf8:	32ff      	adds	r2, #255	; 0xff
 8004cfa:	431a      	orrs	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	601a      	str	r2, [r3, #0]
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	4252      	negs	r2, r2
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	b005      	add	sp, #20
 8004d0c:	bd00      	pop	{pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)

08004d10 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
 8004d10:	b500      	push	{lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	9001      	str	r0, [sp, #4]
 8004d16:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
 8004d1c:	9b00      	ldr	r3, [sp, #0]
 8004d1e:	2208      	movs	r2, #8
 8004d20:	4013      	ands	r3, r2
 8004d22:	d003      	beq.n	8004d2c <set_error+0x1c>
    sts |= SD_OVERRUN_ERROR;
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
 8004d2c:	9b00      	ldr	r3, [sp, #0]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4013      	ands	r3, r2
 8004d32:	d003      	beq.n	8004d3c <set_error+0x2c>
    sts |= SD_PARITY_ERROR;
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
 8004d3c:	9b00      	ldr	r3, [sp, #0]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	4013      	ands	r3, r2
 8004d42:	d003      	beq.n	8004d4c <set_error+0x3c>
    sts |= SD_FRAMING_ERROR;
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	2240      	movs	r2, #64	; 0x40
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
 8004d4c:	9b00      	ldr	r3, [sp, #0]
 8004d4e:	2204      	movs	r2, #4
 8004d50:	4013      	ands	r3, r2
 8004d52:	d004      	beq.n	8004d5e <set_error+0x4e>
    sts |= SD_NOISE_ERROR;
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	0052      	lsls	r2, r2, #1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
 8004d5e:	f7ff ff87 	bl	8004c70 <osalSysLockFromISR>
  chnAddFlagsI(sdp, sts);
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	9a03      	ldr	r2, [sp, #12]
 8004d68:	0011      	movs	r1, r2
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff ff90 	bl	8004c90 <osalEventBroadcastFlagsI>
  osalSysUnlockFromISR();
 8004d70:	f7ff ff86 	bl	8004c80 <osalSysUnlockFromISR>
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	b005      	add	sp, #20
 8004d78:	bd00      	pop	{pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	0000      	movs	r0, r0
	...

08004d80 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8004d80:	b500      	push	{lr}
 8004d82:	b087      	sub	sp, #28
 8004d84:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8004d86:	9a01      	ldr	r2, [sp, #4]
 8004d88:	23aa      	movs	r3, #170	; 0xaa
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	58d3      	ldr	r3, [r2, r3]
 8004d8e:	9305      	str	r3, [sp, #20]
  uint32_t cr1 = u->CR1;
 8004d90:	9b05      	ldr	r3, [sp, #20]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	9304      	str	r3, [sp, #16]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8004d96:	9b05      	ldr	r3, [sp, #20]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	9303      	str	r3, [sp, #12]
  u->ICR = isr;
 8004d9c:	9b05      	ldr	r3, [sp, #20]
 8004d9e:	9a03      	ldr	r2, [sp, #12]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	220f      	movs	r2, #15
 8004da6:	4013      	ands	r3, r2
 8004da8:	d005      	beq.n	8004db6 <serve_interrupt+0x36>
    set_error(sdp, isr);
 8004daa:	9a03      	ldr	r2, [sp, #12]
 8004dac:	9b01      	ldr	r3, [sp, #4]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7ff ffad 	bl	8004d10 <set_error>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d00c      	beq.n	8004dd8 <serve_interrupt+0x58>
    osalSysLockFromISR();
 8004dbe:	f7ff ff57 	bl	8004c70 <osalSysLockFromISR>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 8004dc2:	9b05      	ldr	r3, [sp, #20]
 8004dc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	0011      	movs	r1, r2
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7ff fbee 	bl	80045b0 <sdIncomingDataI>
    osalSysUnlockFromISR();
 8004dd4:	f7ff ff54 	bl	8004c80 <osalSysUnlockFromISR>
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d023      	beq.n	8004e28 <serve_interrupt+0xa8>
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	4013      	ands	r3, r2
 8004de6:	d01f      	beq.n	8004e28 <serve_interrupt+0xa8>
    msg_t b;
    osalSysLockFromISR();
 8004de8:	f7ff ff42 	bl	8004c70 <osalSysLockFromISR>
    b = oqGetI(&sdp->oqueue);
 8004dec:	9b01      	ldr	r3, [sp, #4]
 8004dee:	3330      	adds	r3, #48	; 0x30
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fe ffd5 	bl	8003da0 <chOQGetI>
 8004df6:	0003      	movs	r3, r0
 8004df8:	9302      	str	r3, [sp, #8]
    if (b < Q_OK) {
 8004dfa:	9b02      	ldr	r3, [sp, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da0d      	bge.n	8004e1c <serve_interrupt+0x9c>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2108      	movs	r1, #8
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7ff ff42 	bl	8004c90 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004e0c:	9b04      	ldr	r3, [sp, #16]
 8004e0e:	22c0      	movs	r2, #192	; 0xc0
 8004e10:	4393      	bics	r3, r2
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	431a      	orrs	r2, r3
 8004e16:	9b05      	ldr	r3, [sp, #20]
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	e003      	b.n	8004e24 <serve_interrupt+0xa4>
    }
    else
      u->TDR = b;
 8004e1c:	9b02      	ldr	r3, [sp, #8]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	851a      	strh	r2, [r3, #40]	; 0x28
    osalSysUnlockFromISR();
 8004e24:	f7ff ff2c 	bl	8004c80 <osalSysUnlockFromISR>
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d016      	beq.n	8004e5e <serve_interrupt+0xde>
    osalSysLockFromISR();
 8004e30:	f7ff ff1e 	bl	8004c70 <osalSysLockFromISR>
    if (oqIsEmptyI(&sdp->oqueue))
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	3330      	adds	r3, #48	; 0x30
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff fef9 	bl	8004c30 <chOQIsEmptyI>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d005      	beq.n	8004e4e <serve_interrupt+0xce>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	3304      	adds	r3, #4
 8004e46:	2110      	movs	r1, #16
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7ff ff21 	bl	8004c90 <osalEventBroadcastFlagsI>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004e4e:	9b04      	ldr	r3, [sp, #16]
 8004e50:	2240      	movs	r2, #64	; 0x40
 8004e52:	4393      	bics	r3, r2
 8004e54:	001a      	movs	r2, r3
 8004e56:	9b05      	ldr	r3, [sp, #20]
 8004e58:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8004e5a:	f7ff ff11 	bl	8004c80 <osalSysUnlockFromISR>
  }
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	b007      	add	sp, #28
 8004e62:	bd00      	pop	{pc}
	...

08004e70 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8004e70:	b082      	sub	sp, #8
 8004e72:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8004e74:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <notify2+0x18>)
 8004e76:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <notify2+0x18>)
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
}
 8004e80:	46c0      	nop			; (mov r8, r8)
 8004e82:	b002      	add	sp, #8
 8004e84:	4770      	bx	lr
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	40004400 	.word	0x40004400
 8004e8c:	00000000 	.word	0x00000000

08004e90 <notify5>:
  UART4->CR1 |= USART_CR1_TXEIE;
}
#endif

#if STM32_SERIAL_USE_UART5 || defined(__DOXYGEN__)
static void notify5(io_queue_t *qp) {
 8004e90:	b082      	sub	sp, #8
 8004e92:	9001      	str	r0, [sp, #4]

  (void)qp;
  UART5->CR1 |= USART_CR1_TXEIE;
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <notify5+0x18>)
 8004e96:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <notify5+0x18>)
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	b002      	add	sp, #8
 8004ea4:	4770      	bx	lr
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	40005000 	.word	0x40005000
 8004eac:	00000000 	.word	0x00000000

08004eb0 <VectorB0>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004eb0:	b500      	push	{lr}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	f7fd fd5a 	bl	8002970 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <VectorB0+0x28>)
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7ff ff5e 	bl	8004d80 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004ec4:	f7fd fd74 	bl	80029b0 <_dbg_check_leave_isr>
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f7ff f8e8 	bl	80040a0 <_port_irq_epilogue>
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	b003      	add	sp, #12
 8004ed4:	bd00      	pop	{pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	20001ce4 	.word	0x20001ce4
 8004edc:	00000000 	.word	0x00000000

08004ee0 <VectorB4>:
/**
 * @brief   USART3..8 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_8_HANDLER) {
 8004ee0:	b500      	push	{lr}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	4673      	mov	r3, lr

  OSAL_IRQ_PROLOGUE();
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	f7fd fd42 	bl	8002970 <_dbg_check_enter_isr>
#endif
#if STM32_SERIAL_USE_UART4
  serve_interrupt(&SD4);
#endif
#if STM32_SERIAL_USE_UART5
  serve_interrupt(&SD5);
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <VectorB4+0x28>)
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f7ff ff46 	bl	8004d80 <serve_interrupt>
#endif
#if STM32_SERIAL_USE_USART6
  serve_interrupt(&SD6);
#endif

  OSAL_IRQ_EPILOGUE();
 8004ef4:	f7fd fd5c 	bl	80029b0 <_dbg_check_leave_isr>
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f7ff f8d0 	bl	80040a0 <_port_irq_epilogue>
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	b003      	add	sp, #12
 8004f04:	bd00      	pop	{pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	20001b88 	.word	0x20001b88
 8004f0c:	00000000 	.word	0x00000000

08004f10 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8004f10:	b510      	push	{r4, lr}
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8004f12:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <sd_lld_init+0x58>)
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <sd_lld_init+0x5c>)
 8004f16:	2100      	movs	r1, #0
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f7ff fae9 	bl	80044f0 <sdObjectInit>
  SD2.usart = USART2;
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <sd_lld_init+0x5c>)
 8004f20:	23aa      	movs	r3, #170	; 0xaa
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4912      	ldr	r1, [pc, #72]	; (8004f70 <sd_lld_init+0x60>)
 8004f26:	50d1      	str	r1, [r2, r3]
  SD2.clock = STM32_USART2CLK;
 8004f28:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <sd_lld_init+0x5c>)
 8004f2a:	23ac      	movs	r3, #172	; 0xac
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4911      	ldr	r1, [pc, #68]	; (8004f74 <sd_lld_init+0x64>)
 8004f30:	50d1      	str	r1, [r2, r3]
#if defined(STM32_USART2_NUMBER)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8004f32:	2102      	movs	r1, #2
 8004f34:	201c      	movs	r0, #28
 8004f36:	f7ff fb73 	bl	8004620 <nvicEnableVector>
  nvicEnableVector(STM32_UART4_NUMBER, STM32_SERIAL_UART4_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_UART5
  sdObjectInit(&SD5, NULL, notify5);
 8004f3a:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <sd_lld_init+0x68>)
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <sd_lld_init+0x6c>)
 8004f3e:	2100      	movs	r1, #0
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff fad5 	bl	80044f0 <sdObjectInit>
  SD5.usart = UART5;
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <sd_lld_init+0x6c>)
 8004f48:	23aa      	movs	r3, #170	; 0xaa
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	490c      	ldr	r1, [pc, #48]	; (8004f80 <sd_lld_init+0x70>)
 8004f4e:	50d1      	str	r1, [r2, r3]
  SD5.clock = STM32_UART5CLK;
 8004f50:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <sd_lld_init+0x6c>)
 8004f52:	23ac      	movs	r3, #172	; 0xac
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4907      	ldr	r1, [pc, #28]	; (8004f74 <sd_lld_init+0x64>)
 8004f58:	50d1      	str	r1, [r2, r3]

#if STM32_SERIAL_USE_USART3 || STM32_SERIAL_USE_UART4  ||                   \
    STM32_SERIAL_USE_UART5  || STM32_SERIAL_USE_USART6 ||                   \
    STM32_SERIAL_USE_UART7  ||  STM32_SERIAL_USE_UART8 || defined(__DOXYGEN__)
#if defined(STM32_USART3_8_HANDLER)
  nvicEnableVector(STM32_USART3_8_NUMBER, STM32_SERIAL_USART3_8_PRIORITY);
 8004f5a:	210c      	movs	r1, #12
 8004f5c:	201d      	movs	r0, #29
 8004f5e:	f7ff fb5f 	bl	8004620 <nvicEnableVector>
#endif
#endif
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	08004e71 	.word	0x08004e71
 8004f6c:	20001ce4 	.word	0x20001ce4
 8004f70:	40004400 	.word	0x40004400
 8004f74:	02dc6c00 	.word	0x02dc6c00
 8004f78:	08004e91 	.word	0x08004e91
 8004f7c:	20001b88 	.word	0x20001b88
 8004f80:	40005000 	.word	0x40005000
	...

08004f90 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8004f90:	b500      	push	{lr}
 8004f92:	b083      	sub	sp, #12
 8004f94:	9001      	str	r0, [sp, #4]
 8004f96:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8004f98:	9b00      	ldr	r3, [sp, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <sd_lld_start+0x12>
    config = &default_config;
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <sd_lld_start+0x58>)
 8004fa0:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	7a1b      	ldrb	r3, [r3, #8]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d115      	bne.n	8004fd6 <sd_lld_start+0x46>
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8004faa:	9a01      	ldr	r2, [sp, #4]
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <sd_lld_start+0x5c>)
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d106      	bne.n	8004fc0 <sd_lld_start+0x30>
      rccEnableUSART2(FALSE);
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <sd_lld_start+0x60>)
 8004fb4:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <sd_lld_start+0x60>)
 8004fb6:	69d2      	ldr	r2, [r2, #28]
 8004fb8:	2180      	movs	r1, #128	; 0x80
 8004fba:	0289      	lsls	r1, r1, #10
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	61da      	str	r2, [r3, #28]
    if (&SD4 == sdp) {
      rccEnableUART4(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART5
    if (&SD5 == sdp) {
 8004fc0:	9a01      	ldr	r2, [sp, #4]
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <sd_lld_start+0x64>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <sd_lld_start+0x46>
      rccEnableUART5(FALSE);
 8004fc8:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <sd_lld_start+0x60>)
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <sd_lld_start+0x60>)
 8004fcc:	69d2      	ldr	r2, [r2, #28]
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	0349      	lsls	r1, r1, #13
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	61da      	str	r2, [r3, #28]
    if (&LPSD1 == sdp) {
      rccEnableLPUART1(FALSE);
    }
#endif
  }
  usart_init(sdp, config);
 8004fd6:	9a00      	ldr	r2, [sp, #0]
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	0011      	movs	r1, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7ff fe67 	bl	8004cb0 <usart_init>
}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	b003      	add	sp, #12
 8004fe6:	bd00      	pop	{pc}
 8004fe8:	080094d0 	.word	0x080094d0
 8004fec:	20001ce4 	.word	0x20001ce4
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	20001b88 	.word	0x20001b88
	...

08005000 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
 8005000:	b510      	push	{r4, lr}

  stm32_clock_init();
 8005002:	f7ff fbb5 	bl	8004770 <stm32_clock_init>
}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	0000      	movs	r0, r0
	...

08005010 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	4770      	bx	lr
	...

08005020 <_ZL9port_lockv>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005020:	b672      	cpsid	i
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	4770      	bx	lr
 8005026:	46c0      	nop			; (mov r8, r8)
	...

08005030 <_ZL11port_unlockv>:
  __ASM volatile ("cpsie i" : : : "memory");
 8005030:	b662      	cpsie	i
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	4770      	bx	lr
 8005036:	46c0      	nop			; (mov r8, r8)
	...

08005040 <_ZL18st_lld_get_counterv>:
  return (systime_t)STM32_ST_TIM->CNT;
 8005040:	4b02      	ldr	r3, [pc, #8]	; (800504c <_ZL18st_lld_get_counterv+0xc>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b29b      	uxth	r3, r3
}
 8005046:	0018      	movs	r0, r3
 8005048:	4770      	bx	lr
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	40000400 	.word	0x40000400

08005050 <_ZL19port_timer_get_timev>:
static inline systime_t port_timer_get_time(void) {
 8005050:	b510      	push	{r4, lr}
  return stGetCounter();
 8005052:	f7ff fff5 	bl	8005040 <_ZL18st_lld_get_counterv>
 8005056:	0003      	movs	r3, r0
}
 8005058:	0018      	movs	r0, r3
 800505a:	bd10      	pop	{r4, pc}
 800505c:	0000      	movs	r0, r0
	...

08005060 <_ZL9chSysLockv>:
static inline void chSysLock(void) {
 8005060:	b510      	push	{r4, lr}
  port_lock();
 8005062:	f7ff ffdd 	bl	8005020 <_ZL9port_lockv>
  _dbg_check_lock();
 8005066:	f7fd fc23 	bl	80028b0 <_dbg_check_lock>
}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	bd10      	pop	{r4, pc}
 800506e:	46c0      	nop			; (mov r8, r8)

08005070 <_ZL11chSysUnlockv>:
static inline void chSysUnlock(void) {
 8005070:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8005072:	f7fd fc35 	bl	80028e0 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <_ZL11chSysUnlockv+0x30>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <_ZL11chSysUnlockv+0x30>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d00b      	beq.n	8005098 <_ZL11chSysUnlockv+0x28>
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <_ZL11chSysUnlockv+0x30>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <_ZL11chSysUnlockv+0x30>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	d203      	bcs.n	8005098 <_ZL11chSysUnlockv+0x28>
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <_ZL11chSysUnlockv+0x34>)
 8005092:	0018      	movs	r0, r3
 8005094:	f7fd fba4 	bl	80027e0 <chSysHalt>
  port_unlock();
 8005098:	f7ff ffca 	bl	8005030 <_ZL11port_unlockv>
}
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	bd10      	pop	{r4, pc}
 80050a0:	20001620 	.word	0x20001620
 80050a4:	08009550 	.word	0x08009550
	...

080050b0 <_ZL18chVTGetSystemTimeXv>:
static inline systime_t chVTGetSystemTimeX(void) {
 80050b0:	b510      	push	{r4, lr}
  return port_timer_get_time();
 80050b2:	f7ff ffcd 	bl	8005050 <_ZL19port_timer_get_timev>
 80050b6:	0003      	movs	r3, r0
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	bd10      	pop	{r4, pc}
 80050bc:	0000      	movs	r0, r0
	...

080050c0 <_ZL17chVTGetSystemTimev>:
static inline systime_t chVTGetSystemTime(void) {
 80050c0:	b510      	push	{r4, lr}
 80050c2:	b082      	sub	sp, #8
  chSysLock();
 80050c4:	f7ff ffcc 	bl	8005060 <_ZL9chSysLockv>
  systime = chVTGetSystemTimeX();
 80050c8:	466b      	mov	r3, sp
 80050ca:	1d9c      	adds	r4, r3, #6
 80050cc:	f7ff fff0 	bl	80050b0 <_ZL18chVTGetSystemTimeXv>
 80050d0:	0003      	movs	r3, r0
 80050d2:	8023      	strh	r3, [r4, #0]
  chSysUnlock();
 80050d4:	f7ff ffcc 	bl	8005070 <_ZL11chSysUnlockv>
  return systime;
 80050d8:	466b      	mov	r3, sp
 80050da:	3306      	adds	r3, #6
 80050dc:	881b      	ldrh	r3, [r3, #0]
}
 80050de:	0018      	movs	r0, r3
 80050e0:	b002      	add	sp, #8
 80050e2:	bd10      	pop	{r4, pc}
	...

080050f0 <_Z8initUARTv>:

static SerialConfig sd5cfg = {
		38400 // Baudrate
};

void initUART() {
 80050f0:	b510      	push	{r4, lr}
	palSetPadMode(GPIOB, 3, PAL_MODE_ALTERNATE(4));
 80050f2:	4a07      	ldr	r2, [pc, #28]	; (8005110 <_Z8initUARTv+0x20>)
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <_Z8initUARTv+0x24>)
 80050f6:	2108      	movs	r1, #8
 80050f8:	0018      	movs	r0, r3
 80050fa:	f7ff fcb1 	bl	8004a60 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 4, PAL_MODE_ALTERNATE(4));
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <_Z8initUARTv+0x20>)
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <_Z8initUARTv+0x24>)
 8005102:	2110      	movs	r1, #16
 8005104:	0018      	movs	r0, r3
 8005106:	f7ff fcab 	bl	8004a60 <_pal_lld_setgroupmode>
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	bd10      	pop	{r4, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	00000202 	.word	0x00000202
 8005114:	48000400 	.word	0x48000400
	...

08005120 <_Z19writeSensorDataUARTt>:

void writeSensorDataUART(uint16_t duration) {
 8005120:	b500      	push	{lr}
 8005122:	b087      	sub	sp, #28
 8005124:	0002      	movs	r2, r0
 8005126:	466b      	mov	r3, sp
 8005128:	3306      	adds	r3, #6
 800512a:	801a      	strh	r2, [r3, #0]
	char _duration[5];
	char _size_duration[1];

	int size_duration = sprintf(_duration, "%d", duration);
 800512c:	466b      	mov	r3, sp
 800512e:	3306      	adds	r3, #6
 8005130:	881a      	ldrh	r2, [r3, #0]
 8005132:	490e      	ldr	r1, [pc, #56]	; (800516c <_Z19writeSensorDataUARTt+0x4c>)
 8005134:	ab03      	add	r3, sp, #12
 8005136:	0018      	movs	r0, r3
 8005138:	f000 f8fa 	bl	8005330 <sprintf>
 800513c:	0003      	movs	r3, r0
 800513e:	9305      	str	r3, [sp, #20]
	sprintf(_size_duration, "%d", size_duration);
 8005140:	9a05      	ldr	r2, [sp, #20]
 8005142:	490a      	ldr	r1, [pc, #40]	; (800516c <_Z19writeSensorDataUARTt+0x4c>)
 8005144:	ab02      	add	r3, sp, #8
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f8f2 	bl	8005330 <sprintf>

	sdWrite(&SD5, (uint8_t *) &_size_duration, 1);
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <_Z19writeSensorDataUARTt+0x50>)
 800514e:	a902      	add	r1, sp, #8
 8005150:	4808      	ldr	r0, [pc, #32]	; (8005174 <_Z19writeSensorDataUARTt+0x54>)
 8005152:	2201      	movs	r2, #1
 8005154:	f7fe fe5c 	bl	8003e10 <chOQWriteTimeout>
	sdWrite(&SD5, (uint8_t *) &_duration, size_duration);
 8005158:	9a05      	ldr	r2, [sp, #20]
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <_Z19writeSensorDataUARTt+0x50>)
 800515c:	a903      	add	r1, sp, #12
 800515e:	4805      	ldr	r0, [pc, #20]	; (8005174 <_Z19writeSensorDataUARTt+0x54>)
 8005160:	f7fe fe56 	bl	8003e10 <chOQWriteTimeout>
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	b007      	add	sp, #28
 8005168:	bd00      	pop	{pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	080091d0 	.word	0x080091d0
 8005170:	0000ffff 	.word	0x0000ffff
 8005174:	20001bb8 	.word	0x20001bb8
	...

08005180 <_Z10initSensorv>:

void initSensor() {
 8005180:	b510      	push	{r4, lr}
	//GPIO_0 (15) Trigger
	//GPIO_1 (14) Echo
	palSetPadMode(GPIOB, 15, PAL_MODE_OUTPUT_PUSHPULL);
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4807      	ldr	r0, [pc, #28]	; (80051a4 <_Z10initSensorv+0x24>)
 8005188:	2201      	movs	r2, #1
 800518a:	0019      	movs	r1, r3
 800518c:	f7ff fc68 	bl	8004a60 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_INPUT_PULLUP);
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	01db      	lsls	r3, r3, #7
 8005194:	4803      	ldr	r0, [pc, #12]	; (80051a4 <_Z10initSensorv+0x24>)
 8005196:	2220      	movs	r2, #32
 8005198:	0019      	movs	r1, r3
 800519a:	f7ff fc61 	bl	8004a60 <_pal_lld_setgroupmode>
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	48000400 	.word	0x48000400
	...

080051b0 <_Z9readValuev>:

uint16_t readValue() {
 80051b0:	b510      	push	{r4, lr}
 80051b2:	b082      	sub	sp, #8
	systime_t start;
	systime_t duration;

	while(1) {
		palSetPad(GPIOB, 15);
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <_Z9readValuev+0x84>)
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <_Z9readValuev+0x88>)
 80051b8:	831a      	strh	r2, [r3, #24]
		chThdSleepMicroseconds(10);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7fe fa68 	bl	8003690 <chThdSleep>
		palClearPad(GPIOB, 15);
 80051c0:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <_Z9readValuev+0x84>)
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <_Z9readValuev+0x88>)
 80051c4:	835a      	strh	r2, [r3, #26]

		while(1) {
			if(palReadPad(GPIOB, 14)) {
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <_Z9readValuev+0x84>)
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	01db      	lsls	r3, r3, #7
 80051ce:	4013      	ands	r3, r2
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	4193      	sbcs	r3, r2
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f5      	beq.n	80051c6 <_Z9readValuev+0x16>
				start = chVTGetSystemTime();
 80051da:	466b      	mov	r3, sp
 80051dc:	1d9c      	adds	r4, r3, #6
 80051de:	f7ff ff6f 	bl	80050c0 <_ZL17chVTGetSystemTimev>
 80051e2:	0003      	movs	r3, r0
 80051e4:	8023      	strh	r3, [r4, #0]
				break;
			}
		}
		while(palReadPad(GPIOB, 14));
 80051e6:	4b13      	ldr	r3, [pc, #76]	; (8005234 <_Z9readValuev+0x84>)
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	01db      	lsls	r3, r3, #7
 80051ee:	4013      	ands	r3, r2
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	4193      	sbcs	r3, r2
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d000      	beq.n	80051fc <_Z9readValuev+0x4c>
 80051fa:	e7f4      	b.n	80051e6 <_Z9readValuev+0x36>
		// double schallgeschwindigkeit = 331.5 + 0.6 * 30;
		// double entfernung = (schallgeschwindigkeit * duration)/20000;
		return duration = ST2US(chVTGetSystemTime() - start);
 80051fc:	f7ff ff60 	bl	80050c0 <_ZL17chVTGetSystemTimev>
 8005200:	0003      	movs	r3, r0
 8005202:	001a      	movs	r2, r3
 8005204:	466b      	mov	r3, sp
 8005206:	3306      	adds	r3, #6
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	001a      	movs	r2, r3
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <_Z9readValuev+0x8c>)
 8005210:	4353      	muls	r3, r2
 8005212:	4a0b      	ldr	r2, [pc, #44]	; (8005240 <_Z9readValuev+0x90>)
 8005214:	4694      	mov	ip, r2
 8005216:	4463      	add	r3, ip
 8005218:	490a      	ldr	r1, [pc, #40]	; (8005244 <_Z9readValuev+0x94>)
 800521a:	0018      	movs	r0, r3
 800521c:	f7fa ffe0 	bl	80001e0 <__udivsi3>
 8005220:	0003      	movs	r3, r0
 8005222:	001a      	movs	r2, r3
 8005224:	ab01      	add	r3, sp, #4
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	ab01      	add	r3, sp, #4
 800522a:	881b      	ldrh	r3, [r3, #0]
	}
}
 800522c:	0018      	movs	r0, r3
 800522e:	b002      	add	sp, #8
 8005230:	bd10      	pop	{r4, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	48000400 	.word	0x48000400
 8005238:	ffff8000 	.word	0xffff8000
 800523c:	000f4240 	.word	0x000f4240
 8005240:	0000270f 	.word	0x0000270f
 8005244:	00002710 	.word	0x00002710
	...

08005250 <main>:

int main(void) {
 8005250:	b510      	push	{r4, lr}
 8005252:	b082      	sub	sp, #8
	halInit();
 8005254:	f7fe ff5c 	bl	8004110 <halInit>
	chSysInit();
 8005258:	f7fd fa7a 	bl	8002750 <chSysInit>

	initUART();
 800525c:	f7ff ff48 	bl	80050f0 <_Z8initUARTv>
	initSensor();
 8005260:	f7ff ff8e 	bl	8005180 <_Z10initSensorv>
	sdStart(&SD5, &sd5cfg);
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <main+0x40>)
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <main+0x44>)
 8005268:	0011      	movs	r1, r2
 800526a:	0018      	movs	r0, r3
 800526c:	f7ff f970 	bl	8004550 <sdStart>

	while(1) {
		uint16_t duration = readValue();
 8005270:	466b      	mov	r3, sp
 8005272:	1d9c      	adds	r4, r3, #6
 8005274:	f7ff ff9c 	bl	80051b0 <_Z9readValuev>
 8005278:	0003      	movs	r3, r0
 800527a:	8023      	strh	r3, [r4, #0]
		writeSensorDataUART(duration);
 800527c:	466b      	mov	r3, sp
 800527e:	3306      	adds	r3, #6
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	0018      	movs	r0, r3
 8005284:	f7ff ff4c 	bl	8005120 <_Z19writeSensorDataUARTt>
		chThdSleep(100);
 8005288:	2064      	movs	r0, #100	; 0x64
 800528a:	f7fe fa01 	bl	8003690 <chThdSleep>
	}
 800528e:	e7ef      	b.n	8005270 <main+0x20>
 8005290:	20000c00 	.word	0x20000c00
 8005294:	20001b88 	.word	0x20001b88
	...

080052a0 <memcpy>:
 80052a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a2:	0005      	movs	r5, r0
 80052a4:	2a0f      	cmp	r2, #15
 80052a6:	d92f      	bls.n	8005308 <memcpy+0x68>
 80052a8:	000b      	movs	r3, r1
 80052aa:	4303      	orrs	r3, r0
 80052ac:	079b      	lsls	r3, r3, #30
 80052ae:	d134      	bne.n	800531a <memcpy+0x7a>
 80052b0:	0016      	movs	r6, r2
 80052b2:	000c      	movs	r4, r1
 80052b4:	0003      	movs	r3, r0
 80052b6:	3e10      	subs	r6, #16
 80052b8:	0935      	lsrs	r5, r6, #4
 80052ba:	3501      	adds	r5, #1
 80052bc:	012d      	lsls	r5, r5, #4
 80052be:	1945      	adds	r5, r0, r5
 80052c0:	6827      	ldr	r7, [r4, #0]
 80052c2:	601f      	str	r7, [r3, #0]
 80052c4:	6867      	ldr	r7, [r4, #4]
 80052c6:	605f      	str	r7, [r3, #4]
 80052c8:	68a7      	ldr	r7, [r4, #8]
 80052ca:	609f      	str	r7, [r3, #8]
 80052cc:	68e7      	ldr	r7, [r4, #12]
 80052ce:	3410      	adds	r4, #16
 80052d0:	60df      	str	r7, [r3, #12]
 80052d2:	3310      	adds	r3, #16
 80052d4:	429d      	cmp	r5, r3
 80052d6:	d1f3      	bne.n	80052c0 <memcpy+0x20>
 80052d8:	230f      	movs	r3, #15
 80052da:	439e      	bics	r6, r3
 80052dc:	3610      	adds	r6, #16
 80052de:	1985      	adds	r5, r0, r6
 80052e0:	1989      	adds	r1, r1, r6
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d91a      	bls.n	800531e <memcpy+0x7e>
 80052e8:	1f1e      	subs	r6, r3, #4
 80052ea:	2300      	movs	r3, #0
 80052ec:	08b4      	lsrs	r4, r6, #2
 80052ee:	3401      	adds	r4, #1
 80052f0:	00a4      	lsls	r4, r4, #2
 80052f2:	58cf      	ldr	r7, [r1, r3]
 80052f4:	50ef      	str	r7, [r5, r3]
 80052f6:	3304      	adds	r3, #4
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d1fa      	bne.n	80052f2 <memcpy+0x52>
 80052fc:	2403      	movs	r4, #3
 80052fe:	43a6      	bics	r6, r4
 8005300:	1d33      	adds	r3, r6, #4
 8005302:	4022      	ands	r2, r4
 8005304:	18c9      	adds	r1, r1, r3
 8005306:	18ed      	adds	r5, r5, r3
 8005308:	2a00      	cmp	r2, #0
 800530a:	d005      	beq.n	8005318 <memcpy+0x78>
 800530c:	2300      	movs	r3, #0
 800530e:	5ccc      	ldrb	r4, [r1, r3]
 8005310:	54ec      	strb	r4, [r5, r3]
 8005312:	3301      	adds	r3, #1
 8005314:	4293      	cmp	r3, r2
 8005316:	d1fa      	bne.n	800530e <memcpy+0x6e>
 8005318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531a:	0005      	movs	r5, r0
 800531c:	e7f6      	b.n	800530c <memcpy+0x6c>
 800531e:	001a      	movs	r2, r3
 8005320:	e7f2      	b.n	8005308 <memcpy+0x68>
 8005322:	46c0      	nop			; (mov r8, r8)
	...

08005330 <sprintf>:
 8005330:	b40e      	push	{r1, r2, r3}
 8005332:	b510      	push	{r4, lr}
 8005334:	b09d      	sub	sp, #116	; 0x74
 8005336:	a902      	add	r1, sp, #8
 8005338:	9002      	str	r0, [sp, #8]
 800533a:	6108      	str	r0, [r1, #16]
 800533c:	480b      	ldr	r0, [pc, #44]	; (800536c <sprintf+0x3c>)
 800533e:	2482      	movs	r4, #130	; 0x82
 8005340:	6088      	str	r0, [r1, #8]
 8005342:	6148      	str	r0, [r1, #20]
 8005344:	2001      	movs	r0, #1
 8005346:	4240      	negs	r0, r0
 8005348:	ab1f      	add	r3, sp, #124	; 0x7c
 800534a:	81c8      	strh	r0, [r1, #14]
 800534c:	4808      	ldr	r0, [pc, #32]	; (8005370 <sprintf+0x40>)
 800534e:	cb04      	ldmia	r3!, {r2}
 8005350:	00a4      	lsls	r4, r4, #2
 8005352:	6800      	ldr	r0, [r0, #0]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	818c      	strh	r4, [r1, #12]
 8005358:	f000 f812 	bl	8005380 <_svfprintf_r>
 800535c:	2300      	movs	r3, #0
 800535e:	9a02      	ldr	r2, [sp, #8]
 8005360:	7013      	strb	r3, [r2, #0]
 8005362:	b01d      	add	sp, #116	; 0x74
 8005364:	bc10      	pop	{r4}
 8005366:	bc08      	pop	{r3}
 8005368:	b003      	add	sp, #12
 800536a:	4718      	bx	r3
 800536c:	7fffffff 	.word	0x7fffffff
 8005370:	20000c10 	.word	0x20000c10
	...

08005380 <_svfprintf_r>:
 8005380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005382:	46de      	mov	lr, fp
 8005384:	4645      	mov	r5, r8
 8005386:	4657      	mov	r7, sl
 8005388:	464e      	mov	r6, r9
 800538a:	b5e0      	push	{r5, r6, r7, lr}
 800538c:	b0c3      	sub	sp, #268	; 0x10c
 800538e:	000d      	movs	r5, r1
 8005390:	9106      	str	r1, [sp, #24]
 8005392:	0014      	movs	r4, r2
 8005394:	930f      	str	r3, [sp, #60]	; 0x3c
 8005396:	9009      	str	r0, [sp, #36]	; 0x24
 8005398:	f002 fc9a 	bl	8007cd0 <_localeconv_r>
 800539c:	6803      	ldr	r3, [r0, #0]
 800539e:	0018      	movs	r0, r3
 80053a0:	9319      	str	r3, [sp, #100]	; 0x64
 80053a2:	f003 fb35 	bl	8008a10 <strlen>
 80053a6:	9018      	str	r0, [sp, #96]	; 0x60
 80053a8:	89ab      	ldrh	r3, [r5, #12]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	d505      	bpl.n	80053ba <_svfprintf_r+0x3a>
 80053ae:	692b      	ldr	r3, [r5, #16]
 80053b0:	9307      	str	r3, [sp, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <_svfprintf_r+0x3a>
 80053b6:	f001 f863 	bl	8006480 <_svfprintf_r+0x1100>
 80053ba:	ab32      	add	r3, sp, #200	; 0xc8
 80053bc:	9325      	str	r3, [sp, #148]	; 0x94
 80053be:	2300      	movs	r3, #0
 80053c0:	46a3      	mov	fp, r4
 80053c2:	af25      	add	r7, sp, #148	; 0x94
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	9314      	str	r3, [sp, #80]	; 0x50
 80053ca:	9315      	str	r3, [sp, #84]	; 0x54
 80053cc:	9316      	str	r3, [sp, #88]	; 0x58
 80053ce:	ae32      	add	r6, sp, #200	; 0xc8
 80053d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80053d2:	931a      	str	r3, [sp, #104]	; 0x68
 80053d4:	930a      	str	r3, [sp, #40]	; 0x28
 80053d6:	465b      	mov	r3, fp
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	465c      	mov	r4, fp
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01c      	beq.n	800541a <_svfprintf_r+0x9a>
 80053e0:	2b25      	cmp	r3, #37	; 0x25
 80053e2:	d102      	bne.n	80053ea <_svfprintf_r+0x6a>
 80053e4:	e019      	b.n	800541a <_svfprintf_r+0x9a>
 80053e6:	2b25      	cmp	r3, #37	; 0x25
 80053e8:	d003      	beq.n	80053f2 <_svfprintf_r+0x72>
 80053ea:	3401      	adds	r4, #1
 80053ec:	7823      	ldrb	r3, [r4, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f9      	bne.n	80053e6 <_svfprintf_r+0x66>
 80053f2:	465b      	mov	r3, fp
 80053f4:	1ae5      	subs	r5, r4, r3
 80053f6:	d010      	beq.n	800541a <_svfprintf_r+0x9a>
 80053f8:	465b      	mov	r3, fp
 80053fa:	6033      	str	r3, [r6, #0]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6075      	str	r5, [r6, #4]
 8005400:	195b      	adds	r3, r3, r5
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3301      	adds	r3, #1
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	2b07      	cmp	r3, #7
 800540c:	dc2e      	bgt.n	800546c <_svfprintf_r+0xec>
 800540e:	3608      	adds	r6, #8
 8005410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005412:	469c      	mov	ip, r3
 8005414:	44ac      	add	ip, r5
 8005416:	4663      	mov	r3, ip
 8005418:	930a      	str	r3, [sp, #40]	; 0x28
 800541a:	7823      	ldrb	r3, [r4, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02e      	beq.n	800547e <_svfprintf_r+0xfe>
 8005420:	1c63      	adds	r3, r4, #1
 8005422:	469b      	mov	fp, r3
 8005424:	2300      	movs	r3, #0
 8005426:	aa16      	add	r2, sp, #88	; 0x58
 8005428:	77d3      	strb	r3, [r2, #31]
 800542a:	2201      	movs	r2, #1
 800542c:	4252      	negs	r2, r2
 800542e:	4692      	mov	sl, r2
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	920b      	str	r2, [sp, #44]	; 0x2c
 8005436:	3220      	adds	r2, #32
 8005438:	4691      	mov	r9, r2
 800543a:	3220      	adds	r2, #32
 800543c:	7863      	ldrb	r3, [r4, #1]
 800543e:	4688      	mov	r8, r1
 8005440:	2000      	movs	r0, #0
 8005442:	2400      	movs	r4, #0
 8005444:	4694      	mov	ip, r2
 8005446:	4659      	mov	r1, fp
 8005448:	3101      	adds	r1, #1
 800544a:	001a      	movs	r2, r3
 800544c:	3a20      	subs	r2, #32
 800544e:	2a58      	cmp	r2, #88	; 0x58
 8005450:	d900      	bls.n	8005454 <_svfprintf_r+0xd4>
 8005452:	e2fd      	b.n	8005a50 <_svfprintf_r+0x6d0>
 8005454:	4dd7      	ldr	r5, [pc, #860]	; (80057b4 <_svfprintf_r+0x434>)
 8005456:	0092      	lsls	r2, r2, #2
 8005458:	58aa      	ldr	r2, [r5, r2]
 800545a:	4697      	mov	pc, r2
 800545c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800545e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005460:	425b      	negs	r3, r3
 8005462:	930b      	str	r3, [sp, #44]	; 0x2c
 8005464:	2304      	movs	r3, #4
 8005466:	431c      	orrs	r4, r3
 8005468:	780b      	ldrb	r3, [r1, #0]
 800546a:	e7ed      	b.n	8005448 <_svfprintf_r+0xc8>
 800546c:	003a      	movs	r2, r7
 800546e:	9906      	ldr	r1, [sp, #24]
 8005470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005472:	f003 fb05 	bl	8008a80 <__ssprint_r>
 8005476:	2800      	cmp	r0, #0
 8005478:	d109      	bne.n	800548e <_svfprintf_r+0x10e>
 800547a:	ae32      	add	r6, sp, #200	; 0xc8
 800547c:	e7c8      	b.n	8005410 <_svfprintf_r+0x90>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d004      	beq.n	800548e <_svfprintf_r+0x10e>
 8005484:	003a      	movs	r2, r7
 8005486:	9906      	ldr	r1, [sp, #24]
 8005488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800548a:	f003 faf9 	bl	8008a80 <__ssprint_r>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	899b      	ldrh	r3, [r3, #12]
 8005492:	065b      	lsls	r3, r3, #25
 8005494:	d501      	bpl.n	800549a <_svfprintf_r+0x11a>
 8005496:	f001 f8ce 	bl	8006636 <_svfprintf_r+0x12b6>
 800549a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800549c:	b043      	add	sp, #268	; 0x10c
 800549e:	bc3c      	pop	{r2, r3, r4, r5}
 80054a0:	4690      	mov	r8, r2
 80054a2:	4699      	mov	r9, r3
 80054a4:	46a2      	mov	sl, r4
 80054a6:	46ab      	mov	fp, r5
 80054a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054aa:	2201      	movs	r2, #1
 80054ac:	780b      	ldrb	r3, [r1, #0]
 80054ae:	4690      	mov	r8, r2
 80054b0:	202b      	movs	r0, #43	; 0x2b
 80054b2:	e7c9      	b.n	8005448 <_svfprintf_r+0xc8>
 80054b4:	1c4b      	adds	r3, r1, #1
 80054b6:	469b      	mov	fp, r3
 80054b8:	780b      	ldrb	r3, [r1, #0]
 80054ba:	2b2a      	cmp	r3, #42	; 0x2a
 80054bc:	d101      	bne.n	80054c2 <_svfprintf_r+0x142>
 80054be:	f001 fa20 	bl	8006902 <_svfprintf_r+0x1582>
 80054c2:	001a      	movs	r2, r3
 80054c4:	2100      	movs	r1, #0
 80054c6:	3a30      	subs	r2, #48	; 0x30
 80054c8:	468a      	mov	sl, r1
 80054ca:	4659      	mov	r1, fp
 80054cc:	2a09      	cmp	r2, #9
 80054ce:	d8bc      	bhi.n	800544a <_svfprintf_r+0xca>
 80054d0:	0003      	movs	r3, r0
 80054d2:	0011      	movs	r1, r2
 80054d4:	4650      	mov	r0, sl
 80054d6:	465a      	mov	r2, fp
 80054d8:	469a      	mov	sl, r3
 80054da:	46a3      	mov	fp, r4
 80054dc:	0083      	lsls	r3, r0, #2
 80054de:	181b      	adds	r3, r3, r0
 80054e0:	7814      	ldrb	r4, [r2, #0]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	1858      	adds	r0, r3, r1
 80054e6:	0021      	movs	r1, r4
 80054e8:	1c53      	adds	r3, r2, #1
 80054ea:	3930      	subs	r1, #48	; 0x30
 80054ec:	001a      	movs	r2, r3
 80054ee:	2909      	cmp	r1, #9
 80054f0:	d9f4      	bls.n	80054dc <_svfprintf_r+0x15c>
 80054f2:	4652      	mov	r2, sl
 80054f4:	0019      	movs	r1, r3
 80054f6:	4682      	mov	sl, r0
 80054f8:	0023      	movs	r3, r4
 80054fa:	0010      	movs	r0, r2
 80054fc:	465c      	mov	r4, fp
 80054fe:	e7a4      	b.n	800544a <_svfprintf_r+0xca>
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	431c      	orrs	r4, r3
 8005504:	780b      	ldrb	r3, [r1, #0]
 8005506:	e79f      	b.n	8005448 <_svfprintf_r+0xc8>
 8005508:	468b      	mov	fp, r1
 800550a:	4641      	mov	r1, r8
 800550c:	9312      	str	r3, [sp, #72]	; 0x48
 800550e:	2900      	cmp	r1, #0
 8005510:	d001      	beq.n	8005516 <_svfprintf_r+0x196>
 8005512:	f001 fa28 	bl	8006966 <_svfprintf_r+0x15e6>
 8005516:	2310      	movs	r3, #16
 8005518:	431c      	orrs	r4, r3
 800551a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800551c:	06a3      	lsls	r3, r4, #26
 800551e:	d501      	bpl.n	8005524 <_svfprintf_r+0x1a4>
 8005520:	f000 fe88 	bl	8006234 <_svfprintf_r+0xeb4>
 8005524:	06e3      	lsls	r3, r4, #27
 8005526:	d501      	bpl.n	800552c <_svfprintf_r+0x1ac>
 8005528:	f000 fd80 	bl	800602c <_svfprintf_r+0xcac>
 800552c:	0663      	lsls	r3, r4, #25
 800552e:	d401      	bmi.n	8005534 <_svfprintf_r+0x1b4>
 8005530:	f000 fd7c 	bl	800602c <_svfprintf_r+0xcac>
 8005534:	2100      	movs	r1, #0
 8005536:	5e53      	ldrsh	r3, [r2, r1]
 8005538:	930c      	str	r3, [sp, #48]	; 0x30
 800553a:	3204      	adds	r2, #4
 800553c:	17db      	asrs	r3, r3, #31
 800553e:	930d      	str	r3, [sp, #52]	; 0x34
 8005540:	920f      	str	r2, [sp, #60]	; 0x3c
 8005542:	d501      	bpl.n	8005548 <_svfprintf_r+0x1c8>
 8005544:	f000 fe86 	bl	8006254 <_svfprintf_r+0xed4>
 8005548:	990c      	ldr	r1, [sp, #48]	; 0x30
 800554a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800554c:	0008      	movs	r0, r1
 800554e:	ab16      	add	r3, sp, #88	; 0x58
 8005550:	7fdb      	ldrb	r3, [r3, #31]
 8005552:	4310      	orrs	r0, r2
 8005554:	4698      	mov	r8, r3
 8005556:	0002      	movs	r2, r0
 8005558:	2301      	movs	r3, #1
 800555a:	4651      	mov	r1, sl
 800555c:	3101      	adds	r1, #1
 800555e:	d100      	bne.n	8005562 <_svfprintf_r+0x1e2>
 8005560:	e0ff      	b.n	8005762 <_svfprintf_r+0x3e2>
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	0020      	movs	r0, r4
 8005566:	4388      	bics	r0, r1
 8005568:	9008      	str	r0, [sp, #32]
 800556a:	2a00      	cmp	r2, #0
 800556c:	d000      	beq.n	8005570 <_svfprintf_r+0x1f0>
 800556e:	e0fc      	b.n	800576a <_svfprintf_r+0x3ea>
 8005570:	4652      	mov	r2, sl
 8005572:	2a00      	cmp	r2, #0
 8005574:	d001      	beq.n	800557a <_svfprintf_r+0x1fa>
 8005576:	f000 fc2c 	bl	8005dd2 <_svfprintf_r+0xa52>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <_svfprintf_r+0x202>
 800557e:	f000 fd04 	bl	8005f8a <_svfprintf_r+0xc0a>
 8005582:	2001      	movs	r0, #1
 8005584:	ab32      	add	r3, sp, #200	; 0xc8
 8005586:	4020      	ands	r0, r4
 8005588:	900e      	str	r0, [sp, #56]	; 0x38
 800558a:	9311      	str	r3, [sp, #68]	; 0x44
 800558c:	d008      	beq.n	80055a0 <_svfprintf_r+0x220>
 800558e:	2327      	movs	r3, #39	; 0x27
 8005590:	2130      	movs	r1, #48	; 0x30
 8005592:	aa28      	add	r2, sp, #160	; 0xa0
 8005594:	54d1      	strb	r1, [r2, r3]
 8005596:	aa16      	add	r2, sp, #88	; 0x58
 8005598:	4694      	mov	ip, r2
 800559a:	3348      	adds	r3, #72	; 0x48
 800559c:	4463      	add	r3, ip
 800559e:	9311      	str	r3, [sp, #68]	; 0x44
 80055a0:	4653      	mov	r3, sl
 80055a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	4592      	cmp	sl, r2
 80055a8:	da00      	bge.n	80055ac <_svfprintf_r+0x22c>
 80055aa:	9207      	str	r2, [sp, #28]
 80055ac:	2300      	movs	r3, #0
 80055ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80055b0:	4643      	mov	r3, r8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <_svfprintf_r+0x23c>
 80055b6:	9b07      	ldr	r3, [sp, #28]
 80055b8:	3301      	adds	r3, #1
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	2302      	movs	r3, #2
 80055be:	9a08      	ldr	r2, [sp, #32]
 80055c0:	401a      	ands	r2, r3
 80055c2:	4691      	mov	r9, r2
 80055c4:	d002      	beq.n	80055cc <_svfprintf_r+0x24c>
 80055c6:	9b07      	ldr	r3, [sp, #28]
 80055c8:	3302      	adds	r3, #2
 80055ca:	9307      	str	r3, [sp, #28]
 80055cc:	2384      	movs	r3, #132	; 0x84
 80055ce:	9a08      	ldr	r2, [sp, #32]
 80055d0:	401a      	ands	r2, r3
 80055d2:	9210      	str	r2, [sp, #64]	; 0x40
 80055d4:	d000      	beq.n	80055d8 <_svfprintf_r+0x258>
 80055d6:	e24d      	b.n	8005a74 <_svfprintf_r+0x6f4>
 80055d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055da:	9a07      	ldr	r2, [sp, #28]
 80055dc:	1a9c      	subs	r4, r3, r2
 80055de:	2c00      	cmp	r4, #0
 80055e0:	dc00      	bgt.n	80055e4 <_svfprintf_r+0x264>
 80055e2:	e247      	b.n	8005a74 <_svfprintf_r+0x6f4>
 80055e4:	4974      	ldr	r1, [pc, #464]	; (80057b8 <_svfprintf_r+0x438>)
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4688      	mov	r8, r1
 80055ec:	2c10      	cmp	r4, #16
 80055ee:	dd1f      	ble.n	8005630 <_svfprintf_r+0x2b0>
 80055f0:	0031      	movs	r1, r6
 80055f2:	2510      	movs	r5, #16
 80055f4:	4646      	mov	r6, r8
 80055f6:	e003      	b.n	8005600 <_svfprintf_r+0x280>
 80055f8:	3c10      	subs	r4, #16
 80055fa:	3108      	adds	r1, #8
 80055fc:	2c10      	cmp	r4, #16
 80055fe:	dd15      	ble.n	800562c <_svfprintf_r+0x2ac>
 8005600:	3210      	adds	r2, #16
 8005602:	3301      	adds	r3, #1
 8005604:	600e      	str	r6, [r1, #0]
 8005606:	604d      	str	r5, [r1, #4]
 8005608:	60ba      	str	r2, [r7, #8]
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	2b07      	cmp	r3, #7
 800560e:	ddf3      	ble.n	80055f8 <_svfprintf_r+0x278>
 8005610:	003a      	movs	r2, r7
 8005612:	9906      	ldr	r1, [sp, #24]
 8005614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005616:	f003 fa33 	bl	8008a80 <__ssprint_r>
 800561a:	2800      	cmp	r0, #0
 800561c:	d000      	beq.n	8005620 <_svfprintf_r+0x2a0>
 800561e:	e736      	b.n	800548e <_svfprintf_r+0x10e>
 8005620:	3c10      	subs	r4, #16
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	a932      	add	r1, sp, #200	; 0xc8
 8005628:	2c10      	cmp	r4, #16
 800562a:	dce9      	bgt.n	8005600 <_svfprintf_r+0x280>
 800562c:	46b0      	mov	r8, r6
 800562e:	000e      	movs	r6, r1
 8005630:	4641      	mov	r1, r8
 8005632:	6074      	str	r4, [r6, #4]
 8005634:	3301      	adds	r3, #1
 8005636:	18a4      	adds	r4, r4, r2
 8005638:	6031      	str	r1, [r6, #0]
 800563a:	60bc      	str	r4, [r7, #8]
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	2b07      	cmp	r3, #7
 8005640:	dd01      	ble.n	8005646 <_svfprintf_r+0x2c6>
 8005642:	f000 fca8 	bl	8005f96 <_svfprintf_r+0xc16>
 8005646:	ab16      	add	r3, sp, #88	; 0x58
 8005648:	7fdb      	ldrb	r3, [r3, #31]
 800564a:	3608      	adds	r6, #8
 800564c:	4698      	mov	r8, r3
 800564e:	e212      	b.n	8005a76 <_svfprintf_r+0x6f6>
 8005650:	468b      	mov	fp, r1
 8005652:	4641      	mov	r1, r8
 8005654:	9312      	str	r3, [sp, #72]	; 0x48
 8005656:	2900      	cmp	r1, #0
 8005658:	d001      	beq.n	800565e <_svfprintf_r+0x2de>
 800565a:	f001 f980 	bl	800695e <_svfprintf_r+0x15de>
 800565e:	2207      	movs	r2, #7
 8005660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005662:	3307      	adds	r3, #7
 8005664:	4393      	bics	r3, r2
 8005666:	3201      	adds	r2, #1
 8005668:	4694      	mov	ip, r2
 800566a:	449c      	add	ip, r3
 800566c:	4662      	mov	r2, ip
 800566e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	9215      	str	r2, [sp, #84]	; 0x54
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	9316      	str	r3, [sp, #88]	; 0x58
 800567a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800567c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	4698      	mov	r8, r3
 8005684:	4252      	negs	r2, r2
 8005686:	4b4d      	ldr	r3, [pc, #308]	; (80057bc <_svfprintf_r+0x43c>)
 8005688:	0028      	movs	r0, r5
 800568a:	4641      	mov	r1, r8
 800568c:	f7fc fd40 	bl	8002110 <__aeabi_dcmpun>
 8005690:	2800      	cmp	r0, #0
 8005692:	d001      	beq.n	8005698 <_svfprintf_r+0x318>
 8005694:	f000 fdfd 	bl	8006292 <_svfprintf_r+0xf12>
 8005698:	2201      	movs	r2, #1
 800569a:	4b48      	ldr	r3, [pc, #288]	; (80057bc <_svfprintf_r+0x43c>)
 800569c:	4252      	negs	r2, r2
 800569e:	0028      	movs	r0, r5
 80056a0:	4641      	mov	r1, r8
 80056a2:	f7fa ff45 	bl	8000530 <__aeabi_dcmple>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d001      	beq.n	80056ae <_svfprintf_r+0x32e>
 80056aa:	f000 fdf2 	bl	8006292 <_svfprintf_r+0xf12>
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80056b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80056b6:	f7fa ff31 	bl	800051c <__aeabi_dcmplt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d001      	beq.n	80056c2 <_svfprintf_r+0x342>
 80056be:	f001 f822 	bl	8006706 <_svfprintf_r+0x1386>
 80056c2:	ab16      	add	r3, sp, #88	; 0x58
 80056c4:	7fdb      	ldrb	r3, [r3, #31]
 80056c6:	4698      	mov	r8, r3
 80056c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ca:	2b47      	cmp	r3, #71	; 0x47
 80056cc:	dd01      	ble.n	80056d2 <_svfprintf_r+0x352>
 80056ce:	f000 fec7 	bl	8006460 <_svfprintf_r+0x10e0>
 80056d2:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <_svfprintf_r+0x440>)
 80056d4:	9311      	str	r3, [sp, #68]	; 0x44
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	439c      	bics	r4, r3
 80056da:	9408      	str	r4, [sp, #32]
 80056dc:	2303      	movs	r3, #3
 80056de:	9307      	str	r3, [sp, #28]
 80056e0:	930e      	str	r3, [sp, #56]	; 0x38
 80056e2:	2300      	movs	r3, #0
 80056e4:	469a      	mov	sl, r3
 80056e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80056e8:	e762      	b.n	80055b0 <_svfprintf_r+0x230>
 80056ea:	2200      	movs	r2, #0
 80056ec:	3b30      	subs	r3, #48	; 0x30
 80056ee:	0015      	movs	r5, r2
 80056f0:	001a      	movs	r2, r3
 80056f2:	0003      	movs	r3, r0
 80056f4:	9407      	str	r4, [sp, #28]
 80056f6:	0008      	movs	r0, r1
 80056f8:	002c      	movs	r4, r5
 80056fa:	469b      	mov	fp, r3
 80056fc:	00a3      	lsls	r3, r4, #2
 80056fe:	191c      	adds	r4, r3, r4
 8005700:	7803      	ldrb	r3, [r0, #0]
 8005702:	0064      	lsls	r4, r4, #1
 8005704:	1914      	adds	r4, r2, r4
 8005706:	001a      	movs	r2, r3
 8005708:	3101      	adds	r1, #1
 800570a:	3a30      	subs	r2, #48	; 0x30
 800570c:	0008      	movs	r0, r1
 800570e:	2a09      	cmp	r2, #9
 8005710:	d9f4      	bls.n	80056fc <_svfprintf_r+0x37c>
 8005712:	940b      	str	r4, [sp, #44]	; 0x2c
 8005714:	4658      	mov	r0, fp
 8005716:	9c07      	ldr	r4, [sp, #28]
 8005718:	e697      	b.n	800544a <_svfprintf_r+0xca>
 800571a:	2308      	movs	r3, #8
 800571c:	431c      	orrs	r4, r3
 800571e:	780b      	ldrb	r3, [r1, #0]
 8005720:	e692      	b.n	8005448 <_svfprintf_r+0xc8>
 8005722:	9312      	str	r3, [sp, #72]	; 0x48
 8005724:	2310      	movs	r3, #16
 8005726:	431c      	orrs	r4, r3
 8005728:	468b      	mov	fp, r1
 800572a:	06a3      	lsls	r3, r4, #26
 800572c:	d500      	bpl.n	8005730 <_svfprintf_r+0x3b0>
 800572e:	e17b      	b.n	8005a28 <_svfprintf_r+0x6a8>
 8005730:	06e3      	lsls	r3, r4, #27
 8005732:	d501      	bpl.n	8005738 <_svfprintf_r+0x3b8>
 8005734:	f000 fc7e 	bl	8006034 <_svfprintf_r+0xcb4>
 8005738:	0663      	lsls	r3, r4, #25
 800573a:	d401      	bmi.n	8005740 <_svfprintf_r+0x3c0>
 800573c:	f000 fc7a 	bl	8006034 <_svfprintf_r+0xcb4>
 8005740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	920c      	str	r2, [sp, #48]	; 0x30
 8005746:	2200      	movs	r2, #0
 8005748:	3304      	adds	r3, #4
 800574a:	930f      	str	r3, [sp, #60]	; 0x3c
 800574c:	2300      	movs	r3, #0
 800574e:	920d      	str	r2, [sp, #52]	; 0x34
 8005750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005752:	2100      	movs	r1, #0
 8005754:	a816      	add	r0, sp, #88	; 0x58
 8005756:	77c1      	strb	r1, [r0, #31]
 8005758:	4688      	mov	r8, r1
 800575a:	4651      	mov	r1, sl
 800575c:	3101      	adds	r1, #1
 800575e:	d000      	beq.n	8005762 <_svfprintf_r+0x3e2>
 8005760:	e6ff      	b.n	8005562 <_svfprintf_r+0x1e2>
 8005762:	2a00      	cmp	r2, #0
 8005764:	d100      	bne.n	8005768 <_svfprintf_r+0x3e8>
 8005766:	e335      	b.n	8005dd4 <_svfprintf_r+0xa54>
 8005768:	9408      	str	r4, [sp, #32]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d100      	bne.n	8005770 <_svfprintf_r+0x3f0>
 800576e:	e3e5      	b.n	8005f3c <_svfprintf_r+0xbbc>
 8005770:	2b02      	cmp	r3, #2
 8005772:	d000      	beq.n	8005776 <_svfprintf_r+0x3f6>
 8005774:	e362      	b.n	8005e3c <_svfprintf_r+0xabc>
 8005776:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005778:	200f      	movs	r0, #15
 800577a:	46a1      	mov	r9, r4
 800577c:	46b4      	mov	ip, r6
 800577e:	ab32      	add	r3, sp, #200	; 0xc8
 8005780:	0019      	movs	r1, r3
 8005782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005786:	0004      	movs	r4, r0
 8005788:	464d      	mov	r5, r9
 800578a:	4014      	ands	r4, r2
 800578c:	5d2c      	ldrb	r4, [r5, r4]
 800578e:	071e      	lsls	r6, r3, #28
 8005790:	0915      	lsrs	r5, r2, #4
 8005792:	3901      	subs	r1, #1
 8005794:	432e      	orrs	r6, r5
 8005796:	700c      	strb	r4, [r1, #0]
 8005798:	091c      	lsrs	r4, r3, #4
 800579a:	0023      	movs	r3, r4
 800579c:	0034      	movs	r4, r6
 800579e:	0032      	movs	r2, r6
 80057a0:	431c      	orrs	r4, r3
 80057a2:	d1f0      	bne.n	8005786 <_svfprintf_r+0x406>
 80057a4:	920c      	str	r2, [sp, #48]	; 0x30
 80057a6:	930d      	str	r3, [sp, #52]	; 0x34
 80057a8:	ab32      	add	r3, sp, #200	; 0xc8
 80057aa:	1a5b      	subs	r3, r3, r1
 80057ac:	9111      	str	r1, [sp, #68]	; 0x44
 80057ae:	4666      	mov	r6, ip
 80057b0:	930e      	str	r3, [sp, #56]	; 0x38
 80057b2:	e6f5      	b.n	80055a0 <_svfprintf_r+0x220>
 80057b4:	08009560 	.word	0x08009560
 80057b8:	08009720 	.word	0x08009720
 80057bc:	7fefffff 	.word	0x7fefffff
 80057c0:	080096d0 	.word	0x080096d0
 80057c4:	9312      	str	r3, [sp, #72]	; 0x48
 80057c6:	2310      	movs	r3, #16
 80057c8:	431c      	orrs	r4, r3
 80057ca:	468b      	mov	fp, r1
 80057cc:	06a3      	lsls	r3, r4, #26
 80057ce:	d500      	bpl.n	80057d2 <_svfprintf_r+0x452>
 80057d0:	e111      	b.n	80059f6 <_svfprintf_r+0x676>
 80057d2:	06e3      	lsls	r3, r4, #27
 80057d4:	d501      	bpl.n	80057da <_svfprintf_r+0x45a>
 80057d6:	f000 fc31 	bl	800603c <_svfprintf_r+0xcbc>
 80057da:	0663      	lsls	r3, r4, #25
 80057dc:	d401      	bmi.n	80057e2 <_svfprintf_r+0x462>
 80057de:	f000 fc2d 	bl	800603c <_svfprintf_r+0xcbc>
 80057e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e4:	881a      	ldrh	r2, [r3, #0]
 80057e6:	920c      	str	r2, [sp, #48]	; 0x30
 80057e8:	2200      	movs	r2, #0
 80057ea:	3304      	adds	r3, #4
 80057ec:	920d      	str	r2, [sp, #52]	; 0x34
 80057ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80057f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7ad      	b.n	8005752 <_svfprintf_r+0x3d2>
 80057f6:	468b      	mov	fp, r1
 80057f8:	4641      	mov	r1, r8
 80057fa:	9312      	str	r3, [sp, #72]	; 0x48
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d001      	beq.n	8005804 <_svfprintf_r+0x484>
 8005800:	f001 f892 	bl	8006928 <_svfprintf_r+0x15a8>
 8005804:	4bb8      	ldr	r3, [pc, #736]	; (8005ae8 <_svfprintf_r+0x768>)
 8005806:	9317      	str	r3, [sp, #92]	; 0x5c
 8005808:	06a3      	lsls	r3, r4, #26
 800580a:	d500      	bpl.n	800580e <_svfprintf_r+0x48e>
 800580c:	e0ab      	b.n	8005966 <_svfprintf_r+0x5e6>
 800580e:	06e3      	lsls	r3, r4, #27
 8005810:	d501      	bpl.n	8005816 <_svfprintf_r+0x496>
 8005812:	f000 fc07 	bl	8006024 <_svfprintf_r+0xca4>
 8005816:	0663      	lsls	r3, r4, #25
 8005818:	d401      	bmi.n	800581e <_svfprintf_r+0x49e>
 800581a:	f000 fc03 	bl	8006024 <_svfprintf_r+0xca4>
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	920c      	str	r2, [sp, #48]	; 0x30
 8005824:	2200      	movs	r2, #0
 8005826:	3304      	adds	r3, #4
 8005828:	920d      	str	r2, [sp, #52]	; 0x34
 800582a:	930f      	str	r3, [sp, #60]	; 0x3c
 800582c:	07e3      	lsls	r3, r4, #31
 800582e:	d400      	bmi.n	8005832 <_svfprintf_r+0x4b2>
 8005830:	e0a9      	b.n	8005986 <_svfprintf_r+0x606>
 8005832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005836:	000b      	movs	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	001a      	movs	r2, r3
 800583c:	2302      	movs	r3, #2
 800583e:	2a00      	cmp	r2, #0
 8005840:	d100      	bne.n	8005844 <_svfprintf_r+0x4c4>
 8005842:	e786      	b.n	8005752 <_svfprintf_r+0x3d2>
 8005844:	2030      	movs	r0, #48	; 0x30
 8005846:	a91e      	add	r1, sp, #120	; 0x78
 8005848:	7008      	strb	r0, [r1, #0]
 800584a:	2548      	movs	r5, #72	; 0x48
 800584c:	4668      	mov	r0, sp
 800584e:	1940      	adds	r0, r0, r5
 8005850:	7800      	ldrb	r0, [r0, #0]
 8005852:	431c      	orrs	r4, r3
 8005854:	7048      	strb	r0, [r1, #1]
 8005856:	e77c      	b.n	8005752 <_svfprintf_r+0x3d2>
 8005858:	468b      	mov	fp, r1
 800585a:	4641      	mov	r1, r8
 800585c:	2900      	cmp	r1, #0
 800585e:	d001      	beq.n	8005864 <_svfprintf_r+0x4e4>
 8005860:	f001 f866 	bl	8006930 <_svfprintf_r+0x15b0>
 8005864:	06a3      	lsls	r3, r4, #26
 8005866:	d501      	bpl.n	800586c <_svfprintf_r+0x4ec>
 8005868:	f000 fde9 	bl	800643e <_svfprintf_r+0x10be>
 800586c:	06e3      	lsls	r3, r4, #27
 800586e:	d501      	bpl.n	8005874 <_svfprintf_r+0x4f4>
 8005870:	f000 fd9b 	bl	80063aa <_svfprintf_r+0x102a>
 8005874:	0663      	lsls	r3, r4, #25
 8005876:	d401      	bmi.n	800587c <_svfprintf_r+0x4fc>
 8005878:	f000 fd97 	bl	80063aa <_svfprintf_r+0x102a>
 800587c:	4669      	mov	r1, sp
 800587e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005880:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	3304      	adds	r3, #4
 8005886:	9207      	str	r2, [sp, #28]
 8005888:	8011      	strh	r1, [r2, #0]
 800588a:	930f      	str	r3, [sp, #60]	; 0x3c
 800588c:	e5a3      	b.n	80053d6 <_svfprintf_r+0x56>
 800588e:	464b      	mov	r3, r9
 8005890:	431c      	orrs	r4, r3
 8005892:	780b      	ldrb	r3, [r1, #0]
 8005894:	e5d8      	b.n	8005448 <_svfprintf_r+0xc8>
 8005896:	9312      	str	r3, [sp, #72]	; 0x48
 8005898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800589a:	468b      	mov	fp, r1
 800589c:	1d1d      	adds	r5, r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	a916      	add	r1, sp, #88	; 0x58
 80058a2:	001a      	movs	r2, r3
 80058a4:	9311      	str	r3, [sp, #68]	; 0x44
 80058a6:	2300      	movs	r3, #0
 80058a8:	77cb      	strb	r3, [r1, #31]
 80058aa:	2a00      	cmp	r2, #0
 80058ac:	d101      	bne.n	80058b2 <_svfprintf_r+0x532>
 80058ae:	f000 fefb 	bl	80066a8 <_svfprintf_r+0x1328>
 80058b2:	4653      	mov	r3, sl
 80058b4:	3301      	adds	r3, #1
 80058b6:	d101      	bne.n	80058bc <_svfprintf_r+0x53c>
 80058b8:	f000 fe38 	bl	800652c <_svfprintf_r+0x11ac>
 80058bc:	4652      	mov	r2, sl
 80058be:	2100      	movs	r1, #0
 80058c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80058c2:	f002 fccd 	bl	8008260 <memchr>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	d101      	bne.n	80058ce <_svfprintf_r+0x54e>
 80058ca:	f000 ff54 	bl	8006776 <_svfprintf_r+0x13f6>
 80058ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058d0:	1ac3      	subs	r3, r0, r3
 80058d2:	001a      	movs	r2, r3
 80058d4:	930e      	str	r3, [sp, #56]	; 0x38
 80058d6:	43db      	mvns	r3, r3
 80058d8:	17db      	asrs	r3, r3, #31
 80058da:	401a      	ands	r2, r3
 80058dc:	ab16      	add	r3, sp, #88	; 0x58
 80058de:	7fdb      	ldrb	r3, [r3, #31]
 80058e0:	9207      	str	r2, [sp, #28]
 80058e2:	4698      	mov	r8, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	950f      	str	r5, [sp, #60]	; 0x3c
 80058e8:	9408      	str	r4, [sp, #32]
 80058ea:	469a      	mov	sl, r3
 80058ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80058ee:	e65f      	b.n	80055b0 <_svfprintf_r+0x230>
 80058f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058f2:	9312      	str	r3, [sp, #72]	; 0x48
 80058f4:	6813      	ldr	r3, [r2, #0]
 80058f6:	ad28      	add	r5, sp, #160	; 0xa0
 80058f8:	9307      	str	r3, [sp, #28]
 80058fa:	466b      	mov	r3, sp
 80058fc:	7f1b      	ldrb	r3, [r3, #28]
 80058fe:	468b      	mov	fp, r1
 8005900:	702b      	strb	r3, [r5, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	a916      	add	r1, sp, #88	; 0x58
 8005906:	77cb      	strb	r3, [r1, #31]
 8005908:	0013      	movs	r3, r2
 800590a:	3304      	adds	r3, #4
 800590c:	930f      	str	r3, [sp, #60]	; 0x3c
 800590e:	2300      	movs	r3, #0
 8005910:	9408      	str	r4, [sp, #32]
 8005912:	4698      	mov	r8, r3
 8005914:	3301      	adds	r3, #1
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	930e      	str	r3, [sp, #56]	; 0x38
 800591a:	2300      	movs	r3, #0
 800591c:	9511      	str	r5, [sp, #68]	; 0x44
 800591e:	469a      	mov	sl, r3
 8005920:	9313      	str	r3, [sp, #76]	; 0x4c
 8005922:	e64b      	b.n	80055bc <_svfprintf_r+0x23c>
 8005924:	468b      	mov	fp, r1
 8005926:	4641      	mov	r1, r8
 8005928:	9312      	str	r3, [sp, #72]	; 0x48
 800592a:	2900      	cmp	r1, #0
 800592c:	d100      	bne.n	8005930 <_svfprintf_r+0x5b0>
 800592e:	e5f4      	b.n	800551a <_svfprintf_r+0x19a>
 8005930:	ab16      	add	r3, sp, #88	; 0x58
 8005932:	77d8      	strb	r0, [r3, #31]
 8005934:	e5f1      	b.n	800551a <_svfprintf_r+0x19a>
 8005936:	4663      	mov	r3, ip
 8005938:	431c      	orrs	r4, r3
 800593a:	780b      	ldrb	r3, [r1, #0]
 800593c:	e584      	b.n	8005448 <_svfprintf_r+0xc8>
 800593e:	780b      	ldrb	r3, [r1, #0]
 8005940:	2b6c      	cmp	r3, #108	; 0x6c
 8005942:	d101      	bne.n	8005948 <_svfprintf_r+0x5c8>
 8005944:	f000 fd86 	bl	8006454 <_svfprintf_r+0x10d4>
 8005948:	2210      	movs	r2, #16
 800594a:	4314      	orrs	r4, r2
 800594c:	e57c      	b.n	8005448 <_svfprintf_r+0xc8>
 800594e:	468b      	mov	fp, r1
 8005950:	4641      	mov	r1, r8
 8005952:	9312      	str	r3, [sp, #72]	; 0x48
 8005954:	2900      	cmp	r1, #0
 8005956:	d001      	beq.n	800595c <_svfprintf_r+0x5dc>
 8005958:	f000 ffde 	bl	8006918 <_svfprintf_r+0x1598>
 800595c:	4b63      	ldr	r3, [pc, #396]	; (8005aec <_svfprintf_r+0x76c>)
 800595e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005960:	06a3      	lsls	r3, r4, #26
 8005962:	d400      	bmi.n	8005966 <_svfprintf_r+0x5e6>
 8005964:	e753      	b.n	800580e <_svfprintf_r+0x48e>
 8005966:	2207      	movs	r2, #7
 8005968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800596a:	3307      	adds	r3, #7
 800596c:	4393      	bics	r3, r2
 800596e:	3201      	adds	r2, #1
 8005970:	4694      	mov	ip, r2
 8005972:	449c      	add	ip, r3
 8005974:	4662      	mov	r2, ip
 8005976:	920f      	str	r2, [sp, #60]	; 0x3c
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	920c      	str	r2, [sp, #48]	; 0x30
 800597e:	930d      	str	r3, [sp, #52]	; 0x34
 8005980:	07e3      	lsls	r3, r4, #31
 8005982:	d500      	bpl.n	8005986 <_svfprintf_r+0x606>
 8005984:	e755      	b.n	8005832 <_svfprintf_r+0x4b2>
 8005986:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800598a:	0008      	movs	r0, r1
 800598c:	4310      	orrs	r0, r2
 800598e:	2302      	movs	r3, #2
 8005990:	0002      	movs	r2, r0
 8005992:	e6de      	b.n	8005752 <_svfprintf_r+0x3d2>
 8005994:	468b      	mov	fp, r1
 8005996:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005998:	2230      	movs	r2, #48	; 0x30
 800599a:	680b      	ldr	r3, [r1, #0]
 800599c:	930c      	str	r3, [sp, #48]	; 0x30
 800599e:	2300      	movs	r3, #0
 80059a0:	930d      	str	r3, [sp, #52]	; 0x34
 80059a2:	3302      	adds	r3, #2
 80059a4:	431c      	orrs	r4, r3
 80059a6:	ab1e      	add	r3, sp, #120	; 0x78
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	3248      	adds	r2, #72	; 0x48
 80059ac:	705a      	strb	r2, [r3, #1]
 80059ae:	000b      	movs	r3, r1
 80059b0:	3304      	adds	r3, #4
 80059b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80059b4:	4b4d      	ldr	r3, [pc, #308]	; (8005aec <_svfprintf_r+0x76c>)
 80059b6:	9212      	str	r2, [sp, #72]	; 0x48
 80059b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80059ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059bc:	2302      	movs	r3, #2
 80059be:	e6c8      	b.n	8005752 <_svfprintf_r+0x3d2>
 80059c0:	2301      	movs	r3, #1
 80059c2:	431c      	orrs	r4, r3
 80059c4:	780b      	ldrb	r3, [r1, #0]
 80059c6:	e53f      	b.n	8005448 <_svfprintf_r+0xc8>
 80059c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da00      	bge.n	80059d6 <_svfprintf_r+0x656>
 80059d4:	e542      	b.n	800545c <_svfprintf_r+0xdc>
 80059d6:	780b      	ldrb	r3, [r1, #0]
 80059d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80059da:	e535      	b.n	8005448 <_svfprintf_r+0xc8>
 80059dc:	780b      	ldrb	r3, [r1, #0]
 80059de:	2800      	cmp	r0, #0
 80059e0:	d000      	beq.n	80059e4 <_svfprintf_r+0x664>
 80059e2:	e531      	b.n	8005448 <_svfprintf_r+0xc8>
 80059e4:	2201      	movs	r2, #1
 80059e6:	3020      	adds	r0, #32
 80059e8:	4690      	mov	r8, r2
 80059ea:	e52d      	b.n	8005448 <_svfprintf_r+0xc8>
 80059ec:	468b      	mov	fp, r1
 80059ee:	9312      	str	r3, [sp, #72]	; 0x48
 80059f0:	06a3      	lsls	r3, r4, #26
 80059f2:	d400      	bmi.n	80059f6 <_svfprintf_r+0x676>
 80059f4:	e6ed      	b.n	80057d2 <_svfprintf_r+0x452>
 80059f6:	2207      	movs	r2, #7
 80059f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059fa:	3307      	adds	r3, #7
 80059fc:	4393      	bics	r3, r2
 80059fe:	3201      	adds	r2, #1
 8005a00:	4694      	mov	ip, r2
 8005a02:	449c      	add	ip, r3
 8005a04:	4662      	mov	r2, ip
 8005a06:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	0011      	movs	r1, r2
 8005a0e:	001a      	movs	r2, r3
 8005a10:	0008      	movs	r0, r1
 8005a12:	4310      	orrs	r0, r2
 8005a14:	910c      	str	r1, [sp, #48]	; 0x30
 8005a16:	920d      	str	r2, [sp, #52]	; 0x34
 8005a18:	2301      	movs	r3, #1
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	e699      	b.n	8005752 <_svfprintf_r+0x3d2>
 8005a1e:	468b      	mov	fp, r1
 8005a20:	9312      	str	r3, [sp, #72]	; 0x48
 8005a22:	06a3      	lsls	r3, r4, #26
 8005a24:	d400      	bmi.n	8005a28 <_svfprintf_r+0x6a8>
 8005a26:	e683      	b.n	8005730 <_svfprintf_r+0x3b0>
 8005a28:	2207      	movs	r2, #7
 8005a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	4393      	bics	r3, r2
 8005a30:	3201      	adds	r2, #1
 8005a32:	4694      	mov	ip, r2
 8005a34:	449c      	add	ip, r3
 8005a36:	4662      	mov	r2, ip
 8005a38:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0011      	movs	r1, r2
 8005a40:	001a      	movs	r2, r3
 8005a42:	0008      	movs	r0, r1
 8005a44:	4310      	orrs	r0, r2
 8005a46:	910c      	str	r1, [sp, #48]	; 0x30
 8005a48:	920d      	str	r2, [sp, #52]	; 0x34
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	0002      	movs	r2, r0
 8005a4e:	e680      	b.n	8005752 <_svfprintf_r+0x3d2>
 8005a50:	468b      	mov	fp, r1
 8005a52:	4641      	mov	r1, r8
 8005a54:	9312      	str	r3, [sp, #72]	; 0x48
 8005a56:	2900      	cmp	r1, #0
 8005a58:	d001      	beq.n	8005a5e <_svfprintf_r+0x6de>
 8005a5a:	f000 ff6d 	bl	8006938 <_svfprintf_r+0x15b8>
 8005a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d100      	bne.n	8005a66 <_svfprintf_r+0x6e6>
 8005a64:	e50b      	b.n	800547e <_svfprintf_r+0xfe>
 8005a66:	ad28      	add	r5, sp, #160	; 0xa0
 8005a68:	702b      	strb	r3, [r5, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	aa16      	add	r2, sp, #88	; 0x58
 8005a6e:	77d3      	strb	r3, [r2, #31]
 8005a70:	9408      	str	r4, [sp, #32]
 8005a72:	e74e      	b.n	8005912 <_svfprintf_r+0x592>
 8005a74:	68bc      	ldr	r4, [r7, #8]
 8005a76:	4643      	mov	r3, r8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00f      	beq.n	8005a9c <_svfprintf_r+0x71c>
 8005a7c:	aa16      	add	r2, sp, #88	; 0x58
 8005a7e:	231f      	movs	r3, #31
 8005a80:	4694      	mov	ip, r2
 8005a82:	4463      	add	r3, ip
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	2301      	movs	r3, #1
 8005a88:	6073      	str	r3, [r6, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3401      	adds	r4, #1
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60bc      	str	r4, [r7, #8]
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	2b07      	cmp	r3, #7
 8005a96:	dd00      	ble.n	8005a9a <_svfprintf_r+0x71a>
 8005a98:	e1b3      	b.n	8005e02 <_svfprintf_r+0xa82>
 8005a9a:	3608      	adds	r6, #8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00c      	beq.n	8005abc <_svfprintf_r+0x73c>
 8005aa2:	ab1e      	add	r3, sp, #120	; 0x78
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	6073      	str	r3, [r6, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3402      	adds	r4, #2
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60bc      	str	r4, [r7, #8]
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	2b07      	cmp	r3, #7
 8005ab6:	dd00      	ble.n	8005aba <_svfprintf_r+0x73a>
 8005ab8:	e1af      	b.n	8005e1a <_svfprintf_r+0xa9a>
 8005aba:	3608      	adds	r6, #8
 8005abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d100      	bne.n	8005ac4 <_svfprintf_r+0x744>
 8005ac2:	e120      	b.n	8005d06 <_svfprintf_r+0x986>
 8005ac4:	4653      	mov	r3, sl
 8005ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ac8:	1a9d      	subs	r5, r3, r2
 8005aca:	2d00      	cmp	r5, #0
 8005acc:	dd3c      	ble.n	8005b48 <_svfprintf_r+0x7c8>
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <_svfprintf_r+0x770>)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4691      	mov	r9, r2
 8005ad4:	2d10      	cmp	r5, #16
 8005ad6:	dd2c      	ble.n	8005b32 <_svfprintf_r+0x7b2>
 8005ad8:	2210      	movs	r2, #16
 8005ada:	0021      	movs	r1, r4
 8005adc:	4692      	mov	sl, r2
 8005ade:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005ae0:	0032      	movs	r2, r6
 8005ae2:	002e      	movs	r6, r5
 8005ae4:	464d      	mov	r5, r9
 8005ae6:	e009      	b.n	8005afc <_svfprintf_r+0x77c>
 8005ae8:	080096e0 	.word	0x080096e0
 8005aec:	080096f4 	.word	0x080096f4
 8005af0:	08009730 	.word	0x08009730
 8005af4:	3e10      	subs	r6, #16
 8005af6:	3208      	adds	r2, #8
 8005af8:	2e10      	cmp	r6, #16
 8005afa:	dd16      	ble.n	8005b2a <_svfprintf_r+0x7aa>
 8005afc:	4650      	mov	r0, sl
 8005afe:	3110      	adds	r1, #16
 8005b00:	3301      	adds	r3, #1
 8005b02:	6015      	str	r5, [r2, #0]
 8005b04:	6050      	str	r0, [r2, #4]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	2b07      	cmp	r3, #7
 8005b0c:	ddf2      	ble.n	8005af4 <_svfprintf_r+0x774>
 8005b0e:	003a      	movs	r2, r7
 8005b10:	9906      	ldr	r1, [sp, #24]
 8005b12:	0020      	movs	r0, r4
 8005b14:	f002 ffb4 	bl	8008a80 <__ssprint_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d000      	beq.n	8005b1e <_svfprintf_r+0x79e>
 8005b1c:	e4b7      	b.n	800548e <_svfprintf_r+0x10e>
 8005b1e:	3e10      	subs	r6, #16
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	aa32      	add	r2, sp, #200	; 0xc8
 8005b26:	2e10      	cmp	r6, #16
 8005b28:	dce8      	bgt.n	8005afc <_svfprintf_r+0x77c>
 8005b2a:	46a9      	mov	r9, r5
 8005b2c:	000c      	movs	r4, r1
 8005b2e:	0035      	movs	r5, r6
 8005b30:	0016      	movs	r6, r2
 8005b32:	464a      	mov	r2, r9
 8005b34:	1964      	adds	r4, r4, r5
 8005b36:	3301      	adds	r3, #1
 8005b38:	6032      	str	r2, [r6, #0]
 8005b3a:	6075      	str	r5, [r6, #4]
 8005b3c:	60bc      	str	r4, [r7, #8]
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	dd00      	ble.n	8005b46 <_svfprintf_r+0x7c6>
 8005b44:	e151      	b.n	8005dea <_svfprintf_r+0xa6a>
 8005b46:	3608      	adds	r6, #8
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	05db      	lsls	r3, r3, #23
 8005b4c:	d500      	bpl.n	8005b50 <_svfprintf_r+0x7d0>
 8005b4e:	e0b6      	b.n	8005cbe <_svfprintf_r+0x93e>
 8005b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b52:	6033      	str	r3, [r6, #0]
 8005b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b56:	469c      	mov	ip, r3
 8005b58:	6073      	str	r3, [r6, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4464      	add	r4, ip
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60bc      	str	r4, [r7, #8]
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	2b07      	cmp	r3, #7
 8005b66:	dd00      	ble.n	8005b6a <_svfprintf_r+0x7ea>
 8005b68:	e09d      	b.n	8005ca6 <_svfprintf_r+0x926>
 8005b6a:	3608      	adds	r6, #8
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	075b      	lsls	r3, r3, #29
 8005b70:	d541      	bpl.n	8005bf6 <_svfprintf_r+0x876>
 8005b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b74:	9a07      	ldr	r2, [sp, #28]
 8005b76:	1a9d      	subs	r5, r3, r2
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	dd3c      	ble.n	8005bf6 <_svfprintf_r+0x876>
 8005b7c:	4ac4      	ldr	r2, [pc, #784]	; (8005e90 <_svfprintf_r+0xb10>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4690      	mov	r8, r2
 8005b82:	2d10      	cmp	r5, #16
 8005b84:	dd26      	ble.n	8005bd4 <_svfprintf_r+0x854>
 8005b86:	2210      	movs	r2, #16
 8005b88:	0021      	movs	r1, r4
 8005b8a:	4691      	mov	r9, r2
 8005b8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005b8e:	0032      	movs	r2, r6
 8005b90:	002e      	movs	r6, r5
 8005b92:	9d06      	ldr	r5, [sp, #24]
 8005b94:	e003      	b.n	8005b9e <_svfprintf_r+0x81e>
 8005b96:	3e10      	subs	r6, #16
 8005b98:	3208      	adds	r2, #8
 8005b9a:	2e10      	cmp	r6, #16
 8005b9c:	dd17      	ble.n	8005bce <_svfprintf_r+0x84e>
 8005b9e:	48bc      	ldr	r0, [pc, #752]	; (8005e90 <_svfprintf_r+0xb10>)
 8005ba0:	3110      	adds	r1, #16
 8005ba2:	6010      	str	r0, [r2, #0]
 8005ba4:	4648      	mov	r0, r9
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	6050      	str	r0, [r2, #4]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	ddf1      	ble.n	8005b96 <_svfprintf_r+0x816>
 8005bb2:	003a      	movs	r2, r7
 8005bb4:	0029      	movs	r1, r5
 8005bb6:	0020      	movs	r0, r4
 8005bb8:	f002 ff62 	bl	8008a80 <__ssprint_r>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d000      	beq.n	8005bc2 <_svfprintf_r+0x842>
 8005bc0:	e465      	b.n	800548e <_svfprintf_r+0x10e>
 8005bc2:	3e10      	subs	r6, #16
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	aa32      	add	r2, sp, #200	; 0xc8
 8005bca:	2e10      	cmp	r6, #16
 8005bcc:	dce7      	bgt.n	8005b9e <_svfprintf_r+0x81e>
 8005bce:	0035      	movs	r5, r6
 8005bd0:	000c      	movs	r4, r1
 8005bd2:	0016      	movs	r6, r2
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	1964      	adds	r4, r4, r5
 8005bd8:	3301      	adds	r3, #1
 8005bda:	c624      	stmia	r6!, {r2, r5}
 8005bdc:	60bc      	str	r4, [r7, #8]
 8005bde:	607b      	str	r3, [r7, #4]
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	dd08      	ble.n	8005bf6 <_svfprintf_r+0x876>
 8005be4:	003a      	movs	r2, r7
 8005be6:	9906      	ldr	r1, [sp, #24]
 8005be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bea:	f002 ff49 	bl	8008a80 <__ssprint_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d000      	beq.n	8005bf4 <_svfprintf_r+0x874>
 8005bf2:	e44c      	b.n	800548e <_svfprintf_r+0x10e>
 8005bf4:	68bc      	ldr	r4, [r7, #8]
 8005bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf8:	9907      	ldr	r1, [sp, #28]
 8005bfa:	428b      	cmp	r3, r1
 8005bfc:	da00      	bge.n	8005c00 <_svfprintf_r+0x880>
 8005bfe:	000b      	movs	r3, r1
 8005c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c02:	4694      	mov	ip, r2
 8005c04:	449c      	add	ip, r3
 8005c06:	4663      	mov	r3, ip
 8005c08:	930a      	str	r3, [sp, #40]	; 0x28
 8005c0a:	2c00      	cmp	r4, #0
 8005c0c:	d000      	beq.n	8005c10 <_svfprintf_r+0x890>
 8005c0e:	e0d6      	b.n	8005dbe <_svfprintf_r+0xa3e>
 8005c10:	2300      	movs	r3, #0
 8005c12:	ae32      	add	r6, sp, #200	; 0xc8
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	f7ff fbde 	bl	80053d6 <_svfprintf_r+0x56>
 8005c1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	dc00      	bgt.n	8005c22 <_svfprintf_r+0x8a2>
 8005c20:	e0ae      	b.n	8005d80 <_svfprintf_r+0xa00>
 8005c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c24:	3401      	adds	r4, #1
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6073      	str	r3, [r6, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60bc      	str	r4, [r7, #8]
 8005c30:	3301      	adds	r3, #1
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	2b07      	cmp	r3, #7
 8005c36:	dd00      	ble.n	8005c3a <_svfprintf_r+0x8ba>
 8005c38:	e2df      	b.n	80061fa <_svfprintf_r+0xe7a>
 8005c3a:	3608      	adds	r6, #8
 8005c3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c3e:	3301      	adds	r3, #1
 8005c40:	6032      	str	r2, [r6, #0]
 8005c42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c44:	4698      	mov	r8, r3
 8005c46:	4694      	mov	ip, r2
 8005c48:	4464      	add	r4, ip
 8005c4a:	6072      	str	r2, [r6, #4]
 8005c4c:	60bc      	str	r4, [r7, #8]
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	dd00      	ble.n	8005c56 <_svfprintf_r+0x8d6>
 8005c54:	e2de      	b.n	8006214 <_svfprintf_r+0xe94>
 8005c56:	3608      	adds	r6, #8
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005c5e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005c60:	f7fa fc56 	bl	8000510 <__aeabi_dcmpeq>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d000      	beq.n	8005c6a <_svfprintf_r+0x8ea>
 8005c68:	e1a4      	b.n	8005fb4 <_svfprintf_r+0xc34>
 8005c6a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c6e:	3501      	adds	r5, #1
 8005c70:	3b01      	subs	r3, #1
 8005c72:	6035      	str	r5, [r6, #0]
 8005c74:	6073      	str	r3, [r6, #4]
 8005c76:	18e4      	adds	r4, r4, r3
 8005c78:	2301      	movs	r3, #1
 8005c7a:	469c      	mov	ip, r3
 8005c7c:	44e0      	add	r8, ip
 8005c7e:	4643      	mov	r3, r8
 8005c80:	60bc      	str	r4, [r7, #8]
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	dd00      	ble.n	8005c8a <_svfprintf_r+0x90a>
 8005c88:	e08b      	b.n	8005da2 <_svfprintf_r+0xa22>
 8005c8a:	3608      	adds	r6, #8
 8005c8c:	ab21      	add	r3, sp, #132	; 0x84
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005c92:	469c      	mov	ip, r3
 8005c94:	6073      	str	r3, [r6, #4]
 8005c96:	4643      	mov	r3, r8
 8005c98:	4464      	add	r4, ip
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60bc      	str	r4, [r7, #8]
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	dc00      	bgt.n	8005ca6 <_svfprintf_r+0x926>
 8005ca4:	e761      	b.n	8005b6a <_svfprintf_r+0x7ea>
 8005ca6:	003a      	movs	r2, r7
 8005ca8:	9906      	ldr	r1, [sp, #24]
 8005caa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cac:	f002 fee8 	bl	8008a80 <__ssprint_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <_svfprintf_r+0x938>
 8005cb4:	f7ff fbeb 	bl	800548e <_svfprintf_r+0x10e>
 8005cb8:	68bc      	ldr	r4, [r7, #8]
 8005cba:	ae32      	add	r6, sp, #200	; 0xc8
 8005cbc:	e756      	b.n	8005b6c <_svfprintf_r+0x7ec>
 8005cbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cc0:	2b65      	cmp	r3, #101	; 0x65
 8005cc2:	ddaa      	ble.n	8005c1a <_svfprintf_r+0x89a>
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005cca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005ccc:	f7fa fc20 	bl	8000510 <__aeabi_dcmpeq>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d100      	bne.n	8005cd6 <_svfprintf_r+0x956>
 8005cd4:	e0e2      	b.n	8005e9c <_svfprintf_r+0xb1c>
 8005cd6:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <_svfprintf_r+0xb14>)
 8005cd8:	3401      	adds	r4, #1
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6073      	str	r3, [r6, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60bc      	str	r4, [r7, #8]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	dd00      	ble.n	8005cee <_svfprintf_r+0x96e>
 8005cec:	e366      	b.n	80063bc <_svfprintf_r+0x103c>
 8005cee:	3608      	adds	r6, #8
 8005cf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	da00      	bge.n	8005cfa <_svfprintf_r+0x97a>
 8005cf8:	e1a4      	b.n	8006044 <_svfprintf_r+0xcc4>
 8005cfa:	9b08      	ldr	r3, [sp, #32]
 8005cfc:	07db      	lsls	r3, r3, #31
 8005cfe:	d500      	bpl.n	8005d02 <_svfprintf_r+0x982>
 8005d00:	e1a0      	b.n	8006044 <_svfprintf_r+0xcc4>
 8005d02:	68bc      	ldr	r4, [r7, #8]
 8005d04:	e732      	b.n	8005b6c <_svfprintf_r+0x7ec>
 8005d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d08:	9a07      	ldr	r2, [sp, #28]
 8005d0a:	1a9d      	subs	r5, r3, r2
 8005d0c:	2d00      	cmp	r5, #0
 8005d0e:	dc00      	bgt.n	8005d12 <_svfprintf_r+0x992>
 8005d10:	e6d8      	b.n	8005ac4 <_svfprintf_r+0x744>
 8005d12:	4a61      	ldr	r2, [pc, #388]	; (8005e98 <_svfprintf_r+0xb18>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4691      	mov	r9, r2
 8005d18:	2d10      	cmp	r5, #16
 8005d1a:	dd25      	ble.n	8005d68 <_svfprintf_r+0x9e8>
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	0021      	movs	r1, r4
 8005d20:	4690      	mov	r8, r2
 8005d22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005d24:	0032      	movs	r2, r6
 8005d26:	464e      	mov	r6, r9
 8005d28:	e003      	b.n	8005d32 <_svfprintf_r+0x9b2>
 8005d2a:	3d10      	subs	r5, #16
 8005d2c:	3208      	adds	r2, #8
 8005d2e:	2d10      	cmp	r5, #16
 8005d30:	dd17      	ble.n	8005d62 <_svfprintf_r+0x9e2>
 8005d32:	4640      	mov	r0, r8
 8005d34:	3110      	adds	r1, #16
 8005d36:	3301      	adds	r3, #1
 8005d38:	6016      	str	r6, [r2, #0]
 8005d3a:	6050      	str	r0, [r2, #4]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	2b07      	cmp	r3, #7
 8005d42:	ddf2      	ble.n	8005d2a <_svfprintf_r+0x9aa>
 8005d44:	003a      	movs	r2, r7
 8005d46:	9906      	ldr	r1, [sp, #24]
 8005d48:	0020      	movs	r0, r4
 8005d4a:	f002 fe99 	bl	8008a80 <__ssprint_r>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d001      	beq.n	8005d56 <_svfprintf_r+0x9d6>
 8005d52:	f7ff fb9c 	bl	800548e <_svfprintf_r+0x10e>
 8005d56:	3d10      	subs	r5, #16
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	aa32      	add	r2, sp, #200	; 0xc8
 8005d5e:	2d10      	cmp	r5, #16
 8005d60:	dce7      	bgt.n	8005d32 <_svfprintf_r+0x9b2>
 8005d62:	46b1      	mov	r9, r6
 8005d64:	000c      	movs	r4, r1
 8005d66:	0016      	movs	r6, r2
 8005d68:	464a      	mov	r2, r9
 8005d6a:	1964      	adds	r4, r4, r5
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	6032      	str	r2, [r6, #0]
 8005d70:	6075      	str	r5, [r6, #4]
 8005d72:	60bc      	str	r4, [r7, #8]
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	2b07      	cmp	r3, #7
 8005d78:	dd00      	ble.n	8005d7c <_svfprintf_r+0x9fc>
 8005d7a:	e27e      	b.n	800627a <_svfprintf_r+0xefa>
 8005d7c:	3608      	adds	r6, #8
 8005d7e:	e6a1      	b.n	8005ac4 <_svfprintf_r+0x744>
 8005d80:	2301      	movs	r3, #1
 8005d82:	9a08      	ldr	r2, [sp, #32]
 8005d84:	4213      	tst	r3, r2
 8005d86:	d000      	beq.n	8005d8a <_svfprintf_r+0xa0a>
 8005d88:	e74b      	b.n	8005c22 <_svfprintf_r+0x8a2>
 8005d8a:	6073      	str	r3, [r6, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d90:	3301      	adds	r3, #1
 8005d92:	3401      	adds	r4, #1
 8005d94:	6032      	str	r2, [r6, #0]
 8005d96:	60bc      	str	r4, [r7, #8]
 8005d98:	4698      	mov	r8, r3
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	2b07      	cmp	r3, #7
 8005d9e:	dc00      	bgt.n	8005da2 <_svfprintf_r+0xa22>
 8005da0:	e773      	b.n	8005c8a <_svfprintf_r+0x90a>
 8005da2:	003a      	movs	r2, r7
 8005da4:	9906      	ldr	r1, [sp, #24]
 8005da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005da8:	f002 fe6a 	bl	8008a80 <__ssprint_r>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d001      	beq.n	8005db4 <_svfprintf_r+0xa34>
 8005db0:	f7ff fb6d 	bl	800548e <_svfprintf_r+0x10e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68bc      	ldr	r4, [r7, #8]
 8005db8:	4698      	mov	r8, r3
 8005dba:	ae32      	add	r6, sp, #200	; 0xc8
 8005dbc:	e766      	b.n	8005c8c <_svfprintf_r+0x90c>
 8005dbe:	003a      	movs	r2, r7
 8005dc0:	9906      	ldr	r1, [sp, #24]
 8005dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc4:	f002 fe5c 	bl	8008a80 <__ssprint_r>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d100      	bne.n	8005dce <_svfprintf_r+0xa4e>
 8005dcc:	e720      	b.n	8005c10 <_svfprintf_r+0x890>
 8005dce:	f7ff fb5e 	bl	800548e <_svfprintf_r+0x10e>
 8005dd2:	9c08      	ldr	r4, [sp, #32]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d100      	bne.n	8005dda <_svfprintf_r+0xa5a>
 8005dd8:	e184      	b.n	80060e4 <_svfprintf_r+0xd64>
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d129      	bne.n	8005e32 <_svfprintf_r+0xab2>
 8005dde:	9408      	str	r4, [sp, #32]
 8005de0:	2300      	movs	r3, #0
 8005de2:	2400      	movs	r4, #0
 8005de4:	930c      	str	r3, [sp, #48]	; 0x30
 8005de6:	940d      	str	r4, [sp, #52]	; 0x34
 8005de8:	e4c5      	b.n	8005776 <_svfprintf_r+0x3f6>
 8005dea:	003a      	movs	r2, r7
 8005dec:	9906      	ldr	r1, [sp, #24]
 8005dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df0:	f002 fe46 	bl	8008a80 <__ssprint_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d001      	beq.n	8005dfc <_svfprintf_r+0xa7c>
 8005df8:	f7ff fb49 	bl	800548e <_svfprintf_r+0x10e>
 8005dfc:	68bc      	ldr	r4, [r7, #8]
 8005dfe:	ae32      	add	r6, sp, #200	; 0xc8
 8005e00:	e6a2      	b.n	8005b48 <_svfprintf_r+0x7c8>
 8005e02:	003a      	movs	r2, r7
 8005e04:	9906      	ldr	r1, [sp, #24]
 8005e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e08:	f002 fe3a 	bl	8008a80 <__ssprint_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d001      	beq.n	8005e14 <_svfprintf_r+0xa94>
 8005e10:	f7ff fb3d 	bl	800548e <_svfprintf_r+0x10e>
 8005e14:	68bc      	ldr	r4, [r7, #8]
 8005e16:	ae32      	add	r6, sp, #200	; 0xc8
 8005e18:	e640      	b.n	8005a9c <_svfprintf_r+0x71c>
 8005e1a:	003a      	movs	r2, r7
 8005e1c:	9906      	ldr	r1, [sp, #24]
 8005e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e20:	f002 fe2e 	bl	8008a80 <__ssprint_r>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d001      	beq.n	8005e2c <_svfprintf_r+0xaac>
 8005e28:	f7ff fb31 	bl	800548e <_svfprintf_r+0x10e>
 8005e2c:	68bc      	ldr	r4, [r7, #8]
 8005e2e:	ae32      	add	r6, sp, #200	; 0xc8
 8005e30:	e644      	b.n	8005abc <_svfprintf_r+0x73c>
 8005e32:	9408      	str	r4, [sp, #32]
 8005e34:	2300      	movs	r3, #0
 8005e36:	2400      	movs	r4, #0
 8005e38:	930c      	str	r3, [sp, #48]	; 0x30
 8005e3a:	940d      	str	r4, [sp, #52]	; 0x34
 8005e3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e40:	465b      	mov	r3, fp
 8005e42:	aa32      	add	r2, sp, #200	; 0xc8
 8005e44:	9307      	str	r3, [sp, #28]
 8005e46:	4691      	mov	r9, r2
 8005e48:	46b3      	mov	fp, r6
 8005e4a:	e000      	b.n	8005e4e <_svfprintf_r+0xace>
 8005e4c:	46a1      	mov	r9, r4
 8005e4e:	074a      	lsls	r2, r1, #29
 8005e50:	4694      	mov	ip, r2
 8005e52:	464b      	mov	r3, r9
 8005e54:	4665      	mov	r5, ip
 8005e56:	1e5c      	subs	r4, r3, #1
 8005e58:	08c6      	lsrs	r6, r0, #3
 8005e5a:	2307      	movs	r3, #7
 8005e5c:	08ca      	lsrs	r2, r1, #3
 8005e5e:	4335      	orrs	r5, r6
 8005e60:	0011      	movs	r1, r2
 8005e62:	002a      	movs	r2, r5
 8005e64:	4003      	ands	r3, r0
 8005e66:	3330      	adds	r3, #48	; 0x30
 8005e68:	7023      	strb	r3, [r4, #0]
 8005e6a:	0028      	movs	r0, r5
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	d1ed      	bne.n	8005e4c <_svfprintf_r+0xacc>
 8005e70:	900c      	str	r0, [sp, #48]	; 0x30
 8005e72:	910d      	str	r1, [sp, #52]	; 0x34
 8005e74:	9907      	ldr	r1, [sp, #28]
 8005e76:	465e      	mov	r6, fp
 8005e78:	468b      	mov	fp, r1
 8005e7a:	9908      	ldr	r1, [sp, #32]
 8005e7c:	464a      	mov	r2, r9
 8005e7e:	9411      	str	r4, [sp, #68]	; 0x44
 8005e80:	07c9      	lsls	r1, r1, #31
 8005e82:	d500      	bpl.n	8005e86 <_svfprintf_r+0xb06>
 8005e84:	e13d      	b.n	8006102 <_svfprintf_r+0xd82>
 8005e86:	ab32      	add	r3, sp, #200	; 0xc8
 8005e88:	1b1b      	subs	r3, r3, r4
 8005e8a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e8c:	f7ff fb88 	bl	80055a0 <_svfprintf_r+0x220>
 8005e90:	08009720 	.word	0x08009720
 8005e94:	08009710 	.word	0x08009710
 8005e98:	08009730 	.word	0x08009730
 8005e9c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	dc00      	bgt.n	8005ea4 <_svfprintf_r+0xb24>
 8005ea2:	e296      	b.n	80063d2 <_svfprintf_r+0x1052>
 8005ea4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ea6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	4690      	mov	r8, r2
 8005eac:	428b      	cmp	r3, r1
 8005eae:	dd00      	ble.n	8005eb2 <_svfprintf_r+0xb32>
 8005eb0:	4688      	mov	r8, r1
 8005eb2:	4643      	mov	r3, r8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd0c      	ble.n	8005ed2 <_svfprintf_r+0xb52>
 8005eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eba:	4444      	add	r4, r8
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	4643      	mov	r3, r8
 8005ec0:	6073      	str	r3, [r6, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60bc      	str	r4, [r7, #8]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	dd00      	ble.n	8005ed0 <_svfprintf_r+0xb50>
 8005ece:	e3b7      	b.n	8006640 <_svfprintf_r+0x12c0>
 8005ed0:	3608      	adds	r6, #8
 8005ed2:	4643      	mov	r3, r8
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	4642      	mov	r2, r8
 8005ed8:	17db      	asrs	r3, r3, #31
 8005eda:	4013      	ands	r3, r2
 8005edc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	4698      	mov	r8, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dc00      	bgt.n	8005ee8 <_svfprintf_r+0xb68>
 8005ee6:	e128      	b.n	800613a <_svfprintf_r+0xdba>
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	dc01      	bgt.n	8005ef0 <_svfprintf_r+0xb70>
 8005eec:	f000 fce7 	bl	80068be <_svfprintf_r+0x153e>
 8005ef0:	4acf      	ldr	r2, [pc, #828]	; (8006230 <_svfprintf_r+0xeb0>)
 8005ef2:	0021      	movs	r1, r4
 8005ef4:	4691      	mov	r9, r2
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4692      	mov	sl, r2
 8005efc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005efe:	0032      	movs	r2, r6
 8005f00:	464c      	mov	r4, r9
 8005f02:	4646      	mov	r6, r8
 8005f04:	e004      	b.n	8005f10 <_svfprintf_r+0xb90>
 8005f06:	3208      	adds	r2, #8
 8005f08:	3e10      	subs	r6, #16
 8005f0a:	2e10      	cmp	r6, #16
 8005f0c:	dc00      	bgt.n	8005f10 <_svfprintf_r+0xb90>
 8005f0e:	e104      	b.n	800611a <_svfprintf_r+0xd9a>
 8005f10:	4650      	mov	r0, sl
 8005f12:	3110      	adds	r1, #16
 8005f14:	3301      	adds	r3, #1
 8005f16:	6014      	str	r4, [r2, #0]
 8005f18:	6050      	str	r0, [r2, #4]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	ddf1      	ble.n	8005f06 <_svfprintf_r+0xb86>
 8005f22:	003a      	movs	r2, r7
 8005f24:	9906      	ldr	r1, [sp, #24]
 8005f26:	0028      	movs	r0, r5
 8005f28:	f002 fdaa 	bl	8008a80 <__ssprint_r>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d001      	beq.n	8005f34 <_svfprintf_r+0xbb4>
 8005f30:	f7ff faad 	bl	800548e <_svfprintf_r+0x10e>
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	aa32      	add	r2, sp, #200	; 0xc8
 8005f3a:	e7e5      	b.n	8005f08 <_svfprintf_r+0xb88>
 8005f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d100      	bne.n	8005f44 <_svfprintf_r+0xbc4>
 8005f42:	e0ca      	b.n	80060da <_svfprintf_r+0xd5a>
 8005f44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005f46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005f48:	ab32      	add	r3, sp, #200	; 0xc8
 8005f4a:	46b1      	mov	r9, r6
 8005f4c:	001e      	movs	r6, r3
 8005f4e:	0020      	movs	r0, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	220a      	movs	r2, #10
 8005f54:	2300      	movs	r3, #0
 8005f56:	f7fa fb0b 	bl	8000570 <__aeabi_uldivmod>
 8005f5a:	3e01      	subs	r6, #1
 8005f5c:	3230      	adds	r2, #48	; 0x30
 8005f5e:	7032      	strb	r2, [r6, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	0020      	movs	r0, r4
 8005f64:	0029      	movs	r1, r5
 8005f66:	220a      	movs	r2, #10
 8005f68:	f7fa fb02 	bl	8000570 <__aeabi_uldivmod>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	0004      	movs	r4, r0
 8005f70:	000d      	movs	r5, r1
 8005f72:	430b      	orrs	r3, r1
 8005f74:	d1eb      	bne.n	8005f4e <_svfprintf_r+0xbce>
 8005f76:	0032      	movs	r2, r6
 8005f78:	ab32      	add	r3, sp, #200	; 0xc8
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	9611      	str	r6, [sp, #68]	; 0x44
 8005f7e:	940c      	str	r4, [sp, #48]	; 0x30
 8005f80:	950d      	str	r5, [sp, #52]	; 0x34
 8005f82:	464e      	mov	r6, r9
 8005f84:	930e      	str	r3, [sp, #56]	; 0x38
 8005f86:	f7ff fb0b 	bl	80055a0 <_svfprintf_r+0x220>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f8e:	ab32      	add	r3, sp, #200	; 0xc8
 8005f90:	9311      	str	r3, [sp, #68]	; 0x44
 8005f92:	f7ff fb05 	bl	80055a0 <_svfprintf_r+0x220>
 8005f96:	003a      	movs	r2, r7
 8005f98:	9906      	ldr	r1, [sp, #24]
 8005f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f9c:	f002 fd70 	bl	8008a80 <__ssprint_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d001      	beq.n	8005fa8 <_svfprintf_r+0xc28>
 8005fa4:	f7ff fa73 	bl	800548e <_svfprintf_r+0x10e>
 8005fa8:	ab16      	add	r3, sp, #88	; 0x58
 8005faa:	7fdb      	ldrb	r3, [r3, #31]
 8005fac:	68bc      	ldr	r4, [r7, #8]
 8005fae:	4698      	mov	r8, r3
 8005fb0:	ae32      	add	r6, sp, #200	; 0xc8
 8005fb2:	e560      	b.n	8005a76 <_svfprintf_r+0x6f6>
 8005fb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fb6:	1e5d      	subs	r5, r3, #1
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	dc00      	bgt.n	8005fbe <_svfprintf_r+0xc3e>
 8005fbc:	e666      	b.n	8005c8c <_svfprintf_r+0x90c>
 8005fbe:	4b9c      	ldr	r3, [pc, #624]	; (8006230 <_svfprintf_r+0xeb0>)
 8005fc0:	4699      	mov	r9, r3
 8005fc2:	2d10      	cmp	r5, #16
 8005fc4:	dd29      	ble.n	800601a <_svfprintf_r+0xc9a>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	0032      	movs	r2, r6
 8005fca:	469a      	mov	sl, r3
 8005fcc:	002e      	movs	r6, r5
 8005fce:	0021      	movs	r1, r4
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005fd4:	464d      	mov	r5, r9
 8005fd6:	e003      	b.n	8005fe0 <_svfprintf_r+0xc60>
 8005fd8:	3e10      	subs	r6, #16
 8005fda:	3208      	adds	r2, #8
 8005fdc:	2e10      	cmp	r6, #16
 8005fde:	dd17      	ble.n	8006010 <_svfprintf_r+0xc90>
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	3110      	adds	r1, #16
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	6015      	str	r5, [r2, #0]
 8005fe8:	6050      	str	r0, [r2, #4]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	ddf2      	ble.n	8005fd8 <_svfprintf_r+0xc58>
 8005ff2:	003a      	movs	r2, r7
 8005ff4:	9906      	ldr	r1, [sp, #24]
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	f002 fd42 	bl	8008a80 <__ssprint_r>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d001      	beq.n	8006004 <_svfprintf_r+0xc84>
 8006000:	f7ff fa45 	bl	800548e <_svfprintf_r+0x10e>
 8006004:	3e10      	subs	r6, #16
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	aa32      	add	r2, sp, #200	; 0xc8
 800600c:	2e10      	cmp	r6, #16
 800600e:	dce7      	bgt.n	8005fe0 <_svfprintf_r+0xc60>
 8006010:	46a9      	mov	r9, r5
 8006012:	000c      	movs	r4, r1
 8006014:	0035      	movs	r5, r6
 8006016:	4698      	mov	r8, r3
 8006018:	0016      	movs	r6, r2
 800601a:	464b      	mov	r3, r9
 800601c:	6075      	str	r5, [r6, #4]
 800601e:	6033      	str	r3, [r6, #0]
 8006020:	1964      	adds	r4, r4, r5
 8006022:	e629      	b.n	8005c78 <_svfprintf_r+0x8f8>
 8006024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	f7ff fbfb 	bl	8005822 <_svfprintf_r+0x4a2>
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	9307      	str	r3, [sp, #28]
 8006030:	f7ff fa82 	bl	8005538 <_svfprintf_r+0x1b8>
 8006034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	f7ff fb84 	bl	8005744 <_svfprintf_r+0x3c4>
 800603c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	f7ff fbd1 	bl	80057e6 <_svfprintf_r+0x466>
 8006044:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	6033      	str	r3, [r6, #0]
 800604a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800604c:	469c      	mov	ip, r3
 800604e:	6073      	str	r3, [r6, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4462      	add	r2, ip
 8006054:	3301      	adds	r3, #1
 8006056:	0014      	movs	r4, r2
 8006058:	60ba      	str	r2, [r7, #8]
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	2b07      	cmp	r3, #7
 800605e:	dd00      	ble.n	8006062 <_svfprintf_r+0xce2>
 8006060:	e202      	b.n	8006468 <_svfprintf_r+0x10e8>
 8006062:	3608      	adds	r6, #8
 8006064:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006066:	1e5d      	subs	r5, r3, #1
 8006068:	2d00      	cmp	r5, #0
 800606a:	dc00      	bgt.n	800606e <_svfprintf_r+0xcee>
 800606c:	e57e      	b.n	8005b6c <_svfprintf_r+0x7ec>
 800606e:	4a70      	ldr	r2, [pc, #448]	; (8006230 <_svfprintf_r+0xeb0>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4691      	mov	r9, r2
 8006074:	2d10      	cmp	r5, #16
 8006076:	dd25      	ble.n	80060c4 <_svfprintf_r+0xd44>
 8006078:	2210      	movs	r2, #16
 800607a:	0021      	movs	r1, r4
 800607c:	4690      	mov	r8, r2
 800607e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006080:	0032      	movs	r2, r6
 8006082:	002e      	movs	r6, r5
 8006084:	464d      	mov	r5, r9
 8006086:	e003      	b.n	8006090 <_svfprintf_r+0xd10>
 8006088:	3208      	adds	r2, #8
 800608a:	3e10      	subs	r6, #16
 800608c:	2e10      	cmp	r6, #16
 800608e:	dd15      	ble.n	80060bc <_svfprintf_r+0xd3c>
 8006090:	4640      	mov	r0, r8
 8006092:	3110      	adds	r1, #16
 8006094:	3301      	adds	r3, #1
 8006096:	6015      	str	r5, [r2, #0]
 8006098:	6050      	str	r0, [r2, #4]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	2b07      	cmp	r3, #7
 80060a0:	ddf2      	ble.n	8006088 <_svfprintf_r+0xd08>
 80060a2:	003a      	movs	r2, r7
 80060a4:	9906      	ldr	r1, [sp, #24]
 80060a6:	0020      	movs	r0, r4
 80060a8:	f002 fcea 	bl	8008a80 <__ssprint_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d001      	beq.n	80060b4 <_svfprintf_r+0xd34>
 80060b0:	f7ff f9ed 	bl	800548e <_svfprintf_r+0x10e>
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	aa32      	add	r2, sp, #200	; 0xc8
 80060ba:	e7e6      	b.n	800608a <_svfprintf_r+0xd0a>
 80060bc:	46a9      	mov	r9, r5
 80060be:	000c      	movs	r4, r1
 80060c0:	0035      	movs	r5, r6
 80060c2:	0016      	movs	r6, r2
 80060c4:	464a      	mov	r2, r9
 80060c6:	1964      	adds	r4, r4, r5
 80060c8:	3301      	adds	r3, #1
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	6075      	str	r5, [r6, #4]
 80060ce:	60bc      	str	r4, [r7, #8]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	2b07      	cmp	r3, #7
 80060d4:	dc00      	bgt.n	80060d8 <_svfprintf_r+0xd58>
 80060d6:	e548      	b.n	8005b6a <_svfprintf_r+0x7ea>
 80060d8:	e5e5      	b.n	8005ca6 <_svfprintf_r+0x926>
 80060da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060dc:	2b09      	cmp	r3, #9
 80060de:	d900      	bls.n	80060e2 <_svfprintf_r+0xd62>
 80060e0:	e730      	b.n	8005f44 <_svfprintf_r+0xbc4>
 80060e2:	9c08      	ldr	r4, [sp, #32]
 80060e4:	2227      	movs	r2, #39	; 0x27
 80060e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060e8:	a928      	add	r1, sp, #160	; 0xa0
 80060ea:	3330      	adds	r3, #48	; 0x30
 80060ec:	548b      	strb	r3, [r1, r2]
 80060ee:	2301      	movs	r3, #1
 80060f0:	aa16      	add	r2, sp, #88	; 0x58
 80060f2:	4694      	mov	ip, r2
 80060f4:	930e      	str	r3, [sp, #56]	; 0x38
 80060f6:	336e      	adds	r3, #110	; 0x6e
 80060f8:	4463      	add	r3, ip
 80060fa:	9408      	str	r4, [sp, #32]
 80060fc:	9311      	str	r3, [sp, #68]	; 0x44
 80060fe:	f7ff fa4f 	bl	80055a0 <_svfprintf_r+0x220>
 8006102:	2b30      	cmp	r3, #48	; 0x30
 8006104:	d100      	bne.n	8006108 <_svfprintf_r+0xd88>
 8006106:	e20b      	b.n	8006520 <_svfprintf_r+0x11a0>
 8006108:	2330      	movs	r3, #48	; 0x30
 800610a:	3a02      	subs	r2, #2
 800610c:	7013      	strb	r3, [r2, #0]
 800610e:	ab32      	add	r3, sp, #200	; 0xc8
 8006110:	1a9b      	subs	r3, r3, r2
 8006112:	930e      	str	r3, [sp, #56]	; 0x38
 8006114:	9211      	str	r2, [sp, #68]	; 0x44
 8006116:	f7ff fa43 	bl	80055a0 <_svfprintf_r+0x220>
 800611a:	46b0      	mov	r8, r6
 800611c:	46a1      	mov	r9, r4
 800611e:	0016      	movs	r6, r2
 8006120:	000c      	movs	r4, r1
 8006122:	464a      	mov	r2, r9
 8006124:	6032      	str	r2, [r6, #0]
 8006126:	4642      	mov	r2, r8
 8006128:	4444      	add	r4, r8
 800612a:	3301      	adds	r3, #1
 800612c:	6072      	str	r2, [r6, #4]
 800612e:	60bc      	str	r4, [r7, #8]
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	2b07      	cmp	r3, #7
 8006134:	dd00      	ble.n	8006138 <_svfprintf_r+0xdb8>
 8006136:	e29c      	b.n	8006672 <_svfprintf_r+0x12f2>
 8006138:	3608      	adds	r6, #8
 800613a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800613c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800613e:	4293      	cmp	r3, r2
 8006140:	db4c      	blt.n	80061dc <_svfprintf_r+0xe5c>
 8006142:	9a08      	ldr	r2, [sp, #32]
 8006144:	07d2      	lsls	r2, r2, #31
 8006146:	d449      	bmi.n	80061dc <_svfprintf_r+0xe5c>
 8006148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800614a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	1a52      	subs	r2, r2, r1
 8006150:	4690      	mov	r8, r2
 8006152:	429a      	cmp	r2, r3
 8006154:	dd00      	ble.n	8006158 <_svfprintf_r+0xdd8>
 8006156:	4698      	mov	r8, r3
 8006158:	4642      	mov	r2, r8
 800615a:	2a00      	cmp	r2, #0
 800615c:	dd0f      	ble.n	800617e <_svfprintf_r+0xdfe>
 800615e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006160:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006162:	468c      	mov	ip, r1
 8006164:	4462      	add	r2, ip
 8006166:	6032      	str	r2, [r6, #0]
 8006168:	4642      	mov	r2, r8
 800616a:	6072      	str	r2, [r6, #4]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	4444      	add	r4, r8
 8006170:	3201      	adds	r2, #1
 8006172:	60bc      	str	r4, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	2a07      	cmp	r2, #7
 8006178:	dd00      	ble.n	800617c <_svfprintf_r+0xdfc>
 800617a:	e286      	b.n	800668a <_svfprintf_r+0x130a>
 800617c:	3608      	adds	r6, #8
 800617e:	4642      	mov	r2, r8
 8006180:	43d5      	mvns	r5, r2
 8006182:	17ed      	asrs	r5, r5, #31
 8006184:	4015      	ands	r5, r2
 8006186:	1b5d      	subs	r5, r3, r5
 8006188:	2d00      	cmp	r5, #0
 800618a:	dc00      	bgt.n	800618e <_svfprintf_r+0xe0e>
 800618c:	e4ee      	b.n	8005b6c <_svfprintf_r+0x7ec>
 800618e:	4a28      	ldr	r2, [pc, #160]	; (8006230 <_svfprintf_r+0xeb0>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4691      	mov	r9, r2
 8006194:	2d10      	cmp	r5, #16
 8006196:	dd95      	ble.n	80060c4 <_svfprintf_r+0xd44>
 8006198:	2210      	movs	r2, #16
 800619a:	0021      	movs	r1, r4
 800619c:	4690      	mov	r8, r2
 800619e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80061a0:	0032      	movs	r2, r6
 80061a2:	002e      	movs	r6, r5
 80061a4:	464d      	mov	r5, r9
 80061a6:	e003      	b.n	80061b0 <_svfprintf_r+0xe30>
 80061a8:	3208      	adds	r2, #8
 80061aa:	3e10      	subs	r6, #16
 80061ac:	2e10      	cmp	r6, #16
 80061ae:	dd85      	ble.n	80060bc <_svfprintf_r+0xd3c>
 80061b0:	4640      	mov	r0, r8
 80061b2:	3110      	adds	r1, #16
 80061b4:	3301      	adds	r3, #1
 80061b6:	6015      	str	r5, [r2, #0]
 80061b8:	6050      	str	r0, [r2, #4]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	2b07      	cmp	r3, #7
 80061c0:	ddf2      	ble.n	80061a8 <_svfprintf_r+0xe28>
 80061c2:	003a      	movs	r2, r7
 80061c4:	9906      	ldr	r1, [sp, #24]
 80061c6:	0020      	movs	r0, r4
 80061c8:	f002 fc5a 	bl	8008a80 <__ssprint_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d001      	beq.n	80061d4 <_svfprintf_r+0xe54>
 80061d0:	f7ff f95d 	bl	800548e <_svfprintf_r+0x10e>
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	aa32      	add	r2, sp, #200	; 0xc8
 80061da:	e7e6      	b.n	80061aa <_svfprintf_r+0xe2a>
 80061dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80061de:	6032      	str	r2, [r6, #0]
 80061e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80061e2:	4694      	mov	ip, r2
 80061e4:	6072      	str	r2, [r6, #4]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4464      	add	r4, ip
 80061ea:	3201      	adds	r2, #1
 80061ec:	60bc      	str	r4, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	2a07      	cmp	r2, #7
 80061f2:	dd00      	ble.n	80061f6 <_svfprintf_r+0xe76>
 80061f4:	e230      	b.n	8006658 <_svfprintf_r+0x12d8>
 80061f6:	3608      	adds	r6, #8
 80061f8:	e7a6      	b.n	8006148 <_svfprintf_r+0xdc8>
 80061fa:	003a      	movs	r2, r7
 80061fc:	9906      	ldr	r1, [sp, #24]
 80061fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006200:	f002 fc3e 	bl	8008a80 <__ssprint_r>
 8006204:	2800      	cmp	r0, #0
 8006206:	d001      	beq.n	800620c <_svfprintf_r+0xe8c>
 8006208:	f7ff f941 	bl	800548e <_svfprintf_r+0x10e>
 800620c:	68bc      	ldr	r4, [r7, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	ae32      	add	r6, sp, #200	; 0xc8
 8006212:	e513      	b.n	8005c3c <_svfprintf_r+0x8bc>
 8006214:	003a      	movs	r2, r7
 8006216:	9906      	ldr	r1, [sp, #24]
 8006218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800621a:	f002 fc31 	bl	8008a80 <__ssprint_r>
 800621e:	2800      	cmp	r0, #0
 8006220:	d001      	beq.n	8006226 <_svfprintf_r+0xea6>
 8006222:	f7ff f934 	bl	800548e <_svfprintf_r+0x10e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68bc      	ldr	r4, [r7, #8]
 800622a:	4698      	mov	r8, r3
 800622c:	ae32      	add	r6, sp, #200	; 0xc8
 800622e:	e513      	b.n	8005c58 <_svfprintf_r+0x8d8>
 8006230:	08009730 	.word	0x08009730
 8006234:	2307      	movs	r3, #7
 8006236:	3207      	adds	r2, #7
 8006238:	439a      	bics	r2, r3
 800623a:	3301      	adds	r3, #1
 800623c:	469c      	mov	ip, r3
 800623e:	4494      	add	ip, r2
 8006240:	4663      	mov	r3, ip
 8006242:	930f      	str	r3, [sp, #60]	; 0x3c
 8006244:	6853      	ldr	r3, [r2, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	930d      	str	r3, [sp, #52]	; 0x34
 800624a:	920c      	str	r2, [sp, #48]	; 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	db01      	blt.n	8006254 <_svfprintf_r+0xed4>
 8006250:	f7ff f97a 	bl	8005548 <_svfprintf_r+0x1c8>
 8006254:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006256:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006258:	2300      	movs	r3, #0
 800625a:	4242      	negs	r2, r0
 800625c:	418b      	sbcs	r3, r1
 800625e:	0011      	movs	r1, r2
 8006260:	001a      	movs	r2, r3
 8006262:	232d      	movs	r3, #45	; 0x2d
 8006264:	a816      	add	r0, sp, #88	; 0x58
 8006266:	77c3      	strb	r3, [r0, #31]
 8006268:	0008      	movs	r0, r1
 800626a:	4310      	orrs	r0, r2
 800626c:	910c      	str	r1, [sp, #48]	; 0x30
 800626e:	920d      	str	r2, [sp, #52]	; 0x34
 8006270:	4698      	mov	r8, r3
 8006272:	0002      	movs	r2, r0
 8006274:	3b2c      	subs	r3, #44	; 0x2c
 8006276:	f7ff f970 	bl	800555a <_svfprintf_r+0x1da>
 800627a:	003a      	movs	r2, r7
 800627c:	9906      	ldr	r1, [sp, #24]
 800627e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006280:	f002 fbfe 	bl	8008a80 <__ssprint_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	d001      	beq.n	800628c <_svfprintf_r+0xf0c>
 8006288:	f7ff f901 	bl	800548e <_svfprintf_r+0x10e>
 800628c:	68bc      	ldr	r4, [r7, #8]
 800628e:	ae32      	add	r6, sp, #200	; 0xc8
 8006290:	e418      	b.n	8005ac4 <_svfprintf_r+0x744>
 8006292:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006294:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006296:	000a      	movs	r2, r1
 8006298:	0008      	movs	r0, r1
 800629a:	002b      	movs	r3, r5
 800629c:	0029      	movs	r1, r5
 800629e:	f7fb ff37 	bl	8002110 <__aeabi_dcmpun>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d000      	beq.n	80062a8 <_svfprintf_r+0xf28>
 80062a6:	e2e6      	b.n	8006876 <_svfprintf_r+0x14f6>
 80062a8:	4653      	mov	r3, sl
 80062aa:	3301      	adds	r3, #1
 80062ac:	d100      	bne.n	80062b0 <_svfprintf_r+0xf30>
 80062ae:	e20d      	b.n	80066cc <_svfprintf_r+0x134c>
 80062b0:	2320      	movs	r3, #32
 80062b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062b4:	439a      	bics	r2, r3
 80062b6:	920e      	str	r2, [sp, #56]	; 0x38
 80062b8:	2a47      	cmp	r2, #71	; 0x47
 80062ba:	d100      	bne.n	80062be <_svfprintf_r+0xf3e>
 80062bc:	e11c      	b.n	80064f8 <_svfprintf_r+0x1178>
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	4323      	orrs	r3, r4
 80062c4:	9308      	str	r3, [sp, #32]
 80062c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da00      	bge.n	80062ce <_svfprintf_r+0xf4e>
 80062cc:	e221      	b.n	8006712 <_svfprintf_r+0x1392>
 80062ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	2300      	movs	r3, #0
 80062d4:	4691      	mov	r9, r2
 80062d6:	9310      	str	r3, [sp, #64]	; 0x40
 80062d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062da:	2b66      	cmp	r3, #102	; 0x66
 80062dc:	d100      	bne.n	80062e0 <_svfprintf_r+0xf60>
 80062de:	e1fc      	b.n	80066da <_svfprintf_r+0x135a>
 80062e0:	2b46      	cmp	r3, #70	; 0x46
 80062e2:	d100      	bne.n	80062e6 <_svfprintf_r+0xf66>
 80062e4:	e0db      	b.n	800649e <_svfprintf_r+0x111e>
 80062e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ea:	3a45      	subs	r2, #69	; 0x45
 80062ec:	0013      	movs	r3, r2
 80062ee:	4259      	negs	r1, r3
 80062f0:	4159      	adcs	r1, r3
 80062f2:	ab20      	add	r3, sp, #128	; 0x80
 80062f4:	000d      	movs	r5, r1
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	ab1f      	add	r3, sp, #124	; 0x7c
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	2302      	movs	r3, #2
 80062fe:	aa23      	add	r2, sp, #140	; 0x8c
 8006300:	4455      	add	r5, sl
 8006302:	921b      	str	r2, [sp, #108]	; 0x6c
 8006304:	9204      	str	r2, [sp, #16]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	9501      	str	r5, [sp, #4]
 800630a:	9b07      	ldr	r3, [sp, #28]
 800630c:	464a      	mov	r2, r9
 800630e:	f000 fbe7 	bl	8006ae0 <_dtoa_r>
 8006312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006314:	9011      	str	r0, [sp, #68]	; 0x44
 8006316:	2b67      	cmp	r3, #103	; 0x67
 8006318:	d000      	beq.n	800631c <_svfprintf_r+0xf9c>
 800631a:	e239      	b.n	8006790 <_svfprintf_r+0x1410>
 800631c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800631e:	4698      	mov	r8, r3
 8006320:	44a8      	add	r8, r5
 8006322:	07e3      	lsls	r3, r4, #31
 8006324:	d400      	bmi.n	8006328 <_svfprintf_r+0xfa8>
 8006326:	e28b      	b.n	8006840 <_svfprintf_r+0x14c0>
 8006328:	2300      	movs	r3, #0
 800632a:	2200      	movs	r2, #0
 800632c:	4648      	mov	r0, r9
 800632e:	9907      	ldr	r1, [sp, #28]
 8006330:	f7fa f8ee 	bl	8000510 <__aeabi_dcmpeq>
 8006334:	4643      	mov	r3, r8
 8006336:	2800      	cmp	r0, #0
 8006338:	d10a      	bne.n	8006350 <_svfprintf_r+0xfd0>
 800633a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800633c:	4543      	cmp	r3, r8
 800633e:	d207      	bcs.n	8006350 <_svfprintf_r+0xfd0>
 8006340:	2130      	movs	r1, #48	; 0x30
 8006342:	4640      	mov	r0, r8
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	9223      	str	r2, [sp, #140]	; 0x8c
 8006348:	7019      	strb	r1, [r3, #0]
 800634a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800634c:	4298      	cmp	r0, r3
 800634e:	d8f9      	bhi.n	8006344 <_svfprintf_r+0xfc4>
 8006350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	9314      	str	r3, [sp, #80]	; 0x50
 8006356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006358:	2b47      	cmp	r3, #71	; 0x47
 800635a:	d100      	bne.n	800635e <_svfprintf_r+0xfde>
 800635c:	e0f6      	b.n	800654c <_svfprintf_r+0x11cc>
 800635e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006360:	2b65      	cmp	r3, #101	; 0x65
 8006362:	dc00      	bgt.n	8006366 <_svfprintf_r+0xfe6>
 8006364:	e226      	b.n	80067b4 <_svfprintf_r+0x1434>
 8006366:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006368:	2b66      	cmp	r3, #102	; 0x66
 800636a:	d100      	bne.n	800636e <_svfprintf_r+0xfee>
 800636c:	e1f4      	b.n	8006758 <_svfprintf_r+0x13d8>
 800636e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006370:	9313      	str	r3, [sp, #76]	; 0x4c
 8006372:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006376:	0019      	movs	r1, r3
 8006378:	4291      	cmp	r1, r2
 800637a:	dd00      	ble.n	800637e <_svfprintf_r+0xffe>
 800637c:	e1d4      	b.n	8006728 <_svfprintf_r+0x13a8>
 800637e:	07e3      	lsls	r3, r4, #31
 8006380:	d500      	bpl.n	8006384 <_svfprintf_r+0x1004>
 8006382:	e249      	b.n	8006818 <_svfprintf_r+0x1498>
 8006384:	43d3      	mvns	r3, r2
 8006386:	17db      	asrs	r3, r3, #31
 8006388:	0011      	movs	r1, r2
 800638a:	401a      	ands	r2, r3
 800638c:	2367      	movs	r3, #103	; 0x67
 800638e:	9207      	str	r2, [sp, #28]
 8006390:	910e      	str	r1, [sp, #56]	; 0x38
 8006392:	9312      	str	r3, [sp, #72]	; 0x48
 8006394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d000      	beq.n	800639c <_svfprintf_r+0x101c>
 800639a:	e0cf      	b.n	800653c <_svfprintf_r+0x11bc>
 800639c:	ab16      	add	r3, sp, #88	; 0x58
 800639e:	7fdb      	ldrb	r3, [r3, #31]
 80063a0:	4698      	mov	r8, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	469a      	mov	sl, r3
 80063a6:	f7ff f903 	bl	80055b0 <_svfprintf_r+0x230>
 80063aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	6019      	str	r1, [r3, #0]
 80063b2:	0013      	movs	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b8:	f7ff f80d 	bl	80053d6 <_svfprintf_r+0x56>
 80063bc:	003a      	movs	r2, r7
 80063be:	9906      	ldr	r1, [sp, #24]
 80063c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c2:	f002 fb5d 	bl	8008a80 <__ssprint_r>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d001      	beq.n	80063ce <_svfprintf_r+0x104e>
 80063ca:	f7ff f860 	bl	800548e <_svfprintf_r+0x10e>
 80063ce:	ae32      	add	r6, sp, #200	; 0xc8
 80063d0:	e48e      	b.n	8005cf0 <_svfprintf_r+0x970>
 80063d2:	4bde      	ldr	r3, [pc, #888]	; (800674c <_svfprintf_r+0x13cc>)
 80063d4:	3401      	adds	r4, #1
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	2301      	movs	r3, #1
 80063da:	6073      	str	r3, [r6, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60bc      	str	r4, [r7, #8]
 80063e0:	3301      	adds	r3, #1
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	2b07      	cmp	r3, #7
 80063e6:	dc7a      	bgt.n	80064de <_svfprintf_r+0x115e>
 80063e8:	3608      	adds	r6, #8
 80063ea:	2800      	cmp	r0, #0
 80063ec:	d107      	bne.n	80063fe <_svfprintf_r+0x107e>
 80063ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <_svfprintf_r+0x107e>
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	07db      	lsls	r3, r3, #31
 80063f8:	d401      	bmi.n	80063fe <_svfprintf_r+0x107e>
 80063fa:	f7ff fbb7 	bl	8005b6c <_svfprintf_r+0x7ec>
 80063fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006404:	1919      	adds	r1, r3, r4
 8006406:	6073      	str	r3, [r6, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	3301      	adds	r3, #1
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	2b07      	cmp	r3, #7
 8006412:	dd00      	ble.n	8006416 <_svfprintf_r+0x1096>
 8006414:	e1f2      	b.n	80067fc <_svfprintf_r+0x147c>
 8006416:	0032      	movs	r2, r6
 8006418:	3208      	adds	r2, #8
 800641a:	2800      	cmp	r0, #0
 800641c:	da00      	bge.n	8006420 <_svfprintf_r+0x10a0>
 800641e:	e1cc      	b.n	80067ba <_svfprintf_r+0x143a>
 8006420:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006422:	3301      	adds	r3, #1
 8006424:	6010      	str	r0, [r2, #0]
 8006426:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	1844      	adds	r4, r0, r1
 800642c:	6050      	str	r0, [r2, #4]
 800642e:	60bc      	str	r4, [r7, #8]
 8006430:	2b07      	cmp	r3, #7
 8006432:	dd00      	ble.n	8006436 <_svfprintf_r+0x10b6>
 8006434:	e437      	b.n	8005ca6 <_svfprintf_r+0x926>
 8006436:	3208      	adds	r2, #8
 8006438:	0016      	movs	r6, r2
 800643a:	f7ff fb97 	bl	8005b6c <_svfprintf_r+0x7ec>
 800643e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006442:	680b      	ldr	r3, [r1, #0]
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	17d2      	asrs	r2, r2, #31
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	000b      	movs	r3, r1
 800644c:	3304      	adds	r3, #4
 800644e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006450:	f7fe ffc1 	bl	80053d6 <_svfprintf_r+0x56>
 8006454:	464b      	mov	r3, r9
 8006456:	3101      	adds	r1, #1
 8006458:	431c      	orrs	r4, r3
 800645a:	780b      	ldrb	r3, [r1, #0]
 800645c:	f7fe fff4 	bl	8005448 <_svfprintf_r+0xc8>
 8006460:	4bbb      	ldr	r3, [pc, #748]	; (8006750 <_svfprintf_r+0x13d0>)
 8006462:	9311      	str	r3, [sp, #68]	; 0x44
 8006464:	f7ff f937 	bl	80056d6 <_svfprintf_r+0x356>
 8006468:	003a      	movs	r2, r7
 800646a:	9906      	ldr	r1, [sp, #24]
 800646c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800646e:	f002 fb07 	bl	8008a80 <__ssprint_r>
 8006472:	2800      	cmp	r0, #0
 8006474:	d001      	beq.n	800647a <_svfprintf_r+0x10fa>
 8006476:	f7ff f80a 	bl	800548e <_svfprintf_r+0x10e>
 800647a:	68bc      	ldr	r4, [r7, #8]
 800647c:	ae32      	add	r6, sp, #200	; 0xc8
 800647e:	e5f1      	b.n	8006064 <_svfprintf_r+0xce4>
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006484:	f001 fc34 	bl	8007cf0 <_malloc_r>
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	6018      	str	r0, [r3, #0]
 800648c:	6118      	str	r0, [r3, #16]
 800648e:	2800      	cmp	r0, #0
 8006490:	d100      	bne.n	8006494 <_svfprintf_r+0x1114>
 8006492:	e258      	b.n	8006946 <_svfprintf_r+0x15c6>
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	9a06      	ldr	r2, [sp, #24]
 8006498:	6153      	str	r3, [r2, #20]
 800649a:	f7fe ff8e 	bl	80053ba <_svfprintf_r+0x3a>
 800649e:	ab23      	add	r3, sp, #140	; 0x8c
 80064a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	ab20      	add	r3, sp, #128	; 0x80
 80064a6:	9303      	str	r3, [sp, #12]
 80064a8:	ab1f      	add	r3, sp, #124	; 0x7c
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	4653      	mov	r3, sl
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2303      	movs	r3, #3
 80064b2:	464a      	mov	r2, r9
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	f000 fb11 	bl	8006ae0 <_dtoa_r>
 80064be:	4655      	mov	r5, sl
 80064c0:	9011      	str	r0, [sp, #68]	; 0x44
 80064c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064c4:	4698      	mov	r8, r3
 80064c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064c8:	44a8      	add	r8, r5
 80064ca:	2b46      	cmp	r3, #70	; 0x46
 80064cc:	d000      	beq.n	80064d0 <_svfprintf_r+0x1150>
 80064ce:	e72b      	b.n	8006328 <_svfprintf_r+0xfa8>
 80064d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b30      	cmp	r3, #48	; 0x30
 80064d6:	d016      	beq.n	8006506 <_svfprintf_r+0x1186>
 80064d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064da:	4498      	add	r8, r3
 80064dc:	e724      	b.n	8006328 <_svfprintf_r+0xfa8>
 80064de:	003a      	movs	r2, r7
 80064e0:	9906      	ldr	r1, [sp, #24]
 80064e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064e4:	f002 facc 	bl	8008a80 <__ssprint_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d001      	beq.n	80064f0 <_svfprintf_r+0x1170>
 80064ec:	f7fe ffcf 	bl	800548e <_svfprintf_r+0x10e>
 80064f0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80064f2:	68bc      	ldr	r4, [r7, #8]
 80064f4:	ae32      	add	r6, sp, #200	; 0xc8
 80064f6:	e778      	b.n	80063ea <_svfprintf_r+0x106a>
 80064f8:	4653      	mov	r3, sl
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d000      	beq.n	8006500 <_svfprintf_r+0x1180>
 80064fe:	e6de      	b.n	80062be <_svfprintf_r+0xf3e>
 8006500:	3301      	adds	r3, #1
 8006502:	469a      	mov	sl, r3
 8006504:	e6db      	b.n	80062be <_svfprintf_r+0xf3e>
 8006506:	2200      	movs	r2, #0
 8006508:	2300      	movs	r3, #0
 800650a:	4648      	mov	r0, r9
 800650c:	9907      	ldr	r1, [sp, #28]
 800650e:	f7f9 ffff 	bl	8000510 <__aeabi_dcmpeq>
 8006512:	2800      	cmp	r0, #0
 8006514:	d1e0      	bne.n	80064d8 <_svfprintf_r+0x1158>
 8006516:	2301      	movs	r3, #1
 8006518:	1b5b      	subs	r3, r3, r5
 800651a:	931f      	str	r3, [sp, #124]	; 0x7c
 800651c:	4498      	add	r8, r3
 800651e:	e703      	b.n	8006328 <_svfprintf_r+0xfa8>
 8006520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006522:	ab32      	add	r3, sp, #200	; 0xc8
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	930e      	str	r3, [sp, #56]	; 0x38
 8006528:	f7ff f83a 	bl	80055a0 <_svfprintf_r+0x220>
 800652c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800652e:	f002 fa6f 	bl	8008a10 <strlen>
 8006532:	0002      	movs	r2, r0
 8006534:	900e      	str	r0, [sp, #56]	; 0x38
 8006536:	0003      	movs	r3, r0
 8006538:	f7ff f9cd 	bl	80058d6 <_svfprintf_r+0x556>
 800653c:	232d      	movs	r3, #45	; 0x2d
 800653e:	aa16      	add	r2, sp, #88	; 0x58
 8006540:	77d3      	strb	r3, [r2, #31]
 8006542:	4698      	mov	r8, r3
 8006544:	2300      	movs	r3, #0
 8006546:	469a      	mov	sl, r3
 8006548:	f7ff f835 	bl	80055b6 <_svfprintf_r+0x236>
 800654c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800654e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006550:	1cda      	adds	r2, r3, #3
 8006552:	db02      	blt.n	800655a <_svfprintf_r+0x11da>
 8006554:	459a      	cmp	sl, r3
 8006556:	db00      	blt.n	800655a <_svfprintf_r+0x11da>
 8006558:	e70b      	b.n	8006372 <_svfprintf_r+0xff2>
 800655a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800655c:	3b02      	subs	r3, #2
 800655e:	9312      	str	r3, [sp, #72]	; 0x48
 8006560:	222c      	movs	r2, #44	; 0x2c
 8006562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006564:	2148      	movs	r1, #72	; 0x48
 8006566:	1e5d      	subs	r5, r3, #1
 8006568:	ab16      	add	r3, sp, #88	; 0x58
 800656a:	189b      	adds	r3, r3, r2
 800656c:	466a      	mov	r2, sp
 800656e:	1852      	adds	r2, r2, r1
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	951f      	str	r5, [sp, #124]	; 0x7c
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	2d00      	cmp	r5, #0
 8006578:	da00      	bge.n	800657c <_svfprintf_r+0x11fc>
 800657a:	e1a4      	b.n	80068c6 <_svfprintf_r+0x1546>
 800657c:	212d      	movs	r1, #45	; 0x2d
 800657e:	232b      	movs	r3, #43	; 0x2b
 8006580:	aa16      	add	r2, sp, #88	; 0x58
 8006582:	1852      	adds	r2, r2, r1
 8006584:	7013      	strb	r3, [r2, #0]
 8006586:	2d09      	cmp	r5, #9
 8006588:	dc00      	bgt.n	800658c <_svfprintf_r+0x120c>
 800658a:	e14c      	b.n	8006826 <_svfprintf_r+0x14a6>
 800658c:	aa16      	add	r2, sp, #88	; 0x58
 800658e:	233b      	movs	r3, #59	; 0x3b
 8006590:	4694      	mov	ip, r2
 8006592:	4463      	add	r3, ip
 8006594:	469a      	mov	sl, r3
 8006596:	46b1      	mov	r9, r6
 8006598:	46a0      	mov	r8, r4
 800659a:	4656      	mov	r6, sl
 800659c:	e000      	b.n	80065a0 <_svfprintf_r+0x1220>
 800659e:	0026      	movs	r6, r4
 80065a0:	0028      	movs	r0, r5
 80065a2:	210a      	movs	r1, #10
 80065a4:	f7f9 ff9a 	bl	80004dc <__aeabi_idivmod>
 80065a8:	1e74      	subs	r4, r6, #1
 80065aa:	3130      	adds	r1, #48	; 0x30
 80065ac:	7021      	strb	r1, [r4, #0]
 80065ae:	0028      	movs	r0, r5
 80065b0:	210a      	movs	r1, #10
 80065b2:	f7f9 fead 	bl	8000310 <__divsi3>
 80065b6:	0005      	movs	r5, r0
 80065b8:	2809      	cmp	r0, #9
 80065ba:	dcf0      	bgt.n	800659e <_svfprintf_r+0x121e>
 80065bc:	0023      	movs	r3, r4
 80065be:	4644      	mov	r4, r8
 80065c0:	46b0      	mov	r8, r6
 80065c2:	464e      	mov	r6, r9
 80065c4:	4699      	mov	r9, r3
 80065c6:	0003      	movs	r3, r0
 80065c8:	3330      	adds	r3, #48	; 0x30
 80065ca:	b2d8      	uxtb	r0, r3
 80065cc:	4643      	mov	r3, r8
 80065ce:	3b02      	subs	r3, #2
 80065d0:	7018      	strb	r0, [r3, #0]
 80065d2:	459a      	cmp	sl, r3
 80065d4:	d800      	bhi.n	80065d8 <_svfprintf_r+0x1258>
 80065d6:	e1bd      	b.n	8006954 <_svfprintf_r+0x15d4>
 80065d8:	4642      	mov	r2, r8
 80065da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065dc:	4645      	mov	r5, r8
 80065de:	1a99      	subs	r1, r3, r2
 80065e0:	2301      	movs	r3, #1
 80065e2:	3107      	adds	r1, #7
 80065e4:	425b      	negs	r3, r3
 80065e6:	e001      	b.n	80065ec <_svfprintf_r+0x126c>
 80065e8:	5ce8      	ldrb	r0, [r5, r3]
 80065ea:	3301      	adds	r3, #1
 80065ec:	aa21      	add	r2, sp, #132	; 0x84
 80065ee:	18d2      	adds	r2, r2, r3
 80065f0:	70d0      	strb	r0, [r2, #3]
 80065f2:	428b      	cmp	r3, r1
 80065f4:	d1f8      	bne.n	80065e8 <_svfprintf_r+0x1268>
 80065f6:	a916      	add	r1, sp, #88	; 0x58
 80065f8:	468c      	mov	ip, r1
 80065fa:	222e      	movs	r2, #46	; 0x2e
 80065fc:	464b      	mov	r3, r9
 80065fe:	4462      	add	r2, ip
 8006600:	4694      	mov	ip, r2
 8006602:	1afb      	subs	r3, r7, r3
 8006604:	4463      	add	r3, ip
 8006606:	aa21      	add	r2, sp, #132	; 0x84
 8006608:	9914      	ldr	r1, [sp, #80]	; 0x50
 800660a:	1a9b      	subs	r3, r3, r2
 800660c:	469c      	mov	ip, r3
 800660e:	000a      	movs	r2, r1
 8006610:	4462      	add	r2, ip
 8006612:	931a      	str	r3, [sp, #104]	; 0x68
 8006614:	920e      	str	r2, [sp, #56]	; 0x38
 8006616:	2901      	cmp	r1, #1
 8006618:	dc00      	bgt.n	800661c <_svfprintf_r+0x129c>
 800661a:	e145      	b.n	80068a8 <_svfprintf_r+0x1528>
 800661c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800661e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006620:	4694      	mov	ip, r2
 8006622:	4463      	add	r3, ip
 8006624:	001a      	movs	r2, r3
 8006626:	930e      	str	r3, [sp, #56]	; 0x38
 8006628:	43db      	mvns	r3, r3
 800662a:	17db      	asrs	r3, r3, #31
 800662c:	401a      	ands	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	9207      	str	r2, [sp, #28]
 8006632:	9313      	str	r3, [sp, #76]	; 0x4c
 8006634:	e6ae      	b.n	8006394 <_svfprintf_r+0x1014>
 8006636:	2301      	movs	r3, #1
 8006638:	425b      	negs	r3, r3
 800663a:	930a      	str	r3, [sp, #40]	; 0x28
 800663c:	f7fe ff2d 	bl	800549a <_svfprintf_r+0x11a>
 8006640:	003a      	movs	r2, r7
 8006642:	9906      	ldr	r1, [sp, #24]
 8006644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006646:	f002 fa1b 	bl	8008a80 <__ssprint_r>
 800664a:	2800      	cmp	r0, #0
 800664c:	d001      	beq.n	8006652 <_svfprintf_r+0x12d2>
 800664e:	f7fe ff1e 	bl	800548e <_svfprintf_r+0x10e>
 8006652:	68bc      	ldr	r4, [r7, #8]
 8006654:	ae32      	add	r6, sp, #200	; 0xc8
 8006656:	e43c      	b.n	8005ed2 <_svfprintf_r+0xb52>
 8006658:	003a      	movs	r2, r7
 800665a:	9906      	ldr	r1, [sp, #24]
 800665c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800665e:	f002 fa0f 	bl	8008a80 <__ssprint_r>
 8006662:	2800      	cmp	r0, #0
 8006664:	d001      	beq.n	800666a <_svfprintf_r+0x12ea>
 8006666:	f7fe ff12 	bl	800548e <_svfprintf_r+0x10e>
 800666a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800666c:	68bc      	ldr	r4, [r7, #8]
 800666e:	ae32      	add	r6, sp, #200	; 0xc8
 8006670:	e56a      	b.n	8006148 <_svfprintf_r+0xdc8>
 8006672:	003a      	movs	r2, r7
 8006674:	9906      	ldr	r1, [sp, #24]
 8006676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006678:	f002 fa02 	bl	8008a80 <__ssprint_r>
 800667c:	2800      	cmp	r0, #0
 800667e:	d001      	beq.n	8006684 <_svfprintf_r+0x1304>
 8006680:	f7fe ff05 	bl	800548e <_svfprintf_r+0x10e>
 8006684:	68bc      	ldr	r4, [r7, #8]
 8006686:	ae32      	add	r6, sp, #200	; 0xc8
 8006688:	e557      	b.n	800613a <_svfprintf_r+0xdba>
 800668a:	003a      	movs	r2, r7
 800668c:	9906      	ldr	r1, [sp, #24]
 800668e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006690:	f002 f9f6 	bl	8008a80 <__ssprint_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	d001      	beq.n	800669c <_svfprintf_r+0x131c>
 8006698:	f7fe fef9 	bl	800548e <_svfprintf_r+0x10e>
 800669c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800669e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80066a0:	68bc      	ldr	r4, [r7, #8]
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	ae32      	add	r6, sp, #200	; 0xc8
 80066a6:	e56a      	b.n	800617e <_svfprintf_r+0xdfe>
 80066a8:	4653      	mov	r3, sl
 80066aa:	9307      	str	r3, [sp, #28]
 80066ac:	2b06      	cmp	r3, #6
 80066ae:	d901      	bls.n	80066b4 <_svfprintf_r+0x1334>
 80066b0:	2306      	movs	r3, #6
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	950f      	str	r5, [sp, #60]	; 0x3c
 80066b8:	930e      	str	r3, [sp, #56]	; 0x38
 80066ba:	2300      	movs	r3, #0
 80066bc:	4698      	mov	r8, r3
 80066be:	469a      	mov	sl, r3
 80066c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <_svfprintf_r+0x13d4>)
 80066c4:	9408      	str	r4, [sp, #32]
 80066c6:	9311      	str	r3, [sp, #68]	; 0x44
 80066c8:	f7fe ff78 	bl	80055bc <_svfprintf_r+0x23c>
 80066cc:	2320      	movs	r3, #32
 80066ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066d0:	439a      	bics	r2, r3
 80066d2:	3b1a      	subs	r3, #26
 80066d4:	920e      	str	r2, [sp, #56]	; 0x38
 80066d6:	469a      	mov	sl, r3
 80066d8:	e5f1      	b.n	80062be <_svfprintf_r+0xf3e>
 80066da:	ab23      	add	r3, sp, #140	; 0x8c
 80066dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	ab20      	add	r3, sp, #128	; 0x80
 80066e2:	9303      	str	r3, [sp, #12]
 80066e4:	ab1f      	add	r3, sp, #124	; 0x7c
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	4653      	mov	r3, sl
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	2303      	movs	r3, #3
 80066ee:	464a      	mov	r2, r9
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	f000 f9f3 	bl	8006ae0 <_dtoa_r>
 80066fa:	0003      	movs	r3, r0
 80066fc:	4453      	add	r3, sl
 80066fe:	9011      	str	r0, [sp, #68]	; 0x44
 8006700:	4698      	mov	r8, r3
 8006702:	4655      	mov	r5, sl
 8006704:	e6e4      	b.n	80064d0 <_svfprintf_r+0x1150>
 8006706:	232d      	movs	r3, #45	; 0x2d
 8006708:	aa16      	add	r2, sp, #88	; 0x58
 800670a:	77d3      	strb	r3, [r2, #31]
 800670c:	4698      	mov	r8, r3
 800670e:	f7fe ffdb 	bl	80056c8 <_svfprintf_r+0x348>
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	0612      	lsls	r2, r2, #24
 8006716:	4694      	mov	ip, r2
 8006718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800671a:	4699      	mov	r9, r3
 800671c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800671e:	4463      	add	r3, ip
 8006720:	9307      	str	r3, [sp, #28]
 8006722:	232d      	movs	r3, #45	; 0x2d
 8006724:	9310      	str	r3, [sp, #64]	; 0x40
 8006726:	e5d7      	b.n	80062d8 <_svfprintf_r+0xf58>
 8006728:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800672a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800672c:	4694      	mov	ip, r2
 800672e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006730:	4463      	add	r3, ip
 8006732:	930e      	str	r3, [sp, #56]	; 0x38
 8006734:	2a00      	cmp	r2, #0
 8006736:	dc00      	bgt.n	800673a <_svfprintf_r+0x13ba>
 8006738:	e0ce      	b.n	80068d8 <_svfprintf_r+0x1558>
 800673a:	001a      	movs	r2, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	17db      	asrs	r3, r3, #31
 8006740:	401a      	ands	r2, r3
 8006742:	2367      	movs	r3, #103	; 0x67
 8006744:	9207      	str	r2, [sp, #28]
 8006746:	9312      	str	r3, [sp, #72]	; 0x48
 8006748:	e624      	b.n	8006394 <_svfprintf_r+0x1014>
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	08009710 	.word	0x08009710
 8006750:	080096d4 	.word	0x080096d4
 8006754:	08009708 	.word	0x08009708
 8006758:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800675a:	9313      	str	r3, [sp, #76]	; 0x4c
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc00      	bgt.n	8006762 <_svfprintf_r+0x13e2>
 8006760:	e0c4      	b.n	80068ec <_svfprintf_r+0x156c>
 8006762:	4652      	mov	r2, sl
 8006764:	2a00      	cmp	r2, #0
 8006766:	d000      	beq.n	800676a <_svfprintf_r+0x13ea>
 8006768:	e092      	b.n	8006890 <_svfprintf_r+0x1510>
 800676a:	07e2      	lsls	r2, r4, #31
 800676c:	d500      	bpl.n	8006770 <_svfprintf_r+0x13f0>
 800676e:	e08f      	b.n	8006890 <_svfprintf_r+0x1510>
 8006770:	9307      	str	r3, [sp, #28]
 8006772:	930e      	str	r3, [sp, #56]	; 0x38
 8006774:	e60e      	b.n	8006394 <_svfprintf_r+0x1014>
 8006776:	ab16      	add	r3, sp, #88	; 0x58
 8006778:	7fdb      	ldrb	r3, [r3, #31]
 800677a:	950f      	str	r5, [sp, #60]	; 0x3c
 800677c:	4698      	mov	r8, r3
 800677e:	4653      	mov	r3, sl
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	930e      	str	r3, [sp, #56]	; 0x38
 8006784:	2300      	movs	r3, #0
 8006786:	9408      	str	r4, [sp, #32]
 8006788:	469a      	mov	sl, r3
 800678a:	9313      	str	r3, [sp, #76]	; 0x4c
 800678c:	f7fe ff10 	bl	80055b0 <_svfprintf_r+0x230>
 8006790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006792:	4698      	mov	r8, r3
 8006794:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006796:	44a8      	add	r8, r5
 8006798:	2b47      	cmp	r3, #71	; 0x47
 800679a:	d000      	beq.n	800679e <_svfprintf_r+0x141e>
 800679c:	e5c4      	b.n	8006328 <_svfprintf_r+0xfa8>
 800679e:	07e3      	lsls	r3, r4, #31
 80067a0:	d500      	bpl.n	80067a4 <_svfprintf_r+0x1424>
 80067a2:	e68e      	b.n	80064c2 <_svfprintf_r+0x1142>
 80067a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	9314      	str	r3, [sp, #80]	; 0x50
 80067ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067ae:	2b47      	cmp	r3, #71	; 0x47
 80067b0:	d100      	bne.n	80067b4 <_svfprintf_r+0x1434>
 80067b2:	e6cb      	b.n	800654c <_svfprintf_r+0x11cc>
 80067b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80067b8:	e6d2      	b.n	8006560 <_svfprintf_r+0x11e0>
 80067ba:	4244      	negs	r4, r0
 80067bc:	3010      	adds	r0, #16
 80067be:	db00      	blt.n	80067c2 <_svfprintf_r+0x1442>
 80067c0:	e0be      	b.n	8006940 <_svfprintf_r+0x15c0>
 80067c2:	486b      	ldr	r0, [pc, #428]	; (8006970 <_svfprintf_r+0x15f0>)
 80067c4:	2610      	movs	r6, #16
 80067c6:	0005      	movs	r5, r0
 80067c8:	e003      	b.n	80067d2 <_svfprintf_r+0x1452>
 80067ca:	3208      	adds	r2, #8
 80067cc:	3c10      	subs	r4, #16
 80067ce:	2c10      	cmp	r4, #16
 80067d0:	dd38      	ble.n	8006844 <_svfprintf_r+0x14c4>
 80067d2:	3110      	adds	r1, #16
 80067d4:	3301      	adds	r3, #1
 80067d6:	6015      	str	r5, [r2, #0]
 80067d8:	6056      	str	r6, [r2, #4]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	2b07      	cmp	r3, #7
 80067e0:	ddf3      	ble.n	80067ca <_svfprintf_r+0x144a>
 80067e2:	003a      	movs	r2, r7
 80067e4:	9906      	ldr	r1, [sp, #24]
 80067e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067e8:	f002 f94a 	bl	8008a80 <__ssprint_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d001      	beq.n	80067f4 <_svfprintf_r+0x1474>
 80067f0:	f7fe fe4d 	bl	800548e <_svfprintf_r+0x10e>
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	aa32      	add	r2, sp, #200	; 0xc8
 80067fa:	e7e7      	b.n	80067cc <_svfprintf_r+0x144c>
 80067fc:	003a      	movs	r2, r7
 80067fe:	9906      	ldr	r1, [sp, #24]
 8006800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006802:	f002 f93d 	bl	8008a80 <__ssprint_r>
 8006806:	2800      	cmp	r0, #0
 8006808:	d001      	beq.n	800680e <_svfprintf_r+0x148e>
 800680a:	f7fe fe40 	bl	800548e <_svfprintf_r+0x10e>
 800680e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	aa32      	add	r2, sp, #200	; 0xc8
 8006816:	e600      	b.n	800641a <_svfprintf_r+0x109a>
 8006818:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800681a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800681c:	4694      	mov	ip, r2
 800681e:	4463      	add	r3, ip
 8006820:	001a      	movs	r2, r3
 8006822:	930e      	str	r3, [sp, #56]	; 0x38
 8006824:	e78a      	b.n	800673c <_svfprintf_r+0x13bc>
 8006826:	212e      	movs	r1, #46	; 0x2e
 8006828:	2330      	movs	r3, #48	; 0x30
 800682a:	aa16      	add	r2, sp, #88	; 0x58
 800682c:	1852      	adds	r2, r2, r1
 800682e:	7013      	strb	r3, [r2, #0]
 8006830:	002b      	movs	r3, r5
 8006832:	aa16      	add	r2, sp, #88	; 0x58
 8006834:	3101      	adds	r1, #1
 8006836:	3330      	adds	r3, #48	; 0x30
 8006838:	1852      	adds	r2, r2, r1
 800683a:	7013      	strb	r3, [r2, #0]
 800683c:	ab22      	add	r3, sp, #136	; 0x88
 800683e:	e6e2      	b.n	8006606 <_svfprintf_r+0x1286>
 8006840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006842:	e585      	b.n	8006350 <_svfprintf_r+0xfd0>
 8006844:	46a9      	mov	r9, r5
 8006846:	4648      	mov	r0, r9
 8006848:	1909      	adds	r1, r1, r4
 800684a:	3301      	adds	r3, #1
 800684c:	6010      	str	r0, [r2, #0]
 800684e:	6054      	str	r4, [r2, #4]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	3208      	adds	r2, #8
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	2b07      	cmp	r3, #7
 8006858:	dc00      	bgt.n	800685c <_svfprintf_r+0x14dc>
 800685a:	e5e1      	b.n	8006420 <_svfprintf_r+0x10a0>
 800685c:	003a      	movs	r2, r7
 800685e:	9906      	ldr	r1, [sp, #24]
 8006860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006862:	f002 f90d 	bl	8008a80 <__ssprint_r>
 8006866:	2800      	cmp	r0, #0
 8006868:	d001      	beq.n	800686e <_svfprintf_r+0x14ee>
 800686a:	f7fe fe10 	bl	800548e <_svfprintf_r+0x10e>
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	aa32      	add	r2, sp, #200	; 0xc8
 8006874:	e5d4      	b.n	8006420 <_svfprintf_r+0x10a0>
 8006876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006878:	2b47      	cmp	r3, #71	; 0x47
 800687a:	dc34      	bgt.n	80068e6 <_svfprintf_r+0x1566>
 800687c:	4b3d      	ldr	r3, [pc, #244]	; (8006974 <_svfprintf_r+0x15f4>)
 800687e:	9311      	str	r3, [sp, #68]	; 0x44
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	439c      	bics	r4, r3
 8006884:	ab16      	add	r3, sp, #88	; 0x58
 8006886:	7fdb      	ldrb	r3, [r3, #31]
 8006888:	9408      	str	r4, [sp, #32]
 800688a:	4698      	mov	r8, r3
 800688c:	f7fe ff26 	bl	80056dc <_svfprintf_r+0x35c>
 8006890:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006894:	4694      	mov	ip, r2
 8006896:	4463      	add	r3, ip
 8006898:	4453      	add	r3, sl
 800689a:	001a      	movs	r2, r3
 800689c:	930e      	str	r3, [sp, #56]	; 0x38
 800689e:	43db      	mvns	r3, r3
 80068a0:	17db      	asrs	r3, r3, #31
 80068a2:	401a      	ands	r2, r3
 80068a4:	9207      	str	r2, [sp, #28]
 80068a6:	e575      	b.n	8006394 <_svfprintf_r+0x1014>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4023      	ands	r3, r4
 80068ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80068ae:	d000      	beq.n	80068b2 <_svfprintf_r+0x1532>
 80068b0:	e6b4      	b.n	800661c <_svfprintf_r+0x129c>
 80068b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068b4:	43d3      	mvns	r3, r2
 80068b6:	17db      	asrs	r3, r3, #31
 80068b8:	401a      	ands	r2, r3
 80068ba:	9207      	str	r2, [sp, #28]
 80068bc:	e56a      	b.n	8006394 <_svfprintf_r+0x1014>
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <_svfprintf_r+0x15f0>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4691      	mov	r9, r2
 80068c4:	e42d      	b.n	8006122 <_svfprintf_r+0xda2>
 80068c6:	2301      	movs	r3, #1
 80068c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068ca:	391b      	subs	r1, #27
 80068cc:	1a9d      	subs	r5, r3, r2
 80068ce:	aa16      	add	r2, sp, #88	; 0x58
 80068d0:	332c      	adds	r3, #44	; 0x2c
 80068d2:	1852      	adds	r2, r2, r1
 80068d4:	7013      	strb	r3, [r2, #0]
 80068d6:	e656      	b.n	8006586 <_svfprintf_r+0x1206>
 80068d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068dc:	1a98      	subs	r0, r3, r2
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	001a      	movs	r2, r3
 80068e2:	930e      	str	r3, [sp, #56]	; 0x38
 80068e4:	e72a      	b.n	800673c <_svfprintf_r+0x13bc>
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <_svfprintf_r+0x15f8>)
 80068e8:	9311      	str	r3, [sp, #68]	; 0x44
 80068ea:	e7c9      	b.n	8006880 <_svfprintf_r+0x1500>
 80068ec:	4653      	mov	r3, sl
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <_svfprintf_r+0x1576>
 80068f2:	07e3      	lsls	r3, r4, #31
 80068f4:	d503      	bpl.n	80068fe <_svfprintf_r+0x157e>
 80068f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068f8:	1c58      	adds	r0, r3, #1
 80068fa:	0003      	movs	r3, r0
 80068fc:	e7cc      	b.n	8006898 <_svfprintf_r+0x1518>
 80068fe:	2301      	movs	r3, #1
 8006900:	e736      	b.n	8006770 <_svfprintf_r+0x13f0>
 8006902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006904:	1d1a      	adds	r2, r3, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	469a      	mov	sl, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	db08      	blt.n	8006920 <_svfprintf_r+0x15a0>
 800690e:	784b      	ldrb	r3, [r1, #1]
 8006910:	920f      	str	r2, [sp, #60]	; 0x3c
 8006912:	4659      	mov	r1, fp
 8006914:	f7fe fd98 	bl	8005448 <_svfprintf_r+0xc8>
 8006918:	ab16      	add	r3, sp, #88	; 0x58
 800691a:	77d8      	strb	r0, [r3, #31]
 800691c:	f7ff f81e 	bl	800595c <_svfprintf_r+0x5dc>
 8006920:	2301      	movs	r3, #1
 8006922:	425b      	negs	r3, r3
 8006924:	469a      	mov	sl, r3
 8006926:	e7f2      	b.n	800690e <_svfprintf_r+0x158e>
 8006928:	ab16      	add	r3, sp, #88	; 0x58
 800692a:	77d8      	strb	r0, [r3, #31]
 800692c:	f7fe ff6a 	bl	8005804 <_svfprintf_r+0x484>
 8006930:	ab16      	add	r3, sp, #88	; 0x58
 8006932:	77d8      	strb	r0, [r3, #31]
 8006934:	f7fe ff96 	bl	8005864 <_svfprintf_r+0x4e4>
 8006938:	ab16      	add	r3, sp, #88	; 0x58
 800693a:	77d8      	strb	r0, [r3, #31]
 800693c:	f7ff f88f 	bl	8005a5e <_svfprintf_r+0x6de>
 8006940:	480b      	ldr	r0, [pc, #44]	; (8006970 <_svfprintf_r+0x15f0>)
 8006942:	4681      	mov	r9, r0
 8006944:	e77f      	b.n	8006846 <_svfprintf_r+0x14c6>
 8006946:	230c      	movs	r3, #12
 8006948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	3b0d      	subs	r3, #13
 800694e:	930a      	str	r3, [sp, #40]	; 0x28
 8006950:	f7fe fda3 	bl	800549a <_svfprintf_r+0x11a>
 8006954:	aa16      	add	r2, sp, #88	; 0x58
 8006956:	232e      	movs	r3, #46	; 0x2e
 8006958:	4694      	mov	ip, r2
 800695a:	4463      	add	r3, ip
 800695c:	e653      	b.n	8006606 <_svfprintf_r+0x1286>
 800695e:	ab16      	add	r3, sp, #88	; 0x58
 8006960:	77d8      	strb	r0, [r3, #31]
 8006962:	f7fe fe7c 	bl	800565e <_svfprintf_r+0x2de>
 8006966:	ab16      	add	r3, sp, #88	; 0x58
 8006968:	77d8      	strb	r0, [r3, #31]
 800696a:	f7fe fdd4 	bl	8005516 <_svfprintf_r+0x196>
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	08009730 	.word	0x08009730
 8006974:	080096d8 	.word	0x080096d8
 8006978:	080096dc 	.word	0x080096dc
 800697c:	00000000 	.word	0x00000000

08006980 <quorem>:
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	4645      	mov	r5, r8
 8006984:	4680      	mov	r8, r0
 8006986:	46de      	mov	lr, fp
 8006988:	4657      	mov	r7, sl
 800698a:	464e      	mov	r6, r9
 800698c:	4642      	mov	r2, r8
 800698e:	b5e0      	push	{r5, r6, r7, lr}
 8006990:	690c      	ldr	r4, [r1, #16]
 8006992:	6912      	ldr	r2, [r2, #16]
 8006994:	b085      	sub	sp, #20
 8006996:	000b      	movs	r3, r1
 8006998:	9102      	str	r1, [sp, #8]
 800699a:	2000      	movs	r0, #0
 800699c:	4294      	cmp	r4, r2
 800699e:	dd00      	ble.n	80069a2 <quorem+0x22>
 80069a0:	e090      	b.n	8006ac4 <quorem+0x144>
 80069a2:	2214      	movs	r2, #20
 80069a4:	4694      	mov	ip, r2
 80069a6:	4463      	add	r3, ip
 80069a8:	4699      	mov	r9, r3
 80069aa:	464a      	mov	r2, r9
 80069ac:	3c01      	subs	r4, #1
 80069ae:	00a3      	lsls	r3, r4, #2
 80069b0:	18d6      	adds	r6, r2, r3
 80069b2:	2214      	movs	r2, #20
 80069b4:	4442      	add	r2, r8
 80069b6:	4693      	mov	fp, r2
 80069b8:	449b      	add	fp, r3
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	0015      	movs	r5, r2
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	465b      	mov	r3, fp
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	9201      	str	r2, [sp, #4]
 80069c6:	f7f9 fc0b 	bl	80001e0 <__udivsi3>
 80069ca:	1e03      	subs	r3, r0, #0
 80069cc:	9000      	str	r0, [sp, #0]
 80069ce:	d042      	beq.n	8006a56 <quorem+0xd6>
 80069d0:	0029      	movs	r1, r5
 80069d2:	2700      	movs	r7, #0
 80069d4:	464d      	mov	r5, r9
 80069d6:	2000      	movs	r0, #0
 80069d8:	46b1      	mov	r9, r6
 80069da:	46a2      	mov	sl, r4
 80069dc:	003e      	movs	r6, r7
 80069de:	0004      	movs	r4, r0
 80069e0:	469c      	mov	ip, r3
 80069e2:	002f      	movs	r7, r5
 80069e4:	0008      	movs	r0, r1
 80069e6:	9503      	str	r5, [sp, #12]
 80069e8:	4663      	mov	r3, ip
 80069ea:	cf04      	ldmia	r7!, {r2}
 80069ec:	0415      	lsls	r5, r2, #16
 80069ee:	0c2d      	lsrs	r5, r5, #16
 80069f0:	435d      	muls	r5, r3
 80069f2:	0c12      	lsrs	r2, r2, #16
 80069f4:	435a      	muls	r2, r3
 80069f6:	19ad      	adds	r5, r5, r6
 80069f8:	0c2b      	lsrs	r3, r5, #16
 80069fa:	18d2      	adds	r2, r2, r3
 80069fc:	6803      	ldr	r3, [r0, #0]
 80069fe:	042d      	lsls	r5, r5, #16
 8006a00:	0419      	lsls	r1, r3, #16
 8006a02:	0c09      	lsrs	r1, r1, #16
 8006a04:	1909      	adds	r1, r1, r4
 8006a06:	0c16      	lsrs	r6, r2, #16
 8006a08:	0c2d      	lsrs	r5, r5, #16
 8006a0a:	0412      	lsls	r2, r2, #16
 8006a0c:	1b49      	subs	r1, r1, r5
 8006a0e:	0c12      	lsrs	r2, r2, #16
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	140a      	asrs	r2, r1, #16
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	0409      	lsls	r1, r1, #16
 8006a1a:	141c      	asrs	r4, r3, #16
 8006a1c:	0c09      	lsrs	r1, r1, #16
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	4319      	orrs	r1, r3
 8006a22:	c002      	stmia	r0!, {r1}
 8006a24:	45b9      	cmp	r9, r7
 8006a26:	d2df      	bcs.n	80069e8 <quorem+0x68>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	464e      	mov	r6, r9
 8006a2c:	4699      	mov	r9, r3
 8006a2e:	465b      	mov	r3, fp
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4654      	mov	r4, sl
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10e      	bne.n	8006a56 <quorem+0xd6>
 8006a38:	465b      	mov	r3, fp
 8006a3a:	9a01      	ldr	r2, [sp, #4]
 8006a3c:	3b04      	subs	r3, #4
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d304      	bcc.n	8006a4c <quorem+0xcc>
 8006a42:	e006      	b.n	8006a52 <quorem+0xd2>
 8006a44:	3b04      	subs	r3, #4
 8006a46:	3c01      	subs	r4, #1
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d202      	bcs.n	8006a52 <quorem+0xd2>
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d0f8      	beq.n	8006a44 <quorem+0xc4>
 8006a52:	4643      	mov	r3, r8
 8006a54:	611c      	str	r4, [r3, #16]
 8006a56:	9902      	ldr	r1, [sp, #8]
 8006a58:	4640      	mov	r0, r8
 8006a5a:	f001 fea1 	bl	80087a0 <__mcmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	db2f      	blt.n	8006ac2 <quorem+0x142>
 8006a62:	464f      	mov	r7, r9
 8006a64:	2000      	movs	r0, #0
 8006a66:	9b00      	ldr	r3, [sp, #0]
 8006a68:	9d01      	ldr	r5, [sp, #4]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	cf02      	ldmia	r7!, {r1}
 8006a72:	041a      	lsls	r2, r3, #16
 8006a74:	0c12      	lsrs	r2, r2, #16
 8006a76:	1810      	adds	r0, r2, r0
 8006a78:	040a      	lsls	r2, r1, #16
 8006a7a:	0c12      	lsrs	r2, r2, #16
 8006a7c:	1a82      	subs	r2, r0, r2
 8006a7e:	0c09      	lsrs	r1, r1, #16
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	1411      	asrs	r1, r2, #16
 8006a86:	185b      	adds	r3, r3, r1
 8006a88:	0412      	lsls	r2, r2, #16
 8006a8a:	1418      	asrs	r0, r3, #16
 8006a8c:	0c12      	lsrs	r2, r2, #16
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	4313      	orrs	r3, r2
 8006a92:	c508      	stmia	r5!, {r3}
 8006a94:	42be      	cmp	r6, r7
 8006a96:	d2ea      	bcs.n	8006a6e <quorem+0xee>
 8006a98:	9901      	ldr	r1, [sp, #4]
 8006a9a:	00a3      	lsls	r3, r4, #2
 8006a9c:	468c      	mov	ip, r1
 8006a9e:	4463      	add	r3, ip
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	d10d      	bne.n	8006ac2 <quorem+0x142>
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	000a      	movs	r2, r1
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	d304      	bcc.n	8006ab8 <quorem+0x138>
 8006aae:	e006      	b.n	8006abe <quorem+0x13e>
 8006ab0:	3b04      	subs	r3, #4
 8006ab2:	3c01      	subs	r4, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d202      	bcs.n	8006abe <quorem+0x13e>
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	2900      	cmp	r1, #0
 8006abc:	d0f8      	beq.n	8006ab0 <quorem+0x130>
 8006abe:	4643      	mov	r3, r8
 8006ac0:	611c      	str	r4, [r3, #16]
 8006ac2:	9800      	ldr	r0, [sp, #0]
 8006ac4:	b005      	add	sp, #20
 8006ac6:	bc3c      	pop	{r2, r3, r4, r5}
 8006ac8:	4690      	mov	r8, r2
 8006aca:	4699      	mov	r9, r3
 8006acc:	46a2      	mov	sl, r4
 8006ace:	46ab      	mov	fp, r5
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	46c0      	nop			; (mov r8, r8)
	...

08006ae0 <_dtoa_r>:
 8006ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae2:	4657      	mov	r7, sl
 8006ae4:	464e      	mov	r6, r9
 8006ae6:	4645      	mov	r5, r8
 8006ae8:	46de      	mov	lr, fp
 8006aea:	b5e0      	push	{r5, r6, r7, lr}
 8006aec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006aee:	b099      	sub	sp, #100	; 0x64
 8006af0:	4682      	mov	sl, r0
 8006af2:	001d      	movs	r5, r3
 8006af4:	0016      	movs	r6, r2
 8006af6:	001f      	movs	r7, r3
 8006af8:	2900      	cmp	r1, #0
 8006afa:	d009      	beq.n	8006b10 <_dtoa_r+0x30>
 8006afc:	2301      	movs	r3, #1
 8006afe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b00:	4093      	lsls	r3, r2
 8006b02:	604a      	str	r2, [r1, #4]
 8006b04:	608b      	str	r3, [r1, #8]
 8006b06:	f001 fc23 	bl	8008350 <_Bfree>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b10:	46b8      	mov	r8, r7
 8006b12:	2f00      	cmp	r7, #0
 8006b14:	db37      	blt.n	8006b86 <_dtoa_r+0xa6>
 8006b16:	2300      	movs	r3, #0
 8006b18:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4bd6      	ldr	r3, [pc, #856]	; (8006e78 <_dtoa_r+0x398>)
 8006b20:	401a      	ands	r2, r3
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d018      	beq.n	8006b58 <_dtoa_r+0x78>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	0030      	movs	r0, r6
 8006b2c:	0039      	movs	r1, r7
 8006b2e:	f7f9 fcef 	bl	8000510 <__aeabi_dcmpeq>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d02f      	beq.n	8006b96 <_dtoa_r+0xb6>
 8006b36:	2301      	movs	r3, #1
 8006b38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d100      	bne.n	8006b44 <_dtoa_r+0x64>
 8006b42:	e22a      	b.n	8006f9a <_dtoa_r+0x4ba>
 8006b44:	48cd      	ldr	r0, [pc, #820]	; (8006e7c <_dtoa_r+0x39c>)
 8006b46:	6018      	str	r0, [r3, #0]
 8006b48:	3801      	subs	r0, #1
 8006b4a:	b019      	add	sp, #100	; 0x64
 8006b4c:	bc3c      	pop	{r2, r3, r4, r5}
 8006b4e:	4690      	mov	r8, r2
 8006b50:	4699      	mov	r9, r3
 8006b52:	46a2      	mov	sl, r4
 8006b54:	46ab      	mov	fp, r5
 8006b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b58:	4bc9      	ldr	r3, [pc, #804]	; (8006e80 <_dtoa_r+0x3a0>)
 8006b5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d10b      	bne.n	8006b7a <_dtoa_r+0x9a>
 8006b62:	4643      	mov	r3, r8
 8006b64:	0318      	lsls	r0, r3, #12
 8006b66:	d108      	bne.n	8006b7a <_dtoa_r+0x9a>
 8006b68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b6a:	48c6      	ldr	r0, [pc, #792]	; (8006e84 <_dtoa_r+0x3a4>)
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ec      	beq.n	8006b4a <_dtoa_r+0x6a>
 8006b70:	0003      	movs	r3, r0
 8006b72:	3308      	adds	r3, #8
 8006b74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e7e7      	b.n	8006b4a <_dtoa_r+0x6a>
 8006b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b7c:	48c2      	ldr	r0, [pc, #776]	; (8006e88 <_dtoa_r+0x3a8>)
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0e3      	beq.n	8006b4a <_dtoa_r+0x6a>
 8006b82:	1cc3      	adds	r3, r0, #3
 8006b84:	e7f6      	b.n	8006b74 <_dtoa_r+0x94>
 8006b86:	2301      	movs	r3, #1
 8006b88:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006b8a:	0068      	lsls	r0, r5, #1
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	0843      	lsrs	r3, r0, #1
 8006b90:	4698      	mov	r8, r3
 8006b92:	001f      	movs	r7, r3
 8006b94:	e7c2      	b.n	8006b1c <_dtoa_r+0x3c>
 8006b96:	ab16      	add	r3, sp, #88	; 0x58
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	ab17      	add	r3, sp, #92	; 0x5c
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	0032      	movs	r2, r6
 8006ba0:	003b      	movs	r3, r7
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	f001 febc 	bl	8008920 <__d2b>
 8006ba8:	4643      	mov	r3, r8
 8006baa:	4683      	mov	fp, r0
 8006bac:	0d1a      	lsrs	r2, r3, #20
 8006bae:	d100      	bne.n	8006bb2 <_dtoa_r+0xd2>
 8006bb0:	e1d6      	b.n	8006f60 <_dtoa_r+0x480>
 8006bb2:	033b      	lsls	r3, r7, #12
 8006bb4:	4cb5      	ldr	r4, [pc, #724]	; (8006e8c <_dtoa_r+0x3ac>)
 8006bb6:	0b1b      	lsrs	r3, r3, #12
 8006bb8:	431c      	orrs	r4, r3
 8006bba:	4bb5      	ldr	r3, [pc, #724]	; (8006e90 <_dtoa_r+0x3b0>)
 8006bbc:	0030      	movs	r0, r6
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bc2:	0021      	movs	r1, r4
 8006bc4:	4699      	mov	r9, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4490      	add	r8, r2
 8006bca:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4bb1      	ldr	r3, [pc, #708]	; (8006e94 <_dtoa_r+0x3b4>)
 8006bd0:	f7fa ff86 	bl	8001ae0 <__aeabi_dsub>
 8006bd4:	4ab0      	ldr	r2, [pc, #704]	; (8006e98 <_dtoa_r+0x3b8>)
 8006bd6:	4bb1      	ldr	r3, [pc, #708]	; (8006e9c <_dtoa_r+0x3bc>)
 8006bd8:	f7fa fd02 	bl	80015e0 <__aeabi_dmul>
 8006bdc:	4ab0      	ldr	r2, [pc, #704]	; (8006ea0 <_dtoa_r+0x3c0>)
 8006bde:	4bb1      	ldr	r3, [pc, #708]	; (8006ea4 <_dtoa_r+0x3c4>)
 8006be0:	f7f9 fda6 	bl	8000730 <__aeabi_dadd>
 8006be4:	0004      	movs	r4, r0
 8006be6:	4640      	mov	r0, r8
 8006be8:	000d      	movs	r5, r1
 8006bea:	f7fb fae9 	bl	80021c0 <__aeabi_i2d>
 8006bee:	4aae      	ldr	r2, [pc, #696]	; (8006ea8 <_dtoa_r+0x3c8>)
 8006bf0:	4bae      	ldr	r3, [pc, #696]	; (8006eac <_dtoa_r+0x3cc>)
 8006bf2:	f7fa fcf5 	bl	80015e0 <__aeabi_dmul>
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	000b      	movs	r3, r1
 8006bfa:	0020      	movs	r0, r4
 8006bfc:	0029      	movs	r1, r5
 8006bfe:	f7f9 fd97 	bl	8000730 <__aeabi_dadd>
 8006c02:	0004      	movs	r4, r0
 8006c04:	000d      	movs	r5, r1
 8006c06:	f7fb faa3 	bl	8002150 <__aeabi_d2iz>
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	9003      	str	r0, [sp, #12]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	0020      	movs	r0, r4
 8006c12:	0029      	movs	r1, r5
 8006c14:	f7f9 fc82 	bl	800051c <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d000      	beq.n	8006c1e <_dtoa_r+0x13e>
 8006c1c:	e2b1      	b.n	8007182 <_dtoa_r+0x6a2>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	9c03      	ldr	r4, [sp, #12]
 8006c22:	930c      	str	r3, [sp, #48]	; 0x30
 8006c24:	2c16      	cmp	r4, #22
 8006c26:	d810      	bhi.n	8006c4a <_dtoa_r+0x16a>
 8006c28:	49a1      	ldr	r1, [pc, #644]	; (8006eb0 <_dtoa_r+0x3d0>)
 8006c2a:	00e3      	lsls	r3, r4, #3
 8006c2c:	18c9      	adds	r1, r1, r3
 8006c2e:	0032      	movs	r2, r6
 8006c30:	6808      	ldr	r0, [r1, #0]
 8006c32:	6849      	ldr	r1, [r1, #4]
 8006c34:	003b      	movs	r3, r7
 8006c36:	f7f9 fc85 	bl	8000544 <__aeabi_dcmpgt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d100      	bne.n	8006c40 <_dtoa_r+0x160>
 8006c3e:	e31d      	b.n	800727c <_dtoa_r+0x79c>
 8006c40:	0023      	movs	r3, r4
 8006c42:	3b01      	subs	r3, #1
 8006c44:	9303      	str	r3, [sp, #12]
 8006c46:	2300      	movs	r3, #0
 8006c48:	930c      	str	r3, [sp, #48]	; 0x30
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	1a9a      	subs	r2, r3, r2
 8006c50:	2300      	movs	r3, #0
 8006c52:	9306      	str	r3, [sp, #24]
 8006c54:	0013      	movs	r3, r2
 8006c56:	3b01      	subs	r3, #1
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	d500      	bpl.n	8006c5e <_dtoa_r+0x17e>
 8006c5c:	e2a1      	b.n	80071a2 <_dtoa_r+0x6c2>
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da00      	bge.n	8006c66 <_dtoa_r+0x186>
 8006c64:	e284      	b.n	8007170 <_dtoa_r+0x690>
 8006c66:	469c      	mov	ip, r3
 8006c68:	930d      	str	r3, [sp, #52]	; 0x34
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	4699      	mov	r9, r3
 8006c70:	0011      	movs	r1, r2
 8006c72:	4461      	add	r1, ip
 8006c74:	9104      	str	r1, [sp, #16]
 8006c76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	d900      	bls.n	8006c7e <_dtoa_r+0x19e>
 8006c7c:	e18f      	b.n	8006f9e <_dtoa_r+0x4be>
 8006c7e:	2401      	movs	r4, #1
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	dd02      	ble.n	8006c8a <_dtoa_r+0x1aa>
 8006c84:	2400      	movs	r4, #0
 8006c86:	3b04      	subs	r3, #4
 8006c88:	9322      	str	r3, [sp, #136]	; 0x88
 8006c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d101      	bne.n	8006c94 <_dtoa_r+0x1b4>
 8006c90:	f000 fcce 	bl	8007630 <_dtoa_r+0xb50>
 8006c94:	dc01      	bgt.n	8006c9a <_dtoa_r+0x1ba>
 8006c96:	f000 fc92 	bl	80075be <_dtoa_r+0xade>
 8006c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d101      	bne.n	8006ca4 <_dtoa_r+0x1c4>
 8006ca0:	f000 fc40 	bl	8007524 <_dtoa_r+0xa44>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d001      	beq.n	8006cb2 <_dtoa_r+0x1d2>
 8006cae:	f000 fc8b 	bl	80075c8 <_dtoa_r+0xae8>
 8006cb2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006cb4:	9b03      	ldr	r3, [sp, #12]
 8006cb6:	4694      	mov	ip, r2
 8006cb8:	4463      	add	r3, ip
 8006cba:	930e      	str	r3, [sp, #56]	; 0x38
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	1e1d      	subs	r5, r3, #0
 8006cc2:	dc01      	bgt.n	8006cc8 <_dtoa_r+0x1e8>
 8006cc4:	f000 fd49 	bl	800775a <_dtoa_r+0xc7a>
 8006cc8:	9b07      	ldr	r3, [sp, #28]
 8006cca:	4698      	mov	r8, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4652      	mov	r2, sl
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8006cd4:	2d17      	cmp	r5, #23
 8006cd6:	d90a      	bls.n	8006cee <_dtoa_r+0x20e>
 8006cd8:	2201      	movs	r2, #1
 8006cda:	3304      	adds	r3, #4
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	0018      	movs	r0, r3
 8006ce0:	3014      	adds	r0, #20
 8006ce2:	0011      	movs	r1, r2
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	4285      	cmp	r5, r0
 8006ce8:	d2f8      	bcs.n	8006cdc <_dtoa_r+0x1fc>
 8006cea:	4653      	mov	r3, sl
 8006cec:	6459      	str	r1, [r3, #68]	; 0x44
 8006cee:	4650      	mov	r0, sl
 8006cf0:	f001 fb06 	bl	8008300 <_Balloc>
 8006cf4:	4653      	mov	r3, sl
 8006cf6:	6418      	str	r0, [r3, #64]	; 0x40
 8006cf8:	4643      	mov	r3, r8
 8006cfa:	900a      	str	r0, [sp, #40]	; 0x28
 8006cfc:	2b0e      	cmp	r3, #14
 8006cfe:	d900      	bls.n	8006d02 <_dtoa_r+0x222>
 8006d00:	e161      	b.n	8006fc6 <_dtoa_r+0x4e6>
 8006d02:	2c00      	cmp	r4, #0
 8006d04:	d100      	bne.n	8006d08 <_dtoa_r+0x228>
 8006d06:	e15e      	b.n	8006fc6 <_dtoa_r+0x4e6>
 8006d08:	9610      	str	r6, [sp, #64]	; 0x40
 8006d0a:	9711      	str	r7, [sp, #68]	; 0x44
 8006d0c:	9e03      	ldr	r6, [sp, #12]
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	dc01      	bgt.n	8006d16 <_dtoa_r+0x236>
 8006d12:	f000 fd25 	bl	8007760 <_dtoa_r+0xc80>
 8006d16:	0032      	movs	r2, r6
 8006d18:	210f      	movs	r1, #15
 8006d1a:	4b65      	ldr	r3, [pc, #404]	; (8006eb0 <_dtoa_r+0x3d0>)
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	00d2      	lsls	r2, r2, #3
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	1136      	asrs	r6, r6, #4
 8006d24:	681c      	ldr	r4, [r3, #0]
 8006d26:	685d      	ldr	r5, [r3, #4]
 8006d28:	06f3      	lsls	r3, r6, #27
 8006d2a:	d401      	bmi.n	8006d30 <_dtoa_r+0x250>
 8006d2c:	f000 fcca 	bl	80076c4 <_dtoa_r+0xbe4>
 8006d30:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <_dtoa_r+0x3d4>)
 8006d32:	400e      	ands	r6, r1
 8006d34:	6a1a      	ldr	r2, [r3, #32]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006d3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d3c:	f7fa f808 	bl	8000d50 <__aeabi_ddiv>
 8006d40:	2303      	movs	r3, #3
 8006d42:	4698      	mov	r8, r3
 8006d44:	9008      	str	r0, [sp, #32]
 8006d46:	9109      	str	r1, [sp, #36]	; 0x24
 8006d48:	2e00      	cmp	r6, #0
 8006d4a:	d011      	beq.n	8006d70 <_dtoa_r+0x290>
 8006d4c:	4f59      	ldr	r7, [pc, #356]	; (8006eb4 <_dtoa_r+0x3d4>)
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4233      	tst	r3, r6
 8006d52:	d009      	beq.n	8006d68 <_dtoa_r+0x288>
 8006d54:	469c      	mov	ip, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	0020      	movs	r0, r4
 8006d5c:	0029      	movs	r1, r5
 8006d5e:	44e0      	add	r8, ip
 8006d60:	f7fa fc3e 	bl	80015e0 <__aeabi_dmul>
 8006d64:	0004      	movs	r4, r0
 8006d66:	000d      	movs	r5, r1
 8006d68:	1076      	asrs	r6, r6, #1
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	2e00      	cmp	r6, #0
 8006d6e:	d1ee      	bne.n	8006d4e <_dtoa_r+0x26e>
 8006d70:	0022      	movs	r2, r4
 8006d72:	9808      	ldr	r0, [sp, #32]
 8006d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d76:	002b      	movs	r3, r5
 8006d78:	f7f9 ffea 	bl	8000d50 <__aeabi_ddiv>
 8006d7c:	0006      	movs	r6, r0
 8006d7e:	000f      	movs	r7, r1
 8006d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <_dtoa_r+0x2ba>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <_dtoa_r+0x3ac>)
 8006d8a:	0030      	movs	r0, r6
 8006d8c:	0039      	movs	r1, r7
 8006d8e:	f7f9 fbc5 	bl	800051c <__aeabi_dcmplt>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d001      	beq.n	8006d9a <_dtoa_r+0x2ba>
 8006d96:	f000 fdc2 	bl	800791e <_dtoa_r+0xe3e>
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	f7fb fa10 	bl	80021c0 <__aeabi_i2d>
 8006da0:	0032      	movs	r2, r6
 8006da2:	003b      	movs	r3, r7
 8006da4:	f7fa fc1c 	bl	80015e0 <__aeabi_dmul>
 8006da8:	2200      	movs	r2, #0
 8006daa:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <_dtoa_r+0x3d8>)
 8006dac:	f7f9 fcc0 	bl	8000730 <__aeabi_dadd>
 8006db0:	4a42      	ldr	r2, [pc, #264]	; (8006ebc <_dtoa_r+0x3dc>)
 8006db2:	000b      	movs	r3, r1
 8006db4:	4694      	mov	ip, r2
 8006db6:	4463      	add	r3, ip
 8006db8:	9008      	str	r0, [sp, #32]
 8006dba:	9109      	str	r1, [sp, #36]	; 0x24
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	9b07      	ldr	r3, [sp, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <_dtoa_r+0x2e8>
 8006dc4:	f000 fc50 	bl	8007668 <_dtoa_r+0xb88>
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	9312      	str	r3, [sp, #72]	; 0x48
 8006dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <_dtoa_r+0x2fa>
 8006dd6:	f000 fd1d 	bl	8007814 <_dtoa_r+0xd34>
 8006dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ddc:	2000      	movs	r0, #0
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <_dtoa_r+0x3d0>)
 8006de2:	00d2      	lsls	r2, r2, #3
 8006de4:	189b      	adds	r3, r3, r2
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4935      	ldr	r1, [pc, #212]	; (8006ec0 <_dtoa_r+0x3e0>)
 8006dec:	f7f9 ffb0 	bl	8000d50 <__aeabi_ddiv>
 8006df0:	9a08      	ldr	r2, [sp, #32]
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	f7fa fe74 	bl	8001ae0 <__aeabi_dsub>
 8006df8:	9008      	str	r0, [sp, #32]
 8006dfa:	9109      	str	r1, [sp, #36]	; 0x24
 8006dfc:	0039      	movs	r1, r7
 8006dfe:	0030      	movs	r0, r6
 8006e00:	f7fb f9a6 	bl	8002150 <__aeabi_d2iz>
 8006e04:	0004      	movs	r4, r0
 8006e06:	f7fb f9db 	bl	80021c0 <__aeabi_i2d>
 8006e0a:	0002      	movs	r2, r0
 8006e0c:	000b      	movs	r3, r1
 8006e0e:	0030      	movs	r0, r6
 8006e10:	0039      	movs	r1, r7
 8006e12:	f7fa fe65 	bl	8001ae0 <__aeabi_dsub>
 8006e16:	0005      	movs	r5, r0
 8006e18:	000e      	movs	r6, r1
 8006e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1c:	3430      	adds	r4, #48	; 0x30
 8006e1e:	1c51      	adds	r1, r2, #1
 8006e20:	b2e7      	uxtb	r7, r4
 8006e22:	9114      	str	r1, [sp, #80]	; 0x50
 8006e24:	7017      	strb	r7, [r2, #0]
 8006e26:	0033      	movs	r3, r6
 8006e28:	9808      	ldr	r0, [sp, #32]
 8006e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e2c:	002a      	movs	r2, r5
 8006e2e:	f7f9 fb89 	bl	8000544 <__aeabi_dcmpgt>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d001      	beq.n	8006e3a <_dtoa_r+0x35a>
 8006e36:	f000 fdfe 	bl	8007a36 <_dtoa_r+0xf56>
 8006e3a:	002a      	movs	r2, r5
 8006e3c:	0033      	movs	r3, r6
 8006e3e:	2000      	movs	r0, #0
 8006e40:	4912      	ldr	r1, [pc, #72]	; (8006e8c <_dtoa_r+0x3ac>)
 8006e42:	f7fa fe4d 	bl	8001ae0 <__aeabi_dsub>
 8006e46:	0002      	movs	r2, r0
 8006e48:	000b      	movs	r3, r1
 8006e4a:	9808      	ldr	r0, [sp, #32]
 8006e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e4e:	f7f9 fb79 	bl	8000544 <__aeabi_dcmpgt>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d001      	beq.n	8006e5a <_dtoa_r+0x37a>
 8006e56:	f000 fde7 	bl	8007a28 <_dtoa_r+0xf48>
 8006e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <_dtoa_r+0x384>
 8006e60:	f000 fc78 	bl	8007754 <_dtoa_r+0xc74>
 8006e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e68:	4694      	mov	ip, r2
 8006e6a:	4463      	add	r3, ip
 8006e6c:	4698      	mov	r8, r3
 8006e6e:	464b      	mov	r3, r9
 8006e70:	9312      	str	r3, [sp, #72]	; 0x48
 8006e72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e74:	4699      	mov	r9, r3
 8006e76:	e038      	b.n	8006eea <_dtoa_r+0x40a>
 8006e78:	7ff00000 	.word	0x7ff00000
 8006e7c:	08009711 	.word	0x08009711
 8006e80:	0000270f 	.word	0x0000270f
 8006e84:	08009740 	.word	0x08009740
 8006e88:	0800974c 	.word	0x0800974c
 8006e8c:	3ff00000 	.word	0x3ff00000
 8006e90:	fffffc01 	.word	0xfffffc01
 8006e94:	3ff80000 	.word	0x3ff80000
 8006e98:	636f4361 	.word	0x636f4361
 8006e9c:	3fd287a7 	.word	0x3fd287a7
 8006ea0:	8b60c8b3 	.word	0x8b60c8b3
 8006ea4:	3fc68a28 	.word	0x3fc68a28
 8006ea8:	509f79fb 	.word	0x509f79fb
 8006eac:	3fd34413 	.word	0x3fd34413
 8006eb0:	08009780 	.word	0x08009780
 8006eb4:	08009750 	.word	0x08009750
 8006eb8:	401c0000 	.word	0x401c0000
 8006ebc:	fcc00000 	.word	0xfcc00000
 8006ec0:	3fe00000 	.word	0x3fe00000
 8006ec4:	002a      	movs	r2, r5
 8006ec6:	0033      	movs	r3, r6
 8006ec8:	2000      	movs	r0, #0
 8006eca:	49b9      	ldr	r1, [pc, #740]	; (80071b0 <_dtoa_r+0x6d0>)
 8006ecc:	f7fa fe08 	bl	8001ae0 <__aeabi_dsub>
 8006ed0:	9a08      	ldr	r2, [sp, #32]
 8006ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed4:	f7f9 fb22 	bl	800051c <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d001      	beq.n	8006ee0 <_dtoa_r+0x400>
 8006edc:	f000 fd74 	bl	80079c8 <_dtoa_r+0xee8>
 8006ee0:	46a1      	mov	r9, r4
 8006ee2:	4544      	cmp	r4, r8
 8006ee4:	d101      	bne.n	8006eea <_dtoa_r+0x40a>
 8006ee6:	f000 fc33 	bl	8007750 <_dtoa_r+0xc70>
 8006eea:	9808      	ldr	r0, [sp, #32]
 8006eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4bb0      	ldr	r3, [pc, #704]	; (80071b4 <_dtoa_r+0x6d4>)
 8006ef2:	f7fa fb75 	bl	80015e0 <__aeabi_dmul>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4bae      	ldr	r3, [pc, #696]	; (80071b4 <_dtoa_r+0x6d4>)
 8006efa:	9008      	str	r0, [sp, #32]
 8006efc:	9109      	str	r1, [sp, #36]	; 0x24
 8006efe:	0028      	movs	r0, r5
 8006f00:	0031      	movs	r1, r6
 8006f02:	f7fa fb6d 	bl	80015e0 <__aeabi_dmul>
 8006f06:	000d      	movs	r5, r1
 8006f08:	0004      	movs	r4, r0
 8006f0a:	f7fb f921 	bl	8002150 <__aeabi_d2iz>
 8006f0e:	0007      	movs	r7, r0
 8006f10:	f7fb f956 	bl	80021c0 <__aeabi_i2d>
 8006f14:	0002      	movs	r2, r0
 8006f16:	000b      	movs	r3, r1
 8006f18:	0020      	movs	r0, r4
 8006f1a:	0029      	movs	r1, r5
 8006f1c:	f7fa fde0 	bl	8001ae0 <__aeabi_dsub>
 8006f20:	464b      	mov	r3, r9
 8006f22:	3730      	adds	r7, #48	; 0x30
 8006f24:	b2ff      	uxtb	r7, r7
 8006f26:	1c5c      	adds	r4, r3, #1
 8006f28:	701f      	strb	r7, [r3, #0]
 8006f2a:	9a08      	ldr	r2, [sp, #32]
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	0005      	movs	r5, r0
 8006f30:	000e      	movs	r6, r1
 8006f32:	f7f9 faf3 	bl	800051c <__aeabi_dcmplt>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d0c4      	beq.n	8006ec4 <_dtoa_r+0x3e4>
 8006f3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3c:	9303      	str	r3, [sp, #12]
 8006f3e:	4659      	mov	r1, fp
 8006f40:	4650      	mov	r0, sl
 8006f42:	f001 fa05 	bl	8008350 <_Bfree>
 8006f46:	2300      	movs	r3, #0
 8006f48:	7023      	strb	r3, [r4, #0]
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f4e:	3301      	adds	r3, #1
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d100      	bne.n	8006f5a <_dtoa_r+0x47a>
 8006f58:	e3a8      	b.n	80076ac <_dtoa_r+0xbcc>
 8006f5a:	601c      	str	r4, [r3, #0]
 8006f5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f5e:	e5f4      	b.n	8006b4a <_dtoa_r+0x6a>
 8006f60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f62:	4699      	mov	r9, r3
 8006f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f66:	444b      	add	r3, r9
 8006f68:	001c      	movs	r4, r3
 8006f6a:	4b93      	ldr	r3, [pc, #588]	; (80071b8 <_dtoa_r+0x6d8>)
 8006f6c:	18e3      	adds	r3, r4, r3
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	dc00      	bgt.n	8006f74 <_dtoa_r+0x494>
 8006f72:	e17e      	b.n	8007272 <_dtoa_r+0x792>
 8006f74:	0031      	movs	r1, r6
 8006f76:	4a91      	ldr	r2, [pc, #580]	; (80071bc <_dtoa_r+0x6dc>)
 8006f78:	4640      	mov	r0, r8
 8006f7a:	18a2      	adds	r2, r4, r2
 8006f7c:	40d1      	lsrs	r1, r2
 8006f7e:	000a      	movs	r2, r1
 8006f80:	2140      	movs	r1, #64	; 0x40
 8006f82:	1acb      	subs	r3, r1, r3
 8006f84:	4098      	lsls	r0, r3
 8006f86:	4310      	orrs	r0, r2
 8006f88:	f7fb f962 	bl	8002250 <__aeabi_ui2d>
 8006f8c:	1e63      	subs	r3, r4, #1
 8006f8e:	4698      	mov	r8, r3
 8006f90:	2301      	movs	r3, #1
 8006f92:	4d8b      	ldr	r5, [pc, #556]	; (80071c0 <_dtoa_r+0x6e0>)
 8006f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f96:	1949      	adds	r1, r1, r5
 8006f98:	e618      	b.n	8006bcc <_dtoa_r+0xec>
 8006f9a:	488a      	ldr	r0, [pc, #552]	; (80071c4 <_dtoa_r+0x6e4>)
 8006f9c:	e5d5      	b.n	8006b4a <_dtoa_r+0x6a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4652      	mov	r2, sl
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	f001 f9aa 	bl	8008300 <_Balloc>
 8006fac:	4653      	mov	r3, sl
 8006fae:	6418      	str	r0, [r3, #64]	; 0x40
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	425b      	negs	r3, r3
 8006fb4:	9307      	str	r3, [sp, #28]
 8006fb6:	930e      	str	r3, [sp, #56]	; 0x38
 8006fb8:	3302      	adds	r3, #2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	900a      	str	r0, [sp, #40]	; 0x28
 8006fc2:	9223      	str	r2, [sp, #140]	; 0x8c
 8006fc4:	9322      	str	r3, [sp, #136]	; 0x88
 8006fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da00      	bge.n	8006fce <_dtoa_r+0x4ee>
 8006fcc:	e0ab      	b.n	8007126 <_dtoa_r+0x646>
 8006fce:	9a03      	ldr	r2, [sp, #12]
 8006fd0:	2a0e      	cmp	r2, #14
 8006fd2:	dd00      	ble.n	8006fd6 <_dtoa_r+0x4f6>
 8006fd4:	e0a7      	b.n	8007126 <_dtoa_r+0x646>
 8006fd6:	4b7c      	ldr	r3, [pc, #496]	; (80071c8 <_dtoa_r+0x6e8>)
 8006fd8:	00d2      	lsls	r2, r2, #3
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	685c      	ldr	r4, [r3, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	9405      	str	r4, [sp, #20]
 8006fe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da00      	bge.n	8006fec <_dtoa_r+0x50c>
 8006fea:	e2a7      	b.n	800753c <_dtoa_r+0xa5c>
 8006fec:	9c04      	ldr	r4, [sp, #16]
 8006fee:	9d05      	ldr	r5, [sp, #20]
 8006ff0:	0030      	movs	r0, r6
 8006ff2:	0022      	movs	r2, r4
 8006ff4:	002b      	movs	r3, r5
 8006ff6:	0039      	movs	r1, r7
 8006ff8:	f7f9 feaa 	bl	8000d50 <__aeabi_ddiv>
 8006ffc:	f7fb f8a8 	bl	8002150 <__aeabi_d2iz>
 8007000:	4680      	mov	r8, r0
 8007002:	f7fb f8dd 	bl	80021c0 <__aeabi_i2d>
 8007006:	0022      	movs	r2, r4
 8007008:	002b      	movs	r3, r5
 800700a:	f7fa fae9 	bl	80015e0 <__aeabi_dmul>
 800700e:	0002      	movs	r2, r0
 8007010:	000b      	movs	r3, r1
 8007012:	0030      	movs	r0, r6
 8007014:	0039      	movs	r1, r7
 8007016:	f7fa fd63 	bl	8001ae0 <__aeabi_dsub>
 800701a:	4643      	mov	r3, r8
 800701c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701e:	3330      	adds	r3, #48	; 0x30
 8007020:	7013      	strb	r3, [r2, #0]
 8007022:	9b07      	ldr	r3, [sp, #28]
 8007024:	0006      	movs	r6, r0
 8007026:	000f      	movs	r7, r1
 8007028:	1c54      	adds	r4, r2, #1
 800702a:	2b01      	cmp	r3, #1
 800702c:	d04e      	beq.n	80070cc <_dtoa_r+0x5ec>
 800702e:	2200      	movs	r2, #0
 8007030:	4b60      	ldr	r3, [pc, #384]	; (80071b4 <_dtoa_r+0x6d4>)
 8007032:	f7fa fad5 	bl	80015e0 <__aeabi_dmul>
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	0006      	movs	r6, r0
 800703c:	000f      	movs	r7, r1
 800703e:	f7f9 fa67 	bl	8000510 <__aeabi_dcmpeq>
 8007042:	2800      	cmp	r0, #0
 8007044:	d000      	beq.n	8007048 <_dtoa_r+0x568>
 8007046:	e77a      	b.n	8006f3e <_dtoa_r+0x45e>
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	9a07      	ldr	r2, [sp, #28]
 800704c:	1c9d      	adds	r5, r3, #2
 800704e:	469c      	mov	ip, r3
 8007050:	465b      	mov	r3, fp
 8007052:	9306      	str	r3, [sp, #24]
 8007054:	4653      	mov	r3, sl
 8007056:	4462      	add	r2, ip
 8007058:	46aa      	mov	sl, r5
 800705a:	9c04      	ldr	r4, [sp, #16]
 800705c:	9d05      	ldr	r5, [sp, #20]
 800705e:	4691      	mov	r9, r2
 8007060:	9307      	str	r3, [sp, #28]
 8007062:	e00f      	b.n	8007084 <_dtoa_r+0x5a4>
 8007064:	2200      	movs	r2, #0
 8007066:	4b53      	ldr	r3, [pc, #332]	; (80071b4 <_dtoa_r+0x6d4>)
 8007068:	f7fa faba 	bl	80015e0 <__aeabi_dmul>
 800706c:	2301      	movs	r3, #1
 800706e:	469c      	mov	ip, r3
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	0006      	movs	r6, r0
 8007076:	000f      	movs	r7, r1
 8007078:	44e2      	add	sl, ip
 800707a:	f7f9 fa49 	bl	8000510 <__aeabi_dcmpeq>
 800707e:	2800      	cmp	r0, #0
 8007080:	d000      	beq.n	8007084 <_dtoa_r+0x5a4>
 8007082:	e2d9      	b.n	8007638 <_dtoa_r+0xb58>
 8007084:	0022      	movs	r2, r4
 8007086:	002b      	movs	r3, r5
 8007088:	0030      	movs	r0, r6
 800708a:	0039      	movs	r1, r7
 800708c:	f7f9 fe60 	bl	8000d50 <__aeabi_ddiv>
 8007090:	f7fb f85e 	bl	8002150 <__aeabi_d2iz>
 8007094:	4680      	mov	r8, r0
 8007096:	f7fb f893 	bl	80021c0 <__aeabi_i2d>
 800709a:	0022      	movs	r2, r4
 800709c:	002b      	movs	r3, r5
 800709e:	f7fa fa9f 	bl	80015e0 <__aeabi_dmul>
 80070a2:	0002      	movs	r2, r0
 80070a4:	000b      	movs	r3, r1
 80070a6:	0030      	movs	r0, r6
 80070a8:	0039      	movs	r1, r7
 80070aa:	f7fa fd19 	bl	8001ae0 <__aeabi_dsub>
 80070ae:	4653      	mov	r3, sl
 80070b0:	4642      	mov	r2, r8
 80070b2:	3b01      	subs	r3, #1
 80070b4:	3230      	adds	r2, #48	; 0x30
 80070b6:	0006      	movs	r6, r0
 80070b8:	000f      	movs	r7, r1
 80070ba:	46d3      	mov	fp, sl
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	45d1      	cmp	r9, sl
 80070c0:	d1d0      	bne.n	8007064 <_dtoa_r+0x584>
 80070c2:	9b06      	ldr	r3, [sp, #24]
 80070c4:	4654      	mov	r4, sl
 80070c6:	469b      	mov	fp, r3
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	469a      	mov	sl, r3
 80070cc:	0032      	movs	r2, r6
 80070ce:	003b      	movs	r3, r7
 80070d0:	0030      	movs	r0, r6
 80070d2:	0039      	movs	r1, r7
 80070d4:	f7f9 fb2c 	bl	8000730 <__aeabi_dadd>
 80070d8:	0006      	movs	r6, r0
 80070da:	000f      	movs	r7, r1
 80070dc:	0002      	movs	r2, r0
 80070de:	000b      	movs	r3, r1
 80070e0:	9804      	ldr	r0, [sp, #16]
 80070e2:	9905      	ldr	r1, [sp, #20]
 80070e4:	f7f9 fa1a 	bl	800051c <__aeabi_dcmplt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d10c      	bne.n	8007106 <_dtoa_r+0x626>
 80070ec:	9804      	ldr	r0, [sp, #16]
 80070ee:	9905      	ldr	r1, [sp, #20]
 80070f0:	0032      	movs	r2, r6
 80070f2:	003b      	movs	r3, r7
 80070f4:	f7f9 fa0c 	bl	8000510 <__aeabi_dcmpeq>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d100      	bne.n	80070fe <_dtoa_r+0x61e>
 80070fc:	e71f      	b.n	8006f3e <_dtoa_r+0x45e>
 80070fe:	4643      	mov	r3, r8
 8007100:	07db      	lsls	r3, r3, #31
 8007102:	d400      	bmi.n	8007106 <_dtoa_r+0x626>
 8007104:	e71b      	b.n	8006f3e <_dtoa_r+0x45e>
 8007106:	1e65      	subs	r5, r4, #1
 8007108:	782f      	ldrb	r7, [r5, #0]
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	e006      	b.n	800711c <_dtoa_r+0x63c>
 800710e:	429d      	cmp	r5, r3
 8007110:	d100      	bne.n	8007114 <_dtoa_r+0x634>
 8007112:	e351      	b.n	80077b8 <_dtoa_r+0xcd8>
 8007114:	3c02      	subs	r4, #2
 8007116:	7827      	ldrb	r7, [r4, #0]
 8007118:	002c      	movs	r4, r5
 800711a:	3d01      	subs	r5, #1
 800711c:	2f39      	cmp	r7, #57	; 0x39
 800711e:	d0f6      	beq.n	800710e <_dtoa_r+0x62e>
 8007120:	3701      	adds	r7, #1
 8007122:	702f      	strb	r7, [r5, #0]
 8007124:	e70b      	b.n	8006f3e <_dtoa_r+0x45e>
 8007126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007128:	2a00      	cmp	r2, #0
 800712a:	d04f      	beq.n	80071cc <_dtoa_r+0x6ec>
 800712c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800712e:	2a01      	cmp	r2, #1
 8007130:	dc00      	bgt.n	8007134 <_dtoa_r+0x654>
 8007132:	e22c      	b.n	800758e <_dtoa_r+0xaae>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	1e5c      	subs	r4, r3, #1
 8007138:	464b      	mov	r3, r9
 800713a:	45a1      	cmp	r9, r4
 800713c:	da00      	bge.n	8007140 <_dtoa_r+0x660>
 800713e:	e2b8      	b.n	80076b2 <_dtoa_r+0xbd2>
 8007140:	1b1c      	subs	r4, r3, r4
 8007142:	9b07      	ldr	r3, [sp, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da00      	bge.n	800714a <_dtoa_r+0x66a>
 8007148:	e3d4      	b.n	80078f4 <_dtoa_r+0xe14>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	9308      	str	r3, [sp, #32]
 800714e:	9b07      	ldr	r3, [sp, #28]
 8007150:	9a06      	ldr	r2, [sp, #24]
 8007152:	2101      	movs	r1, #1
 8007154:	4694      	mov	ip, r2
 8007156:	449c      	add	ip, r3
 8007158:	4662      	mov	r2, ip
 800715a:	9206      	str	r2, [sp, #24]
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	4650      	mov	r0, sl
 8007160:	4694      	mov	ip, r2
 8007162:	449c      	add	ip, r3
 8007164:	4663      	mov	r3, ip
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	f001 f99a 	bl	80084a0 <__i2b>
 800716c:	4680      	mov	r8, r0
 800716e:	e032      	b.n	80071d6 <_dtoa_r+0x6f6>
 8007170:	9a06      	ldr	r2, [sp, #24]
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	425b      	negs	r3, r3
 8007178:	4699      	mov	r9, r3
 800717a:	2300      	movs	r3, #0
 800717c:	9206      	str	r2, [sp, #24]
 800717e:	930d      	str	r3, [sp, #52]	; 0x34
 8007180:	e579      	b.n	8006c76 <_dtoa_r+0x196>
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f7fb f81c 	bl	80021c0 <__aeabi_i2d>
 8007188:	000b      	movs	r3, r1
 800718a:	0002      	movs	r2, r0
 800718c:	0029      	movs	r1, r5
 800718e:	0020      	movs	r0, r4
 8007190:	f7f9 f9be 	bl	8000510 <__aeabi_dcmpeq>
 8007194:	0002      	movs	r2, r0
 8007196:	4250      	negs	r0, r2
 8007198:	4150      	adcs	r0, r2
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	1a1b      	subs	r3, r3, r0
 800719e:	9303      	str	r3, [sp, #12]
 80071a0:	e53d      	b.n	8006c1e <_dtoa_r+0x13e>
 80071a2:	2301      	movs	r3, #1
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	9306      	str	r3, [sp, #24]
 80071a8:	2300      	movs	r3, #0
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	e557      	b.n	8006c5e <_dtoa_r+0x17e>
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	3ff00000 	.word	0x3ff00000
 80071b4:	40240000 	.word	0x40240000
 80071b8:	00000432 	.word	0x00000432
 80071bc:	00000412 	.word	0x00000412
 80071c0:	fe100000 	.word	0xfe100000
 80071c4:	08009710 	.word	0x08009710
 80071c8:	08009780 	.word	0x08009780
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	464c      	mov	r4, r9
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	2300      	movs	r3, #0
 80071d4:	4698      	mov	r8, r3
 80071d6:	9908      	ldr	r1, [sp, #32]
 80071d8:	1e0b      	subs	r3, r1, #0
 80071da:	dd0e      	ble.n	80071fa <_dtoa_r+0x71a>
 80071dc:	9a04      	ldr	r2, [sp, #16]
 80071de:	2a00      	cmp	r2, #0
 80071e0:	dd0b      	ble.n	80071fa <_dtoa_r+0x71a>
 80071e2:	4293      	cmp	r3, r2
 80071e4:	dd00      	ble.n	80071e8 <_dtoa_r+0x708>
 80071e6:	e187      	b.n	80074f8 <_dtoa_r+0xa18>
 80071e8:	9a06      	ldr	r2, [sp, #24]
 80071ea:	1ad2      	subs	r2, r2, r3
 80071ec:	9206      	str	r2, [sp, #24]
 80071ee:	9a08      	ldr	r2, [sp, #32]
 80071f0:	1ad2      	subs	r2, r2, r3
 80071f2:	9208      	str	r2, [sp, #32]
 80071f4:	9a04      	ldr	r2, [sp, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	464b      	mov	r3, r9
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01a      	beq.n	8007236 <_dtoa_r+0x756>
 8007200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d100      	bne.n	8007208 <_dtoa_r+0x728>
 8007206:	e1bb      	b.n	8007580 <_dtoa_r+0xaa0>
 8007208:	2c00      	cmp	r4, #0
 800720a:	dd10      	ble.n	800722e <_dtoa_r+0x74e>
 800720c:	4641      	mov	r1, r8
 800720e:	0022      	movs	r2, r4
 8007210:	4650      	mov	r0, sl
 8007212:	f001 fa05 	bl	8008620 <__pow5mult>
 8007216:	465a      	mov	r2, fp
 8007218:	0001      	movs	r1, r0
 800721a:	4680      	mov	r8, r0
 800721c:	4650      	mov	r0, sl
 800721e:	f001 f94f 	bl	80084c0 <__multiply>
 8007222:	0005      	movs	r5, r0
 8007224:	4659      	mov	r1, fp
 8007226:	4650      	mov	r0, sl
 8007228:	f001 f892 	bl	8008350 <_Bfree>
 800722c:	46ab      	mov	fp, r5
 800722e:	464b      	mov	r3, r9
 8007230:	1b1a      	subs	r2, r3, r4
 8007232:	d000      	beq.n	8007236 <_dtoa_r+0x756>
 8007234:	e1a5      	b.n	8007582 <_dtoa_r+0xaa2>
 8007236:	2101      	movs	r1, #1
 8007238:	4650      	mov	r0, sl
 800723a:	f001 f931 	bl	80084a0 <__i2b>
 800723e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007240:	4681      	mov	r9, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	dd1d      	ble.n	8007282 <_dtoa_r+0x7a2>
 8007246:	001a      	movs	r2, r3
 8007248:	0001      	movs	r1, r0
 800724a:	4650      	mov	r0, sl
 800724c:	f001 f9e8 	bl	8008620 <__pow5mult>
 8007250:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007252:	4681      	mov	r9, r0
 8007254:	2b01      	cmp	r3, #1
 8007256:	dc00      	bgt.n	800725a <_dtoa_r+0x77a>
 8007258:	e150      	b.n	80074fc <_dtoa_r+0xa1c>
 800725a:	2400      	movs	r4, #0
 800725c:	464b      	mov	r3, r9
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	3303      	adds	r3, #3
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	444b      	add	r3, r9
 8007266:	6858      	ldr	r0, [r3, #4]
 8007268:	f001 f8ca 	bl	8008400 <__hi0bits>
 800726c:	2320      	movs	r3, #32
 800726e:	1a1b      	subs	r3, r3, r0
 8007270:	e010      	b.n	8007294 <_dtoa_r+0x7b4>
 8007272:	2220      	movs	r2, #32
 8007274:	0030      	movs	r0, r6
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	4098      	lsls	r0, r3
 800727a:	e685      	b.n	8006f88 <_dtoa_r+0x4a8>
 800727c:	2300      	movs	r3, #0
 800727e:	930c      	str	r3, [sp, #48]	; 0x30
 8007280:	e4e3      	b.n	8006c4a <_dtoa_r+0x16a>
 8007282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007284:	2400      	movs	r4, #0
 8007286:	2b01      	cmp	r3, #1
 8007288:	dc00      	bgt.n	800728c <_dtoa_r+0x7ac>
 800728a:	e18b      	b.n	80075a4 <_dtoa_r+0xac4>
 800728c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800728e:	2301      	movs	r3, #1
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1e3      	bne.n	800725c <_dtoa_r+0x77c>
 8007294:	9904      	ldr	r1, [sp, #16]
 8007296:	201f      	movs	r0, #31
 8007298:	468c      	mov	ip, r1
 800729a:	4463      	add	r3, ip
 800729c:	4018      	ands	r0, r3
 800729e:	d100      	bne.n	80072a2 <_dtoa_r+0x7c2>
 80072a0:	e0ae      	b.n	8007400 <_dtoa_r+0x920>
 80072a2:	2320      	movs	r3, #32
 80072a4:	1a1b      	subs	r3, r3, r0
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	dc00      	bgt.n	80072ac <_dtoa_r+0x7cc>
 80072aa:	e3cc      	b.n	8007a46 <_dtoa_r+0xf66>
 80072ac:	231c      	movs	r3, #28
 80072ae:	1a18      	subs	r0, r3, r0
 80072b0:	9b06      	ldr	r3, [sp, #24]
 80072b2:	469c      	mov	ip, r3
 80072b4:	4484      	add	ip, r0
 80072b6:	4663      	mov	r3, ip
 80072b8:	9306      	str	r3, [sp, #24]
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	469c      	mov	ip, r3
 80072be:	4484      	add	ip, r0
 80072c0:	4663      	mov	r3, ip
 80072c2:	468c      	mov	ip, r1
 80072c4:	4484      	add	ip, r0
 80072c6:	9308      	str	r3, [sp, #32]
 80072c8:	4663      	mov	r3, ip
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	9b06      	ldr	r3, [sp, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dd05      	ble.n	80072de <_dtoa_r+0x7fe>
 80072d2:	4659      	mov	r1, fp
 80072d4:	001a      	movs	r2, r3
 80072d6:	4650      	mov	r0, sl
 80072d8:	f001 fa02 	bl	80086e0 <__lshift>
 80072dc:	4683      	mov	fp, r0
 80072de:	9b04      	ldr	r3, [sp, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dd05      	ble.n	80072f0 <_dtoa_r+0x810>
 80072e4:	4649      	mov	r1, r9
 80072e6:	001a      	movs	r2, r3
 80072e8:	4650      	mov	r0, sl
 80072ea:	f001 f9f9 	bl	80086e0 <__lshift>
 80072ee:	4681      	mov	r9, r0
 80072f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d000      	beq.n	80072f8 <_dtoa_r+0x818>
 80072f6:	e094      	b.n	8007422 <_dtoa_r+0x942>
 80072f8:	9b07      	ldr	r3, [sp, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dc00      	bgt.n	8007300 <_dtoa_r+0x820>
 80072fe:	e175      	b.n	80075ec <_dtoa_r+0xb0c>
 8007300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d100      	bne.n	8007308 <_dtoa_r+0x828>
 8007306:	e0a6      	b.n	8007456 <_dtoa_r+0x976>
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dd05      	ble.n	800731a <_dtoa_r+0x83a>
 800730e:	4641      	mov	r1, r8
 8007310:	001a      	movs	r2, r3
 8007312:	4650      	mov	r0, sl
 8007314:	f001 f9e4 	bl	80086e0 <__lshift>
 8007318:	4680      	mov	r8, r0
 800731a:	4643      	mov	r3, r8
 800731c:	930c      	str	r3, [sp, #48]	; 0x30
 800731e:	2c00      	cmp	r4, #0
 8007320:	d000      	beq.n	8007324 <_dtoa_r+0x844>
 8007322:	e250      	b.n	80077c6 <_dtoa_r+0xce6>
 8007324:	9c07      	ldr	r4, [sp, #28]
 8007326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007328:	3c01      	subs	r4, #1
 800732a:	0023      	movs	r3, r4
 800732c:	4694      	mov	ip, r2
 800732e:	4463      	add	r3, ip
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	2301      	movs	r3, #1
 8007334:	4033      	ands	r3, r6
 8007336:	9307      	str	r3, [sp, #28]
 8007338:	464b      	mov	r3, r9
 800733a:	9306      	str	r3, [sp, #24]
 800733c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800733e:	4657      	mov	r7, sl
 8007340:	4645      	mov	r5, r8
 8007342:	465e      	mov	r6, fp
 8007344:	4692      	mov	sl, r2
 8007346:	4698      	mov	r8, r3
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	0030      	movs	r0, r6
 800734c:	0019      	movs	r1, r3
 800734e:	4699      	mov	r9, r3
 8007350:	f7ff fb16 	bl	8006980 <quorem>
 8007354:	0003      	movs	r3, r0
 8007356:	900b      	str	r0, [sp, #44]	; 0x2c
 8007358:	3330      	adds	r3, #48	; 0x30
 800735a:	0029      	movs	r1, r5
 800735c:	0030      	movs	r0, r6
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	f001 fa1e 	bl	80087a0 <__mcmp>
 8007364:	4649      	mov	r1, r9
 8007366:	0004      	movs	r4, r0
 8007368:	4642      	mov	r2, r8
 800736a:	0038      	movs	r0, r7
 800736c:	f001 fa38 	bl	80087e0 <__mdiff>
 8007370:	68c3      	ldr	r3, [r0, #12]
 8007372:	4681      	mov	r9, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d000      	beq.n	800737a <_dtoa_r+0x89a>
 8007378:	e11e      	b.n	80075b8 <_dtoa_r+0xad8>
 800737a:	0001      	movs	r1, r0
 800737c:	0030      	movs	r0, r6
 800737e:	f001 fa0f 	bl	80087a0 <__mcmp>
 8007382:	4683      	mov	fp, r0
 8007384:	4649      	mov	r1, r9
 8007386:	0038      	movs	r0, r7
 8007388:	f000 ffe2 	bl	8008350 <_Bfree>
 800738c:	465b      	mov	r3, fp
 800738e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007390:	4313      	orrs	r3, r2
 8007392:	d103      	bne.n	800739c <_dtoa_r+0x8bc>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d100      	bne.n	800739c <_dtoa_r+0x8bc>
 800739a:	e306      	b.n	80079aa <_dtoa_r+0xeca>
 800739c:	2c00      	cmp	r4, #0
 800739e:	da00      	bge.n	80073a2 <_dtoa_r+0x8c2>
 80073a0:	e1a8      	b.n	80076f4 <_dtoa_r+0xc14>
 80073a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073a4:	431c      	orrs	r4, r3
 80073a6:	d103      	bne.n	80073b0 <_dtoa_r+0x8d0>
 80073a8:	9b07      	ldr	r3, [sp, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d100      	bne.n	80073b0 <_dtoa_r+0x8d0>
 80073ae:	e1a1      	b.n	80076f4 <_dtoa_r+0xc14>
 80073b0:	465b      	mov	r3, fp
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd00      	ble.n	80073b8 <_dtoa_r+0x8d8>
 80073b6:	e282      	b.n	80078be <_dtoa_r+0xdde>
 80073b8:	4669      	mov	r1, sp
 80073ba:	4652      	mov	r2, sl
 80073bc:	4653      	mov	r3, sl
 80073be:	7c09      	ldrb	r1, [r1, #16]
 80073c0:	1c5c      	adds	r4, r3, #1
 80073c2:	7011      	strb	r1, [r2, #0]
 80073c4:	9a08      	ldr	r2, [sp, #32]
 80073c6:	4552      	cmp	r2, sl
 80073c8:	d100      	bne.n	80073cc <_dtoa_r+0x8ec>
 80073ca:	e28a      	b.n	80078e2 <_dtoa_r+0xe02>
 80073cc:	0031      	movs	r1, r6
 80073ce:	2300      	movs	r3, #0
 80073d0:	220a      	movs	r2, #10
 80073d2:	0038      	movs	r0, r7
 80073d4:	f000 ffcc 	bl	8008370 <__multadd>
 80073d8:	2300      	movs	r3, #0
 80073da:	0006      	movs	r6, r0
 80073dc:	220a      	movs	r2, #10
 80073de:	0029      	movs	r1, r5
 80073e0:	0038      	movs	r0, r7
 80073e2:	4545      	cmp	r5, r8
 80073e4:	d100      	bne.n	80073e8 <_dtoa_r+0x908>
 80073e6:	e0e1      	b.n	80075ac <_dtoa_r+0xacc>
 80073e8:	f000 ffc2 	bl	8008370 <__multadd>
 80073ec:	4641      	mov	r1, r8
 80073ee:	0005      	movs	r5, r0
 80073f0:	2300      	movs	r3, #0
 80073f2:	220a      	movs	r2, #10
 80073f4:	0038      	movs	r0, r7
 80073f6:	f000 ffbb 	bl	8008370 <__multadd>
 80073fa:	46a2      	mov	sl, r4
 80073fc:	4680      	mov	r8, r0
 80073fe:	e7a3      	b.n	8007348 <_dtoa_r+0x868>
 8007400:	201c      	movs	r0, #28
 8007402:	9b06      	ldr	r3, [sp, #24]
 8007404:	469c      	mov	ip, r3
 8007406:	4484      	add	ip, r0
 8007408:	4663      	mov	r3, ip
 800740a:	9306      	str	r3, [sp, #24]
 800740c:	9b08      	ldr	r3, [sp, #32]
 800740e:	469c      	mov	ip, r3
 8007410:	4484      	add	ip, r0
 8007412:	4663      	mov	r3, ip
 8007414:	9308      	str	r3, [sp, #32]
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	469c      	mov	ip, r3
 800741a:	4484      	add	ip, r0
 800741c:	4663      	mov	r3, ip
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	e754      	b.n	80072cc <_dtoa_r+0x7ec>
 8007422:	4649      	mov	r1, r9
 8007424:	4658      	mov	r0, fp
 8007426:	f001 f9bb 	bl	80087a0 <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	db00      	blt.n	8007430 <_dtoa_r+0x950>
 800742e:	e763      	b.n	80072f8 <_dtoa_r+0x818>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	4659      	mov	r1, fp
 8007434:	3b01      	subs	r3, #1
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	220a      	movs	r2, #10
 800743a:	2300      	movs	r3, #0
 800743c:	4650      	mov	r0, sl
 800743e:	f000 ff97 	bl	8008370 <__multadd>
 8007442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007444:	4683      	mov	fp, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d000      	beq.n	800744c <_dtoa_r+0x96c>
 800744a:	e2ca      	b.n	80079e2 <_dtoa_r+0xf02>
 800744c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	dc00      	bgt.n	8007454 <_dtoa_r+0x974>
 8007452:	e2d8      	b.n	8007a06 <_dtoa_r+0xf26>
 8007454:	9307      	str	r3, [sp, #28]
 8007456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007458:	465d      	mov	r5, fp
 800745a:	2400      	movs	r4, #0
 800745c:	9f07      	ldr	r7, [sp, #28]
 800745e:	469b      	mov	fp, r3
 8007460:	e006      	b.n	8007470 <_dtoa_r+0x990>
 8007462:	0029      	movs	r1, r5
 8007464:	2300      	movs	r3, #0
 8007466:	220a      	movs	r2, #10
 8007468:	4650      	mov	r0, sl
 800746a:	f000 ff81 	bl	8008370 <__multadd>
 800746e:	0005      	movs	r5, r0
 8007470:	4649      	mov	r1, r9
 8007472:	0028      	movs	r0, r5
 8007474:	f7ff fa84 	bl	8006980 <quorem>
 8007478:	465b      	mov	r3, fp
 800747a:	3030      	adds	r0, #48	; 0x30
 800747c:	5518      	strb	r0, [r3, r4]
 800747e:	3401      	adds	r4, #1
 8007480:	42bc      	cmp	r4, r7
 8007482:	dbee      	blt.n	8007462 <_dtoa_r+0x982>
 8007484:	46ab      	mov	fp, r5
 8007486:	0006      	movs	r6, r0
 8007488:	9c07      	ldr	r4, [sp, #28]
 800748a:	2c00      	cmp	r4, #0
 800748c:	dc00      	bgt.n	8007490 <_dtoa_r+0x9b0>
 800748e:	e237      	b.n	8007900 <_dtoa_r+0xe20>
 8007490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007492:	2700      	movs	r7, #0
 8007494:	469c      	mov	ip, r3
 8007496:	4464      	add	r4, ip
 8007498:	4659      	mov	r1, fp
 800749a:	2201      	movs	r2, #1
 800749c:	4650      	mov	r0, sl
 800749e:	f001 f91f 	bl	80086e0 <__lshift>
 80074a2:	4649      	mov	r1, r9
 80074a4:	4683      	mov	fp, r0
 80074a6:	f001 f97b 	bl	80087a0 <__mcmp>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	dc00      	bgt.n	80074b0 <_dtoa_r+0x9d0>
 80074ae:	e144      	b.n	800773a <_dtoa_r+0xc5a>
 80074b0:	1e65      	subs	r5, r4, #1
 80074b2:	782b      	ldrb	r3, [r5, #0]
 80074b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b6:	e006      	b.n	80074c6 <_dtoa_r+0x9e6>
 80074b8:	4295      	cmp	r5, r2
 80074ba:	d100      	bne.n	80074be <_dtoa_r+0x9de>
 80074bc:	e0b1      	b.n	8007622 <_dtoa_r+0xb42>
 80074be:	3c02      	subs	r4, #2
 80074c0:	7823      	ldrb	r3, [r4, #0]
 80074c2:	002c      	movs	r4, r5
 80074c4:	3d01      	subs	r5, #1
 80074c6:	2b39      	cmp	r3, #57	; 0x39
 80074c8:	d0f6      	beq.n	80074b8 <_dtoa_r+0x9d8>
 80074ca:	3301      	adds	r3, #1
 80074cc:	702b      	strb	r3, [r5, #0]
 80074ce:	4649      	mov	r1, r9
 80074d0:	4650      	mov	r0, sl
 80074d2:	f000 ff3d 	bl	8008350 <_Bfree>
 80074d6:	4643      	mov	r3, r8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d100      	bne.n	80074de <_dtoa_r+0x9fe>
 80074dc:	e52f      	b.n	8006f3e <_dtoa_r+0x45e>
 80074de:	2f00      	cmp	r7, #0
 80074e0:	d005      	beq.n	80074ee <_dtoa_r+0xa0e>
 80074e2:	4547      	cmp	r7, r8
 80074e4:	d003      	beq.n	80074ee <_dtoa_r+0xa0e>
 80074e6:	0039      	movs	r1, r7
 80074e8:	4650      	mov	r0, sl
 80074ea:	f000 ff31 	bl	8008350 <_Bfree>
 80074ee:	4641      	mov	r1, r8
 80074f0:	4650      	mov	r0, sl
 80074f2:	f000 ff2d 	bl	8008350 <_Bfree>
 80074f6:	e522      	b.n	8006f3e <_dtoa_r+0x45e>
 80074f8:	0013      	movs	r3, r2
 80074fa:	e675      	b.n	80071e8 <_dtoa_r+0x708>
 80074fc:	2e00      	cmp	r6, #0
 80074fe:	d000      	beq.n	8007502 <_dtoa_r+0xa22>
 8007500:	e6ab      	b.n	800725a <_dtoa_r+0x77a>
 8007502:	033b      	lsls	r3, r7, #12
 8007504:	2400      	movs	r4, #0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d000      	beq.n	800750c <_dtoa_r+0xa2c>
 800750a:	e6bf      	b.n	800728c <_dtoa_r+0x7ac>
 800750c:	4bba      	ldr	r3, [pc, #744]	; (80077f8 <_dtoa_r+0xd18>)
 800750e:	423b      	tst	r3, r7
 8007510:	d100      	bne.n	8007514 <_dtoa_r+0xa34>
 8007512:	e6bb      	b.n	800728c <_dtoa_r+0x7ac>
 8007514:	9b06      	ldr	r3, [sp, #24]
 8007516:	3401      	adds	r4, #1
 8007518:	3301      	adds	r3, #1
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	3301      	adds	r3, #1
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	e6b3      	b.n	800728c <_dtoa_r+0x7ac>
 8007524:	2301      	movs	r3, #1
 8007526:	930b      	str	r3, [sp, #44]	; 0x2c
 8007528:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800752a:	2b00      	cmp	r3, #0
 800752c:	dc00      	bgt.n	8007530 <_dtoa_r+0xa50>
 800752e:	e0d1      	b.n	80076d4 <_dtoa_r+0xbf4>
 8007530:	001d      	movs	r5, r3
 8007532:	4698      	mov	r8, r3
 8007534:	930e      	str	r3, [sp, #56]	; 0x38
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	f7ff fbc8 	bl	8006ccc <_dtoa_r+0x1ec>
 800753c:	9b07      	ldr	r3, [sp, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dd00      	ble.n	8007544 <_dtoa_r+0xa64>
 8007542:	e553      	b.n	8006fec <_dtoa_r+0x50c>
 8007544:	d000      	beq.n	8007548 <_dtoa_r+0xa68>
 8007546:	e0ad      	b.n	80076a4 <_dtoa_r+0xbc4>
 8007548:	9804      	ldr	r0, [sp, #16]
 800754a:	9905      	ldr	r1, [sp, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	4bab      	ldr	r3, [pc, #684]	; (80077fc <_dtoa_r+0xd1c>)
 8007550:	f7fa f846 	bl	80015e0 <__aeabi_dmul>
 8007554:	003b      	movs	r3, r7
 8007556:	0032      	movs	r2, r6
 8007558:	f7f8 fffe 	bl	8000558 <__aeabi_dcmpge>
 800755c:	2300      	movs	r3, #0
 800755e:	4699      	mov	r9, r3
 8007560:	4698      	mov	r8, r3
 8007562:	2800      	cmp	r0, #0
 8007564:	d055      	beq.n	8007612 <_dtoa_r+0xb32>
 8007566:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007568:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800756a:	43db      	mvns	r3, r3
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	4649      	mov	r1, r9
 8007570:	4650      	mov	r0, sl
 8007572:	f000 feed 	bl	8008350 <_Bfree>
 8007576:	4643      	mov	r3, r8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d100      	bne.n	800757e <_dtoa_r+0xa9e>
 800757c:	e4df      	b.n	8006f3e <_dtoa_r+0x45e>
 800757e:	e7b6      	b.n	80074ee <_dtoa_r+0xa0e>
 8007580:	464a      	mov	r2, r9
 8007582:	4659      	mov	r1, fp
 8007584:	4650      	mov	r0, sl
 8007586:	f001 f84b 	bl	8008620 <__pow5mult>
 800758a:	4683      	mov	fp, r0
 800758c:	e653      	b.n	8007236 <_dtoa_r+0x756>
 800758e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007590:	2a00      	cmp	r2, #0
 8007592:	d100      	bne.n	8007596 <_dtoa_r+0xab6>
 8007594:	e1b6      	b.n	8007904 <_dtoa_r+0xe24>
 8007596:	4a9a      	ldr	r2, [pc, #616]	; (8007800 <_dtoa_r+0xd20>)
 8007598:	464c      	mov	r4, r9
 800759a:	4694      	mov	ip, r2
 800759c:	9a06      	ldr	r2, [sp, #24]
 800759e:	4463      	add	r3, ip
 80075a0:	9208      	str	r2, [sp, #32]
 80075a2:	e5d5      	b.n	8007150 <_dtoa_r+0x670>
 80075a4:	2e00      	cmp	r6, #0
 80075a6:	d000      	beq.n	80075aa <_dtoa_r+0xaca>
 80075a8:	e670      	b.n	800728c <_dtoa_r+0x7ac>
 80075aa:	e7aa      	b.n	8007502 <_dtoa_r+0xa22>
 80075ac:	f000 fee0 	bl	8008370 <__multadd>
 80075b0:	46a2      	mov	sl, r4
 80075b2:	0005      	movs	r5, r0
 80075b4:	4680      	mov	r8, r0
 80075b6:	e6c7      	b.n	8007348 <_dtoa_r+0x868>
 80075b8:	2301      	movs	r3, #1
 80075ba:	469b      	mov	fp, r3
 80075bc:	e6e2      	b.n	8007384 <_dtoa_r+0x8a4>
 80075be:	2300      	movs	r3, #0
 80075c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d0af      	beq.n	8007528 <_dtoa_r+0xa48>
 80075c8:	2400      	movs	r4, #0
 80075ca:	4653      	mov	r3, sl
 80075cc:	0021      	movs	r1, r4
 80075ce:	645c      	str	r4, [r3, #68]	; 0x44
 80075d0:	4650      	mov	r0, sl
 80075d2:	f000 fe95 	bl	8008300 <_Balloc>
 80075d6:	4653      	mov	r3, sl
 80075d8:	6418      	str	r0, [r3, #64]	; 0x40
 80075da:	2301      	movs	r3, #1
 80075dc:	425b      	negs	r3, r3
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	930e      	str	r3, [sp, #56]	; 0x38
 80075e2:	3302      	adds	r3, #2
 80075e4:	900a      	str	r0, [sp, #40]	; 0x28
 80075e6:	9423      	str	r4, [sp, #140]	; 0x8c
 80075e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ea:	e4ec      	b.n	8006fc6 <_dtoa_r+0x4e6>
 80075ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	dc00      	bgt.n	80075f4 <_dtoa_r+0xb14>
 80075f2:	e685      	b.n	8007300 <_dtoa_r+0x820>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1b5      	bne.n	8007566 <_dtoa_r+0xa86>
 80075fa:	4649      	mov	r1, r9
 80075fc:	2205      	movs	r2, #5
 80075fe:	4650      	mov	r0, sl
 8007600:	f000 feb6 	bl	8008370 <__multadd>
 8007604:	4681      	mov	r9, r0
 8007606:	0001      	movs	r1, r0
 8007608:	4658      	mov	r0, fp
 800760a:	f001 f8c9 	bl	80087a0 <__mcmp>
 800760e:	2800      	cmp	r0, #0
 8007610:	dda9      	ble.n	8007566 <_dtoa_r+0xa86>
 8007612:	2331      	movs	r3, #49	; 0x31
 8007614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007616:	7013      	strb	r3, [r2, #0]
 8007618:	9b03      	ldr	r3, [sp, #12]
 800761a:	1c54      	adds	r4, r2, #1
 800761c:	3301      	adds	r3, #1
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	e7a5      	b.n	800756e <_dtoa_r+0xa8e>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007626:	3301      	adds	r3, #1
 8007628:	9303      	str	r3, [sp, #12]
 800762a:	2331      	movs	r3, #49	; 0x31
 800762c:	7013      	strb	r3, [r2, #0]
 800762e:	e74e      	b.n	80074ce <_dtoa_r+0x9ee>
 8007630:	2300      	movs	r3, #0
 8007632:	930b      	str	r3, [sp, #44]	; 0x2c
 8007634:	f7ff fb3d 	bl	8006cb2 <_dtoa_r+0x1d2>
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	465c      	mov	r4, fp
 800763c:	469b      	mov	fp, r3
 800763e:	9b07      	ldr	r3, [sp, #28]
 8007640:	469a      	mov	sl, r3
 8007642:	e47c      	b.n	8006f3e <_dtoa_r+0x45e>
 8007644:	4640      	mov	r0, r8
 8007646:	f7fa fdbb 	bl	80021c0 <__aeabi_i2d>
 800764a:	0032      	movs	r2, r6
 800764c:	003b      	movs	r3, r7
 800764e:	f7f9 ffc7 	bl	80015e0 <__aeabi_dmul>
 8007652:	2200      	movs	r2, #0
 8007654:	4b6b      	ldr	r3, [pc, #428]	; (8007804 <_dtoa_r+0xd24>)
 8007656:	f7f9 f86b 	bl	8000730 <__aeabi_dadd>
 800765a:	4a6b      	ldr	r2, [pc, #428]	; (8007808 <_dtoa_r+0xd28>)
 800765c:	000b      	movs	r3, r1
 800765e:	4694      	mov	ip, r2
 8007660:	4463      	add	r3, ip
 8007662:	9008      	str	r0, [sp, #32]
 8007664:	9109      	str	r1, [sp, #36]	; 0x24
 8007666:	9309      	str	r3, [sp, #36]	; 0x24
 8007668:	2200      	movs	r2, #0
 800766a:	4b64      	ldr	r3, [pc, #400]	; (80077fc <_dtoa_r+0xd1c>)
 800766c:	0030      	movs	r0, r6
 800766e:	0039      	movs	r1, r7
 8007670:	f7fa fa36 	bl	8001ae0 <__aeabi_dsub>
 8007674:	9e08      	ldr	r6, [sp, #32]
 8007676:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007678:	0032      	movs	r2, r6
 800767a:	003b      	movs	r3, r7
 800767c:	0004      	movs	r4, r0
 800767e:	000d      	movs	r5, r1
 8007680:	f7f8 ff60 	bl	8000544 <__aeabi_dcmpgt>
 8007684:	2800      	cmp	r0, #0
 8007686:	d000      	beq.n	800768a <_dtoa_r+0xbaa>
 8007688:	e0b2      	b.n	80077f0 <_dtoa_r+0xd10>
 800768a:	2080      	movs	r0, #128	; 0x80
 800768c:	0600      	lsls	r0, r0, #24
 800768e:	4684      	mov	ip, r0
 8007690:	0039      	movs	r1, r7
 8007692:	4461      	add	r1, ip
 8007694:	000b      	movs	r3, r1
 8007696:	0032      	movs	r2, r6
 8007698:	0020      	movs	r0, r4
 800769a:	0029      	movs	r1, r5
 800769c:	f7f8 ff3e 	bl	800051c <__aeabi_dcmplt>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d057      	beq.n	8007754 <_dtoa_r+0xc74>
 80076a4:	2300      	movs	r3, #0
 80076a6:	4699      	mov	r9, r3
 80076a8:	4698      	mov	r8, r3
 80076aa:	e75c      	b.n	8007566 <_dtoa_r+0xa86>
 80076ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076ae:	f7ff fa4c 	bl	8006b4a <_dtoa_r+0x6a>
 80076b2:	1ae2      	subs	r2, r4, r3
 80076b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076b6:	46a1      	mov	r9, r4
 80076b8:	469c      	mov	ip, r3
 80076ba:	4494      	add	ip, r2
 80076bc:	4663      	mov	r3, ip
 80076be:	2400      	movs	r4, #0
 80076c0:	930d      	str	r3, [sp, #52]	; 0x34
 80076c2:	e53e      	b.n	8007142 <_dtoa_r+0x662>
 80076c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076c8:	9208      	str	r2, [sp, #32]
 80076ca:	9309      	str	r3, [sp, #36]	; 0x24
 80076cc:	2302      	movs	r3, #2
 80076ce:	4698      	mov	r8, r3
 80076d0:	f7ff fb3a 	bl	8006d48 <_dtoa_r+0x268>
 80076d4:	2300      	movs	r3, #0
 80076d6:	4652      	mov	r2, sl
 80076d8:	2100      	movs	r1, #0
 80076da:	6453      	str	r3, [r2, #68]	; 0x44
 80076dc:	4650      	mov	r0, sl
 80076de:	f000 fe0f 	bl	8008300 <_Balloc>
 80076e2:	4653      	mov	r3, sl
 80076e4:	6418      	str	r0, [r3, #64]	; 0x40
 80076e6:	2301      	movs	r3, #1
 80076e8:	900a      	str	r0, [sp, #40]	; 0x28
 80076ea:	9307      	str	r3, [sp, #28]
 80076ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80076ee:	930e      	str	r3, [sp, #56]	; 0x38
 80076f0:	f7ff fb07 	bl	8006d02 <_dtoa_r+0x222>
 80076f4:	4643      	mov	r3, r8
 80076f6:	930c      	str	r3, [sp, #48]	; 0x30
 80076f8:	465b      	mov	r3, fp
 80076fa:	9a06      	ldr	r2, [sp, #24]
 80076fc:	46a8      	mov	r8, r5
 80076fe:	46b3      	mov	fp, r6
 8007700:	4655      	mov	r5, sl
 8007702:	9e04      	ldr	r6, [sp, #16]
 8007704:	4691      	mov	r9, r2
 8007706:	46ba      	mov	sl, r7
 8007708:	2b00      	cmp	r3, #0
 800770a:	dd10      	ble.n	800772e <_dtoa_r+0xc4e>
 800770c:	4659      	mov	r1, fp
 800770e:	2201      	movs	r2, #1
 8007710:	0038      	movs	r0, r7
 8007712:	f000 ffe5 	bl	80086e0 <__lshift>
 8007716:	4649      	mov	r1, r9
 8007718:	4683      	mov	fp, r0
 800771a:	f001 f841 	bl	80087a0 <__mcmp>
 800771e:	2800      	cmp	r0, #0
 8007720:	dc00      	bgt.n	8007724 <_dtoa_r+0xc44>
 8007722:	e157      	b.n	80079d4 <_dtoa_r+0xef4>
 8007724:	2e39      	cmp	r6, #57	; 0x39
 8007726:	d100      	bne.n	800772a <_dtoa_r+0xc4a>
 8007728:	e122      	b.n	8007970 <_dtoa_r+0xe90>
 800772a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800772c:	3631      	adds	r6, #49	; 0x31
 800772e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007730:	4647      	mov	r7, r8
 8007732:	1c6c      	adds	r4, r5, #1
 8007734:	702e      	strb	r6, [r5, #0]
 8007736:	4698      	mov	r8, r3
 8007738:	e6c9      	b.n	80074ce <_dtoa_r+0x9ee>
 800773a:	2800      	cmp	r0, #0
 800773c:	d103      	bne.n	8007746 <_dtoa_r+0xc66>
 800773e:	07f3      	lsls	r3, r6, #31
 8007740:	d501      	bpl.n	8007746 <_dtoa_r+0xc66>
 8007742:	e6b5      	b.n	80074b0 <_dtoa_r+0x9d0>
 8007744:	001c      	movs	r4, r3
 8007746:	1e63      	subs	r3, r4, #1
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	2a30      	cmp	r2, #48	; 0x30
 800774c:	d0fa      	beq.n	8007744 <_dtoa_r+0xc64>
 800774e:	e6be      	b.n	80074ce <_dtoa_r+0x9ee>
 8007750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007752:	4699      	mov	r9, r3
 8007754:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007756:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007758:	e435      	b.n	8006fc6 <_dtoa_r+0x4e6>
 800775a:	2501      	movs	r5, #1
 800775c:	f7ff fab4 	bl	8006cc8 <_dtoa_r+0x1e8>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d100      	bne.n	8007768 <_dtoa_r+0xc88>
 8007766:	e0d4      	b.n	8007912 <_dtoa_r+0xe32>
 8007768:	9810      	ldr	r0, [sp, #64]	; 0x40
 800776a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800776c:	425c      	negs	r4, r3
 800776e:	230f      	movs	r3, #15
 8007770:	4a26      	ldr	r2, [pc, #152]	; (800780c <_dtoa_r+0xd2c>)
 8007772:	4023      	ands	r3, r4
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f7f9 ff30 	bl	80015e0 <__aeabi_dmul>
 8007780:	1124      	asrs	r4, r4, #4
 8007782:	0006      	movs	r6, r0
 8007784:	000f      	movs	r7, r1
 8007786:	2c00      	cmp	r4, #0
 8007788:	d100      	bne.n	800778c <_dtoa_r+0xcac>
 800778a:	e149      	b.n	8007a20 <_dtoa_r+0xf40>
 800778c:	2302      	movs	r3, #2
 800778e:	4698      	mov	r8, r3
 8007790:	4d1f      	ldr	r5, [pc, #124]	; (8007810 <_dtoa_r+0xd30>)
 8007792:	2301      	movs	r3, #1
 8007794:	4223      	tst	r3, r4
 8007796:	d009      	beq.n	80077ac <_dtoa_r+0xccc>
 8007798:	469c      	mov	ip, r3
 800779a:	682a      	ldr	r2, [r5, #0]
 800779c:	686b      	ldr	r3, [r5, #4]
 800779e:	0030      	movs	r0, r6
 80077a0:	0039      	movs	r1, r7
 80077a2:	44e0      	add	r8, ip
 80077a4:	f7f9 ff1c 	bl	80015e0 <__aeabi_dmul>
 80077a8:	0006      	movs	r6, r0
 80077aa:	000f      	movs	r7, r1
 80077ac:	1064      	asrs	r4, r4, #1
 80077ae:	3508      	adds	r5, #8
 80077b0:	2c00      	cmp	r4, #0
 80077b2:	d1ee      	bne.n	8007792 <_dtoa_r+0xcb2>
 80077b4:	f7ff fae4 	bl	8006d80 <_dtoa_r+0x2a0>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	2730      	movs	r7, #48	; 0x30
 80077bc:	3301      	adds	r3, #1
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	2330      	movs	r3, #48	; 0x30
 80077c2:	702b      	strb	r3, [r5, #0]
 80077c4:	e4ac      	b.n	8007120 <_dtoa_r+0x640>
 80077c6:	6859      	ldr	r1, [r3, #4]
 80077c8:	4650      	mov	r0, sl
 80077ca:	f000 fd99 	bl	8008300 <_Balloc>
 80077ce:	4643      	mov	r3, r8
 80077d0:	4641      	mov	r1, r8
 80077d2:	0004      	movs	r4, r0
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	310c      	adds	r1, #12
 80077d8:	1c9a      	adds	r2, r3, #2
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	300c      	adds	r0, #12
 80077de:	f7fd fd5f 	bl	80052a0 <memcpy>
 80077e2:	2201      	movs	r2, #1
 80077e4:	0021      	movs	r1, r4
 80077e6:	4650      	mov	r0, sl
 80077e8:	f000 ff7a 	bl	80086e0 <__lshift>
 80077ec:	900c      	str	r0, [sp, #48]	; 0x30
 80077ee:	e599      	b.n	8007324 <_dtoa_r+0x844>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4699      	mov	r9, r3
 80077f4:	4698      	mov	r8, r3
 80077f6:	e70c      	b.n	8007612 <_dtoa_r+0xb32>
 80077f8:	7ff00000 	.word	0x7ff00000
 80077fc:	40140000 	.word	0x40140000
 8007800:	00000433 	.word	0x00000433
 8007804:	401c0000 	.word	0x401c0000
 8007808:	fcc00000 	.word	0xfcc00000
 800780c:	08009780 	.word	0x08009780
 8007810:	08009750 	.word	0x08009750
 8007814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007816:	498f      	ldr	r1, [pc, #572]	; (8007a54 <_dtoa_r+0xf74>)
 8007818:	3b01      	subs	r3, #1
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	18c9      	adds	r1, r1, r3
 800781e:	6808      	ldr	r0, [r1, #0]
 8007820:	6849      	ldr	r1, [r1, #4]
 8007822:	9a08      	ldr	r2, [sp, #32]
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	f7f9 fedb 	bl	80015e0 <__aeabi_dmul>
 800782a:	9014      	str	r0, [sp, #80]	; 0x50
 800782c:	9115      	str	r1, [sp, #84]	; 0x54
 800782e:	0039      	movs	r1, r7
 8007830:	0030      	movs	r0, r6
 8007832:	f7fa fc8d 	bl	8002150 <__aeabi_d2iz>
 8007836:	0005      	movs	r5, r0
 8007838:	f7fa fcc2 	bl	80021c0 <__aeabi_i2d>
 800783c:	0002      	movs	r2, r0
 800783e:	000b      	movs	r3, r1
 8007840:	0030      	movs	r0, r6
 8007842:	0039      	movs	r1, r7
 8007844:	f7fa f94c 	bl	8001ae0 <__aeabi_dsub>
 8007848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800784a:	9008      	str	r0, [sp, #32]
 800784c:	9109      	str	r1, [sp, #36]	; 0x24
 800784e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007850:	001a      	movs	r2, r3
 8007852:	468c      	mov	ip, r1
 8007854:	3530      	adds	r5, #48	; 0x30
 8007856:	4462      	add	r2, ip
 8007858:	1c4c      	adds	r4, r1, #1
 800785a:	700d      	strb	r5, [r1, #0]
 800785c:	4690      	mov	r8, r2
 800785e:	2b01      	cmp	r3, #1
 8007860:	d01b      	beq.n	800789a <_dtoa_r+0xdba>
 8007862:	9808      	ldr	r0, [sp, #32]
 8007864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007866:	0025      	movs	r5, r4
 8007868:	2200      	movs	r2, #0
 800786a:	4b7b      	ldr	r3, [pc, #492]	; (8007a58 <_dtoa_r+0xf78>)
 800786c:	f7f9 feb8 	bl	80015e0 <__aeabi_dmul>
 8007870:	000f      	movs	r7, r1
 8007872:	0006      	movs	r6, r0
 8007874:	f7fa fc6c 	bl	8002150 <__aeabi_d2iz>
 8007878:	0004      	movs	r4, r0
 800787a:	f7fa fca1 	bl	80021c0 <__aeabi_i2d>
 800787e:	3430      	adds	r4, #48	; 0x30
 8007880:	0002      	movs	r2, r0
 8007882:	000b      	movs	r3, r1
 8007884:	0030      	movs	r0, r6
 8007886:	0039      	movs	r1, r7
 8007888:	f7fa f92a 	bl	8001ae0 <__aeabi_dsub>
 800788c:	702c      	strb	r4, [r5, #0]
 800788e:	3501      	adds	r5, #1
 8007890:	45a8      	cmp	r8, r5
 8007892:	d1e9      	bne.n	8007868 <_dtoa_r+0xd88>
 8007894:	4644      	mov	r4, r8
 8007896:	9008      	str	r0, [sp, #32]
 8007898:	9109      	str	r1, [sp, #36]	; 0x24
 800789a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800789c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800789e:	2200      	movs	r2, #0
 80078a0:	4b6e      	ldr	r3, [pc, #440]	; (8007a5c <_dtoa_r+0xf7c>)
 80078a2:	f7f8 ff45 	bl	8000730 <__aeabi_dadd>
 80078a6:	9a08      	ldr	r2, [sp, #32]
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	f7f8 fe37 	bl	800051c <__aeabi_dcmplt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d067      	beq.n	8007982 <_dtoa_r+0xea2>
 80078b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078b4:	1e65      	subs	r5, r4, #1
 80078b6:	9303      	str	r3, [sp, #12]
 80078b8:	782f      	ldrb	r7, [r5, #0]
 80078ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078bc:	e42e      	b.n	800711c <_dtoa_r+0x63c>
 80078be:	4643      	mov	r3, r8
 80078c0:	46b3      	mov	fp, r6
 80078c2:	930c      	str	r3, [sp, #48]	; 0x30
 80078c4:	9e04      	ldr	r6, [sp, #16]
 80078c6:	9b06      	ldr	r3, [sp, #24]
 80078c8:	46a8      	mov	r8, r5
 80078ca:	4699      	mov	r9, r3
 80078cc:	4655      	mov	r5, sl
 80078ce:	46ba      	mov	sl, r7
 80078d0:	2e39      	cmp	r6, #57	; 0x39
 80078d2:	d04d      	beq.n	8007970 <_dtoa_r+0xe90>
 80078d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d6:	3601      	adds	r6, #1
 80078d8:	4647      	mov	r7, r8
 80078da:	1c6c      	adds	r4, r5, #1
 80078dc:	702e      	strb	r6, [r5, #0]
 80078de:	4698      	mov	r8, r3
 80078e0:	e5f5      	b.n	80074ce <_dtoa_r+0x9ee>
 80078e2:	4642      	mov	r2, r8
 80078e4:	9b06      	ldr	r3, [sp, #24]
 80078e6:	46b3      	mov	fp, r6
 80078e8:	46ba      	mov	sl, r7
 80078ea:	9e04      	ldr	r6, [sp, #16]
 80078ec:	4699      	mov	r9, r3
 80078ee:	002f      	movs	r7, r5
 80078f0:	4690      	mov	r8, r2
 80078f2:	e5d1      	b.n	8007498 <_dtoa_r+0x9b8>
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	9a07      	ldr	r2, [sp, #28]
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	9308      	str	r3, [sp, #32]
 80078fc:	2300      	movs	r3, #0
 80078fe:	e427      	b.n	8007150 <_dtoa_r+0x670>
 8007900:	2401      	movs	r4, #1
 8007902:	e5c5      	b.n	8007490 <_dtoa_r+0x9b0>
 8007904:	2336      	movs	r3, #54	; 0x36
 8007906:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007908:	464c      	mov	r4, r9
 800790a:	1a9b      	subs	r3, r3, r2
 800790c:	9a06      	ldr	r2, [sp, #24]
 800790e:	9208      	str	r2, [sp, #32]
 8007910:	e41e      	b.n	8007150 <_dtoa_r+0x670>
 8007912:	2302      	movs	r3, #2
 8007914:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007916:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007918:	4698      	mov	r8, r3
 800791a:	f7ff fa31 	bl	8006d80 <_dtoa_r+0x2a0>
 800791e:	9b07      	ldr	r3, [sp, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d100      	bne.n	8007926 <_dtoa_r+0xe46>
 8007924:	e68e      	b.n	8007644 <_dtoa_r+0xb64>
 8007926:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007928:	2c00      	cmp	r4, #0
 800792a:	dc00      	bgt.n	800792e <_dtoa_r+0xe4e>
 800792c:	e712      	b.n	8007754 <_dtoa_r+0xc74>
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	3b01      	subs	r3, #1
 8007934:	9313      	str	r3, [sp, #76]	; 0x4c
 8007936:	0030      	movs	r0, r6
 8007938:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <_dtoa_r+0xf78>)
 800793a:	0039      	movs	r1, r7
 800793c:	f7f9 fe50 	bl	80015e0 <__aeabi_dmul>
 8007940:	0006      	movs	r6, r0
 8007942:	4640      	mov	r0, r8
 8007944:	000f      	movs	r7, r1
 8007946:	3001      	adds	r0, #1
 8007948:	f7fa fc3a 	bl	80021c0 <__aeabi_i2d>
 800794c:	0032      	movs	r2, r6
 800794e:	003b      	movs	r3, r7
 8007950:	f7f9 fe46 	bl	80015e0 <__aeabi_dmul>
 8007954:	2200      	movs	r2, #0
 8007956:	4b42      	ldr	r3, [pc, #264]	; (8007a60 <_dtoa_r+0xf80>)
 8007958:	f7f8 feea 	bl	8000730 <__aeabi_dadd>
 800795c:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <_dtoa_r+0xf84>)
 800795e:	000b      	movs	r3, r1
 8007960:	4694      	mov	ip, r2
 8007962:	4463      	add	r3, ip
 8007964:	9008      	str	r0, [sp, #32]
 8007966:	9109      	str	r1, [sp, #36]	; 0x24
 8007968:	9412      	str	r4, [sp, #72]	; 0x48
 800796a:	9309      	str	r3, [sp, #36]	; 0x24
 800796c:	f7ff fa30 	bl	8006dd0 <_dtoa_r+0x2f0>
 8007970:	2339      	movs	r3, #57	; 0x39
 8007972:	702b      	strb	r3, [r5, #0]
 8007974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007976:	4647      	mov	r7, r8
 8007978:	1c6c      	adds	r4, r5, #1
 800797a:	4698      	mov	r8, r3
 800797c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800797e:	2339      	movs	r3, #57	; 0x39
 8007980:	e5a1      	b.n	80074c6 <_dtoa_r+0x9e6>
 8007982:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007986:	2000      	movs	r0, #0
 8007988:	4934      	ldr	r1, [pc, #208]	; (8007a5c <_dtoa_r+0xf7c>)
 800798a:	f7fa f8a9 	bl	8001ae0 <__aeabi_dsub>
 800798e:	9a08      	ldr	r2, [sp, #32]
 8007990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007992:	f7f8 fdd7 	bl	8000544 <__aeabi_dcmpgt>
 8007996:	2800      	cmp	r0, #0
 8007998:	d101      	bne.n	800799e <_dtoa_r+0xebe>
 800799a:	e6db      	b.n	8007754 <_dtoa_r+0xc74>
 800799c:	001c      	movs	r4, r3
 800799e:	1e63      	subs	r3, r4, #1
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	2a30      	cmp	r2, #48	; 0x30
 80079a4:	d0fa      	beq.n	800799c <_dtoa_r+0xebc>
 80079a6:	f7ff fac8 	bl	8006f3a <_dtoa_r+0x45a>
 80079aa:	4643      	mov	r3, r8
 80079ac:	46b3      	mov	fp, r6
 80079ae:	930c      	str	r3, [sp, #48]	; 0x30
 80079b0:	9e04      	ldr	r6, [sp, #16]
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	46a8      	mov	r8, r5
 80079b6:	4699      	mov	r9, r3
 80079b8:	4655      	mov	r5, sl
 80079ba:	46ba      	mov	sl, r7
 80079bc:	2e39      	cmp	r6, #57	; 0x39
 80079be:	d0d7      	beq.n	8007970 <_dtoa_r+0xe90>
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	dd00      	ble.n	80079c6 <_dtoa_r+0xee6>
 80079c4:	e6b1      	b.n	800772a <_dtoa_r+0xc4a>
 80079c6:	e6b2      	b.n	800772e <_dtoa_r+0xc4e>
 80079c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079ca:	464d      	mov	r5, r9
 80079cc:	9203      	str	r2, [sp, #12]
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	f7ff fba4 	bl	800711c <_dtoa_r+0x63c>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d000      	beq.n	80079da <_dtoa_r+0xefa>
 80079d8:	e6a9      	b.n	800772e <_dtoa_r+0xc4e>
 80079da:	07f3      	lsls	r3, r6, #31
 80079dc:	d400      	bmi.n	80079e0 <_dtoa_r+0xf00>
 80079de:	e6a6      	b.n	800772e <_dtoa_r+0xc4e>
 80079e0:	e6a0      	b.n	8007724 <_dtoa_r+0xc44>
 80079e2:	2300      	movs	r3, #0
 80079e4:	4641      	mov	r1, r8
 80079e6:	220a      	movs	r2, #10
 80079e8:	4650      	mov	r0, sl
 80079ea:	f000 fcc1 	bl	8008370 <__multadd>
 80079ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f0:	4680      	mov	r8, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd01      	ble.n	80079fa <_dtoa_r+0xf1a>
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	e486      	b.n	8007308 <_dtoa_r+0x828>
 80079fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	dc1f      	bgt.n	8007a40 <_dtoa_r+0xf60>
 8007a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a02:	9307      	str	r3, [sp, #28]
 8007a04:	e480      	b.n	8007308 <_dtoa_r+0x828>
 8007a06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	dc19      	bgt.n	8007a40 <_dtoa_r+0xf60>
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7fe ffb7 	bl	8006980 <quorem>
 8007a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a14:	3030      	adds	r0, #48	; 0x30
 8007a16:	7018      	strb	r0, [r3, #0]
 8007a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1a:	0006      	movs	r6, r0
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	e533      	b.n	8007488 <_dtoa_r+0x9a8>
 8007a20:	2302      	movs	r3, #2
 8007a22:	4698      	mov	r8, r3
 8007a24:	f7ff f9ac 	bl	8006d80 <_dtoa_r+0x2a0>
 8007a28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a30:	001d      	movs	r5, r3
 8007a32:	f7ff fb73 	bl	800711c <_dtoa_r+0x63c>
 8007a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	f7ff fa7f 	bl	8006f3e <_dtoa_r+0x45e>
 8007a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	e5d6      	b.n	80075f4 <_dtoa_r+0xb14>
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d100      	bne.n	8007a4c <_dtoa_r+0xf6c>
 8007a4a:	e43f      	b.n	80072cc <_dtoa_r+0x7ec>
 8007a4c:	233c      	movs	r3, #60	; 0x3c
 8007a4e:	1a18      	subs	r0, r3, r0
 8007a50:	e4d7      	b.n	8007402 <_dtoa_r+0x922>
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	08009780 	.word	0x08009780
 8007a58:	40240000 	.word	0x40240000
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	401c0000 	.word	0x401c0000
 8007a64:	fcc00000 	.word	0xfcc00000
	...

08007a70 <_malloc_trim_r>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	000c      	movs	r4, r1
 8007a74:	0006      	movs	r6, r0
 8007a76:	f000 fc33 	bl	80082e0 <__malloc_lock>
 8007a7a:	4f20      	ldr	r7, [pc, #128]	; (8007afc <_malloc_trim_r+0x8c>)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	685d      	ldr	r5, [r3, #4]
 8007a80:	2303      	movs	r3, #3
 8007a82:	439d      	bics	r5, r3
 8007a84:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <_malloc_trim_r+0x90>)
 8007a86:	1b2c      	subs	r4, r5, r4
 8007a88:	469c      	mov	ip, r3
 8007a8a:	4464      	add	r4, ip
 8007a8c:	0b24      	lsrs	r4, r4, #12
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <_malloc_trim_r+0x94>)
 8007a90:	3c01      	subs	r4, #1
 8007a92:	0324      	lsls	r4, r4, #12
 8007a94:	429c      	cmp	r4, r3
 8007a96:	dd07      	ble.n	8007aa8 <_malloc_trim_r+0x38>
 8007a98:	2100      	movs	r1, #0
 8007a9a:	0030      	movs	r0, r6
 8007a9c:	f000 ffa0 	bl	80089e0 <_sbrk_r>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	195b      	adds	r3, r3, r5
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	d004      	beq.n	8007ab2 <_malloc_trim_r+0x42>
 8007aa8:	0030      	movs	r0, r6
 8007aaa:	f000 fc21 	bl	80082f0 <__malloc_unlock>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab2:	4261      	negs	r1, r4
 8007ab4:	0030      	movs	r0, r6
 8007ab6:	f000 ff93 	bl	80089e0 <_sbrk_r>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d00d      	beq.n	8007ada <_malloc_trim_r+0x6a>
 8007abe:	2201      	movs	r2, #1
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1b2d      	subs	r5, r5, r4
 8007ac4:	4315      	orrs	r5, r2
 8007ac6:	605d      	str	r5, [r3, #4]
 8007ac8:	4b0f      	ldr	r3, [pc, #60]	; (8007b08 <_malloc_trim_r+0x98>)
 8007aca:	0030      	movs	r0, r6
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	1b14      	subs	r4, r2, r4
 8007ad0:	601c      	str	r4, [r3, #0]
 8007ad2:	f000 fc0d 	bl	80082f0 <__malloc_unlock>
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7ea      	b.n	8007ab0 <_malloc_trim_r+0x40>
 8007ada:	2100      	movs	r1, #0
 8007adc:	0030      	movs	r0, r6
 8007ade:	f000 ff7f 	bl	80089e0 <_sbrk_r>
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	1a83      	subs	r3, r0, r2
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	ddde      	ble.n	8007aa8 <_malloc_trim_r+0x38>
 8007aea:	4908      	ldr	r1, [pc, #32]	; (8007b0c <_malloc_trim_r+0x9c>)
 8007aec:	6809      	ldr	r1, [r1, #0]
 8007aee:	1a40      	subs	r0, r0, r1
 8007af0:	4905      	ldr	r1, [pc, #20]	; (8007b08 <_malloc_trim_r+0x98>)
 8007af2:	6008      	str	r0, [r1, #0]
 8007af4:	2101      	movs	r1, #1
 8007af6:	430b      	orrs	r3, r1
 8007af8:	6053      	str	r3, [r2, #4]
 8007afa:	e7d5      	b.n	8007aa8 <_malloc_trim_r+0x38>
 8007afc:	20001040 	.word	0x20001040
 8007b00:	00000fef 	.word	0x00000fef
 8007b04:	00000fff 	.word	0x00000fff
 8007b08:	200015e8 	.word	0x200015e8
 8007b0c:	20001448 	.word	0x20001448

08007b10 <_free_r>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	0004      	movs	r4, r0
 8007b14:	1e0d      	subs	r5, r1, #0
 8007b16:	d03c      	beq.n	8007b92 <_free_r+0x82>
 8007b18:	f000 fbe2 	bl	80082e0 <__malloc_lock>
 8007b1c:	0029      	movs	r1, r5
 8007b1e:	3908      	subs	r1, #8
 8007b20:	6848      	ldr	r0, [r1, #4]
 8007b22:	2301      	movs	r3, #1
 8007b24:	0005      	movs	r5, r0
 8007b26:	2603      	movs	r6, #3
 8007b28:	439d      	bics	r5, r3
 8007b2a:	194a      	adds	r2, r1, r5
 8007b2c:	469c      	mov	ip, r3
 8007b2e:	4f61      	ldr	r7, [pc, #388]	; (8007cb4 <_free_r+0x1a4>)
 8007b30:	6853      	ldr	r3, [r2, #4]
 8007b32:	43b3      	bics	r3, r6
 8007b34:	68be      	ldr	r6, [r7, #8]
 8007b36:	42b2      	cmp	r2, r6
 8007b38:	d056      	beq.n	8007be8 <_free_r+0xd8>
 8007b3a:	4666      	mov	r6, ip
 8007b3c:	6053      	str	r3, [r2, #4]
 8007b3e:	4206      	tst	r6, r0
 8007b40:	d10a      	bne.n	8007b58 <_free_r+0x48>
 8007b42:	003e      	movs	r6, r7
 8007b44:	6808      	ldr	r0, [r1, #0]
 8007b46:	3608      	adds	r6, #8
 8007b48:	1a09      	subs	r1, r1, r0
 8007b4a:	182d      	adds	r5, r5, r0
 8007b4c:	6888      	ldr	r0, [r1, #8]
 8007b4e:	42b0      	cmp	r0, r6
 8007b50:	d065      	beq.n	8007c1e <_free_r+0x10e>
 8007b52:	68ce      	ldr	r6, [r1, #12]
 8007b54:	60c6      	str	r6, [r0, #12]
 8007b56:	60b0      	str	r0, [r6, #8]
 8007b58:	2001      	movs	r0, #1
 8007b5a:	18d6      	adds	r6, r2, r3
 8007b5c:	6876      	ldr	r6, [r6, #4]
 8007b5e:	4206      	tst	r6, r0
 8007b60:	d033      	beq.n	8007bca <_free_r+0xba>
 8007b62:	4b55      	ldr	r3, [pc, #340]	; (8007cb8 <_free_r+0x1a8>)
 8007b64:	4328      	orrs	r0, r5
 8007b66:	6048      	str	r0, [r1, #4]
 8007b68:	514d      	str	r5, [r1, r5]
 8007b6a:	429d      	cmp	r5, r3
 8007b6c:	d812      	bhi.n	8007b94 <_free_r+0x84>
 8007b6e:	08ed      	lsrs	r5, r5, #3
 8007b70:	3bff      	subs	r3, #255	; 0xff
 8007b72:	10aa      	asrs	r2, r5, #2
 8007b74:	3bff      	subs	r3, #255	; 0xff
 8007b76:	4093      	lsls	r3, r2
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	00ed      	lsls	r5, r5, #3
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	607b      	str	r3, [r7, #4]
 8007b80:	19ef      	adds	r7, r5, r7
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	60cf      	str	r7, [r1, #12]
 8007b86:	608b      	str	r3, [r1, #8]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	60d9      	str	r1, [r3, #12]
 8007b8c:	0020      	movs	r0, r4
 8007b8e:	f000 fbaf 	bl	80082f0 <__malloc_unlock>
 8007b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b94:	0a68      	lsrs	r0, r5, #9
 8007b96:	2804      	cmp	r0, #4
 8007b98:	d850      	bhi.n	8007c3c <_free_r+0x12c>
 8007b9a:	09a8      	lsrs	r0, r5, #6
 8007b9c:	0002      	movs	r2, r0
 8007b9e:	3039      	adds	r0, #57	; 0x39
 8007ba0:	3238      	adds	r2, #56	; 0x38
 8007ba2:	00c0      	lsls	r0, r0, #3
 8007ba4:	1838      	adds	r0, r7, r0
 8007ba6:	3808      	subs	r0, #8
 8007ba8:	6883      	ldr	r3, [r0, #8]
 8007baa:	2603      	movs	r6, #3
 8007bac:	4298      	cmp	r0, r3
 8007bae:	d04c      	beq.n	8007c4a <_free_r+0x13a>
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	43b2      	bics	r2, r6
 8007bb4:	4295      	cmp	r5, r2
 8007bb6:	d230      	bcs.n	8007c1a <_free_r+0x10a>
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	4298      	cmp	r0, r3
 8007bbc:	d1f8      	bne.n	8007bb0 <_free_r+0xa0>
 8007bbe:	68c3      	ldr	r3, [r0, #12]
 8007bc0:	60cb      	str	r3, [r1, #12]
 8007bc2:	6088      	str	r0, [r1, #8]
 8007bc4:	6099      	str	r1, [r3, #8]
 8007bc6:	60c1      	str	r1, [r0, #12]
 8007bc8:	e7e0      	b.n	8007b8c <_free_r+0x7c>
 8007bca:	18ed      	adds	r5, r5, r3
 8007bcc:	4e3b      	ldr	r6, [pc, #236]	; (8007cbc <_free_r+0x1ac>)
 8007bce:	6893      	ldr	r3, [r2, #8]
 8007bd0:	42b3      	cmp	r3, r6
 8007bd2:	d042      	beq.n	8007c5a <_free_r+0x14a>
 8007bd4:	68d2      	ldr	r2, [r2, #12]
 8007bd6:	4328      	orrs	r0, r5
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	6093      	str	r3, [r2, #8]
 8007bdc:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <_free_r+0x1a8>)
 8007bde:	6048      	str	r0, [r1, #4]
 8007be0:	514d      	str	r5, [r1, r5]
 8007be2:	429d      	cmp	r5, r3
 8007be4:	d8d6      	bhi.n	8007b94 <_free_r+0x84>
 8007be6:	e7c2      	b.n	8007b6e <_free_r+0x5e>
 8007be8:	4662      	mov	r2, ip
 8007bea:	18eb      	adds	r3, r5, r3
 8007bec:	4202      	tst	r2, r0
 8007bee:	d106      	bne.n	8007bfe <_free_r+0xee>
 8007bf0:	680a      	ldr	r2, [r1, #0]
 8007bf2:	1a89      	subs	r1, r1, r2
 8007bf4:	6888      	ldr	r0, [r1, #8]
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	68ca      	ldr	r2, [r1, #12]
 8007bfa:	60c2      	str	r2, [r0, #12]
 8007bfc:	6090      	str	r0, [r2, #8]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	431a      	orrs	r2, r3
 8007c02:	604a      	str	r2, [r1, #4]
 8007c04:	4a2e      	ldr	r2, [pc, #184]	; (8007cc0 <_free_r+0x1b0>)
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d3be      	bcc.n	8007b8c <_free_r+0x7c>
 8007c0e:	4b2d      	ldr	r3, [pc, #180]	; (8007cc4 <_free_r+0x1b4>)
 8007c10:	0020      	movs	r0, r4
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	f7ff ff2c 	bl	8007a70 <_malloc_trim_r>
 8007c18:	e7b8      	b.n	8007b8c <_free_r+0x7c>
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	e7cf      	b.n	8007bbe <_free_r+0xae>
 8007c1e:	4666      	mov	r6, ip
 8007c20:	18d0      	adds	r0, r2, r3
 8007c22:	6840      	ldr	r0, [r0, #4]
 8007c24:	4230      	tst	r0, r6
 8007c26:	d13f      	bne.n	8007ca8 <_free_r+0x198>
 8007c28:	6890      	ldr	r0, [r2, #8]
 8007c2a:	195d      	adds	r5, r3, r5
 8007c2c:	68d3      	ldr	r3, [r2, #12]
 8007c2e:	60c3      	str	r3, [r0, #12]
 8007c30:	6098      	str	r0, [r3, #8]
 8007c32:	4663      	mov	r3, ip
 8007c34:	432b      	orrs	r3, r5
 8007c36:	604b      	str	r3, [r1, #4]
 8007c38:	514d      	str	r5, [r1, r5]
 8007c3a:	e7a7      	b.n	8007b8c <_free_r+0x7c>
 8007c3c:	2814      	cmp	r0, #20
 8007c3e:	d814      	bhi.n	8007c6a <_free_r+0x15a>
 8007c40:	0002      	movs	r2, r0
 8007c42:	305c      	adds	r0, #92	; 0x5c
 8007c44:	325b      	adds	r2, #91	; 0x5b
 8007c46:	00c0      	lsls	r0, r0, #3
 8007c48:	e7ac      	b.n	8007ba4 <_free_r+0x94>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	1092      	asrs	r2, r2, #2
 8007c4e:	4093      	lsls	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	0003      	movs	r3, r0
 8007c58:	e7b2      	b.n	8007bc0 <_free_r+0xb0>
 8007c5a:	4328      	orrs	r0, r5
 8007c5c:	60d9      	str	r1, [r3, #12]
 8007c5e:	6099      	str	r1, [r3, #8]
 8007c60:	60cb      	str	r3, [r1, #12]
 8007c62:	608b      	str	r3, [r1, #8]
 8007c64:	6048      	str	r0, [r1, #4]
 8007c66:	514d      	str	r5, [r1, r5]
 8007c68:	e790      	b.n	8007b8c <_free_r+0x7c>
 8007c6a:	2854      	cmp	r0, #84	; 0x54
 8007c6c:	d805      	bhi.n	8007c7a <_free_r+0x16a>
 8007c6e:	0b28      	lsrs	r0, r5, #12
 8007c70:	0002      	movs	r2, r0
 8007c72:	306f      	adds	r0, #111	; 0x6f
 8007c74:	326e      	adds	r2, #110	; 0x6e
 8007c76:	00c0      	lsls	r0, r0, #3
 8007c78:	e794      	b.n	8007ba4 <_free_r+0x94>
 8007c7a:	22aa      	movs	r2, #170	; 0xaa
 8007c7c:	0052      	lsls	r2, r2, #1
 8007c7e:	4290      	cmp	r0, r2
 8007c80:	d805      	bhi.n	8007c8e <_free_r+0x17e>
 8007c82:	0be8      	lsrs	r0, r5, #15
 8007c84:	0002      	movs	r2, r0
 8007c86:	3078      	adds	r0, #120	; 0x78
 8007c88:	3277      	adds	r2, #119	; 0x77
 8007c8a:	00c0      	lsls	r0, r0, #3
 8007c8c:	e78a      	b.n	8007ba4 <_free_r+0x94>
 8007c8e:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <_free_r+0x1b8>)
 8007c90:	4290      	cmp	r0, r2
 8007c92:	d805      	bhi.n	8007ca0 <_free_r+0x190>
 8007c94:	0ca8      	lsrs	r0, r5, #18
 8007c96:	0002      	movs	r2, r0
 8007c98:	307d      	adds	r0, #125	; 0x7d
 8007c9a:	327c      	adds	r2, #124	; 0x7c
 8007c9c:	00c0      	lsls	r0, r0, #3
 8007c9e:	e781      	b.n	8007ba4 <_free_r+0x94>
 8007ca0:	20fe      	movs	r0, #254	; 0xfe
 8007ca2:	227e      	movs	r2, #126	; 0x7e
 8007ca4:	0080      	lsls	r0, r0, #2
 8007ca6:	e77d      	b.n	8007ba4 <_free_r+0x94>
 8007ca8:	4663      	mov	r3, ip
 8007caa:	432b      	orrs	r3, r5
 8007cac:	604b      	str	r3, [r1, #4]
 8007cae:	6015      	str	r5, [r2, #0]
 8007cb0:	e76c      	b.n	8007b8c <_free_r+0x7c>
 8007cb2:	46c0      	nop			; (mov r8, r8)
 8007cb4:	20001040 	.word	0x20001040
 8007cb8:	000001ff 	.word	0x000001ff
 8007cbc:	20001048 	.word	0x20001048
 8007cc0:	2000144c 	.word	0x2000144c
 8007cc4:	20001618 	.word	0x20001618
 8007cc8:	00000554 	.word	0x00000554
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <_localeconv_r>:
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <_localeconv_r+0x14>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d001      	beq.n	8007cde <_localeconv_r+0xe>
 8007cda:	30f0      	adds	r0, #240	; 0xf0
 8007cdc:	4770      	bx	lr
 8007cde:	4802      	ldr	r0, [pc, #8]	; (8007ce8 <_localeconv_r+0x18>)
 8007ce0:	e7fb      	b.n	8007cda <_localeconv_r+0xa>
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	20000c10 	.word	0x20000c10
 8007ce8:	20001450 	.word	0x20001450
 8007cec:	00000000 	.word	0x00000000

08007cf0 <_malloc_r>:
 8007cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf2:	4657      	mov	r7, sl
 8007cf4:	4645      	mov	r5, r8
 8007cf6:	46de      	mov	lr, fp
 8007cf8:	464e      	mov	r6, r9
 8007cfa:	b5e0      	push	{r5, r6, r7, lr}
 8007cfc:	000d      	movs	r5, r1
 8007cfe:	350b      	adds	r5, #11
 8007d00:	b083      	sub	sp, #12
 8007d02:	0007      	movs	r7, r0
 8007d04:	2d16      	cmp	r5, #22
 8007d06:	d800      	bhi.n	8007d0a <_malloc_r+0x1a>
 8007d08:	e09f      	b.n	8007e4a <_malloc_r+0x15a>
 8007d0a:	2307      	movs	r3, #7
 8007d0c:	439d      	bics	r5, r3
 8007d0e:	d500      	bpl.n	8007d12 <_malloc_r+0x22>
 8007d10:	e0c4      	b.n	8007e9c <_malloc_r+0x1ac>
 8007d12:	42a9      	cmp	r1, r5
 8007d14:	d900      	bls.n	8007d18 <_malloc_r+0x28>
 8007d16:	e0c1      	b.n	8007e9c <_malloc_r+0x1ac>
 8007d18:	f000 fae2 	bl	80082e0 <__malloc_lock>
 8007d1c:	23f8      	movs	r3, #248	; 0xf8
 8007d1e:	33ff      	adds	r3, #255	; 0xff
 8007d20:	429d      	cmp	r5, r3
 8007d22:	d800      	bhi.n	8007d26 <_malloc_r+0x36>
 8007d24:	e28f      	b.n	8008246 <_malloc_r+0x556>
 8007d26:	0a68      	lsrs	r0, r5, #9
 8007d28:	d100      	bne.n	8007d2c <_malloc_r+0x3c>
 8007d2a:	e0bb      	b.n	8007ea4 <_malloc_r+0x1b4>
 8007d2c:	2804      	cmp	r0, #4
 8007d2e:	d900      	bls.n	8007d32 <_malloc_r+0x42>
 8007d30:	e162      	b.n	8007ff8 <_malloc_r+0x308>
 8007d32:	2338      	movs	r3, #56	; 0x38
 8007d34:	4698      	mov	r8, r3
 8007d36:	09a8      	lsrs	r0, r5, #6
 8007d38:	4480      	add	r8, r0
 8007d3a:	3039      	adds	r0, #57	; 0x39
 8007d3c:	00c1      	lsls	r1, r0, #3
 8007d3e:	4ed2      	ldr	r6, [pc, #840]	; (8008088 <_malloc_r+0x398>)
 8007d40:	1871      	adds	r1, r6, r1
 8007d42:	3908      	subs	r1, #8
 8007d44:	68cc      	ldr	r4, [r1, #12]
 8007d46:	42a1      	cmp	r1, r4
 8007d48:	d019      	beq.n	8007d7e <_malloc_r+0x8e>
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	6862      	ldr	r2, [r4, #4]
 8007d4e:	439a      	bics	r2, r3
 8007d50:	0013      	movs	r3, r2
 8007d52:	1b52      	subs	r2, r2, r5
 8007d54:	2a0f      	cmp	r2, #15
 8007d56:	dd00      	ble.n	8007d5a <_malloc_r+0x6a>
 8007d58:	e0aa      	b.n	8007eb0 <_malloc_r+0x1c0>
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	db00      	blt.n	8007d60 <_malloc_r+0x70>
 8007d5e:	e088      	b.n	8007e72 <_malloc_r+0x182>
 8007d60:	2303      	movs	r3, #3
 8007d62:	469c      	mov	ip, r3
 8007d64:	e008      	b.n	8007d78 <_malloc_r+0x88>
 8007d66:	4662      	mov	r2, ip
 8007d68:	6863      	ldr	r3, [r4, #4]
 8007d6a:	4393      	bics	r3, r2
 8007d6c:	1b5a      	subs	r2, r3, r5
 8007d6e:	2a0f      	cmp	r2, #15
 8007d70:	dd00      	ble.n	8007d74 <_malloc_r+0x84>
 8007d72:	e09d      	b.n	8007eb0 <_malloc_r+0x1c0>
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	da7c      	bge.n	8007e72 <_malloc_r+0x182>
 8007d78:	68e4      	ldr	r4, [r4, #12]
 8007d7a:	42a1      	cmp	r1, r4
 8007d7c:	d1f3      	bne.n	8007d66 <_malloc_r+0x76>
 8007d7e:	0032      	movs	r2, r6
 8007d80:	6934      	ldr	r4, [r6, #16]
 8007d82:	3208      	adds	r2, #8
 8007d84:	4294      	cmp	r4, r2
 8007d86:	d100      	bne.n	8007d8a <_malloc_r+0x9a>
 8007d88:	e190      	b.n	80080ac <_malloc_r+0x3bc>
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	6861      	ldr	r1, [r4, #4]
 8007d8e:	4399      	bics	r1, r3
 8007d90:	4689      	mov	r9, r1
 8007d92:	1b49      	subs	r1, r1, r5
 8007d94:	290f      	cmp	r1, #15
 8007d96:	dd00      	ble.n	8007d9a <_malloc_r+0xaa>
 8007d98:	e162      	b.n	8008060 <_malloc_r+0x370>
 8007d9a:	6172      	str	r2, [r6, #20]
 8007d9c:	6132      	str	r2, [r6, #16]
 8007d9e:	2900      	cmp	r1, #0
 8007da0:	db00      	blt.n	8007da4 <_malloc_r+0xb4>
 8007da2:	e087      	b.n	8007eb4 <_malloc_r+0x1c4>
 8007da4:	4ab9      	ldr	r2, [pc, #740]	; (800808c <_malloc_r+0x39c>)
 8007da6:	464b      	mov	r3, r9
 8007da8:	4591      	cmp	r9, r2
 8007daa:	d900      	bls.n	8007dae <_malloc_r+0xbe>
 8007dac:	e130      	b.n	8008010 <_malloc_r+0x320>
 8007dae:	08db      	lsrs	r3, r3, #3
 8007db0:	3aff      	subs	r2, #255	; 0xff
 8007db2:	1099      	asrs	r1, r3, #2
 8007db4:	3aff      	subs	r2, #255	; 0xff
 8007db6:	408a      	lsls	r2, r1
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	6871      	ldr	r1, [r6, #4]
 8007dbc:	199b      	adds	r3, r3, r6
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	6899      	ldr	r1, [r3, #8]
 8007dc2:	6072      	str	r2, [r6, #4]
 8007dc4:	60e3      	str	r3, [r4, #12]
 8007dc6:	60a1      	str	r1, [r4, #8]
 8007dc8:	609c      	str	r4, [r3, #8]
 8007dca:	0013      	movs	r3, r2
 8007dcc:	60cc      	str	r4, [r1, #12]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	1082      	asrs	r2, r0, #2
 8007dd2:	4091      	lsls	r1, r2
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d86f      	bhi.n	8007eb8 <_malloc_r+0x1c8>
 8007dd8:	420b      	tst	r3, r1
 8007dda:	d105      	bne.n	8007de8 <_malloc_r+0xf8>
 8007ddc:	2203      	movs	r2, #3
 8007dde:	4390      	bics	r0, r2
 8007de0:	0049      	lsls	r1, r1, #1
 8007de2:	3004      	adds	r0, #4
 8007de4:	420b      	tst	r3, r1
 8007de6:	d0fb      	beq.n	8007de0 <_malloc_r+0xf0>
 8007de8:	2303      	movs	r3, #3
 8007dea:	4698      	mov	r8, r3
 8007dec:	00c3      	lsls	r3, r0, #3
 8007dee:	4699      	mov	r9, r3
 8007df0:	44b1      	add	r9, r6
 8007df2:	46cc      	mov	ip, r9
 8007df4:	4682      	mov	sl, r0
 8007df6:	4663      	mov	r3, ip
 8007df8:	68dc      	ldr	r4, [r3, #12]
 8007dfa:	45a4      	cmp	ip, r4
 8007dfc:	d107      	bne.n	8007e0e <_malloc_r+0x11e>
 8007dfe:	e157      	b.n	80080b0 <_malloc_r+0x3c0>
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	db00      	blt.n	8007e06 <_malloc_r+0x116>
 8007e04:	e166      	b.n	80080d4 <_malloc_r+0x3e4>
 8007e06:	68e4      	ldr	r4, [r4, #12]
 8007e08:	45a4      	cmp	ip, r4
 8007e0a:	d100      	bne.n	8007e0e <_malloc_r+0x11e>
 8007e0c:	e150      	b.n	80080b0 <_malloc_r+0x3c0>
 8007e0e:	4642      	mov	r2, r8
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	4393      	bics	r3, r2
 8007e14:	1b5a      	subs	r2, r3, r5
 8007e16:	2a0f      	cmp	r2, #15
 8007e18:	ddf2      	ble.n	8007e00 <_malloc_r+0x110>
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	1961      	adds	r1, r4, r5
 8007e20:	4305      	orrs	r5, r0
 8007e22:	6065      	str	r5, [r4, #4]
 8007e24:	68a0      	ldr	r0, [r4, #8]
 8007e26:	68e5      	ldr	r5, [r4, #12]
 8007e28:	3608      	adds	r6, #8
 8007e2a:	60c5      	str	r5, [r0, #12]
 8007e2c:	60a8      	str	r0, [r5, #8]
 8007e2e:	4640      	mov	r0, r8
 8007e30:	60f1      	str	r1, [r6, #12]
 8007e32:	60b1      	str	r1, [r6, #8]
 8007e34:	4310      	orrs	r0, r2
 8007e36:	6048      	str	r0, [r1, #4]
 8007e38:	60ce      	str	r6, [r1, #12]
 8007e3a:	608e      	str	r6, [r1, #8]
 8007e3c:	0038      	movs	r0, r7
 8007e3e:	50e2      	str	r2, [r4, r3]
 8007e40:	f000 fa56 	bl	80082f0 <__malloc_unlock>
 8007e44:	0020      	movs	r0, r4
 8007e46:	3008      	adds	r0, #8
 8007e48:	e021      	b.n	8007e8e <_malloc_r+0x19e>
 8007e4a:	2910      	cmp	r1, #16
 8007e4c:	d826      	bhi.n	8007e9c <_malloc_r+0x1ac>
 8007e4e:	0038      	movs	r0, r7
 8007e50:	f000 fa46 	bl	80082e0 <__malloc_lock>
 8007e54:	2510      	movs	r5, #16
 8007e56:	2318      	movs	r3, #24
 8007e58:	2002      	movs	r0, #2
 8007e5a:	4e8b      	ldr	r6, [pc, #556]	; (8008088 <_malloc_r+0x398>)
 8007e5c:	18f3      	adds	r3, r6, r3
 8007e5e:	001a      	movs	r2, r3
 8007e60:	685c      	ldr	r4, [r3, #4]
 8007e62:	3a08      	subs	r2, #8
 8007e64:	4294      	cmp	r4, r2
 8007e66:	d100      	bne.n	8007e6a <_malloc_r+0x17a>
 8007e68:	e12e      	b.n	80080c8 <_malloc_r+0x3d8>
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	6862      	ldr	r2, [r4, #4]
 8007e6e:	439a      	bics	r2, r3
 8007e70:	0013      	movs	r3, r2
 8007e72:	68e2      	ldr	r2, [r4, #12]
 8007e74:	68a1      	ldr	r1, [r4, #8]
 8007e76:	60ca      	str	r2, [r1, #12]
 8007e78:	6091      	str	r1, [r2, #8]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	18e3      	adds	r3, r4, r3
 8007e7e:	6859      	ldr	r1, [r3, #4]
 8007e80:	0038      	movs	r0, r7
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	f000 fa33 	bl	80082f0 <__malloc_unlock>
 8007e8a:	0020      	movs	r0, r4
 8007e8c:	3008      	adds	r0, #8
 8007e8e:	b003      	add	sp, #12
 8007e90:	bc3c      	pop	{r2, r3, r4, r5}
 8007e92:	4690      	mov	r8, r2
 8007e94:	4699      	mov	r9, r3
 8007e96:	46a2      	mov	sl, r4
 8007e98:	46ab      	mov	fp, r5
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9c:	230c      	movs	r3, #12
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	603b      	str	r3, [r7, #0]
 8007ea2:	e7f4      	b.n	8007e8e <_malloc_r+0x19e>
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	233f      	movs	r3, #63	; 0x3f
 8007ea8:	2040      	movs	r0, #64	; 0x40
 8007eaa:	0089      	lsls	r1, r1, #2
 8007eac:	4698      	mov	r8, r3
 8007eae:	e746      	b.n	8007d3e <_malloc_r+0x4e>
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	e764      	b.n	8007d7e <_malloc_r+0x8e>
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	e7e0      	b.n	8007e7a <_malloc_r+0x18a>
 8007eb8:	2303      	movs	r3, #3
 8007eba:	68b4      	ldr	r4, [r6, #8]
 8007ebc:	6862      	ldr	r2, [r4, #4]
 8007ebe:	439a      	bics	r2, r3
 8007ec0:	4690      	mov	r8, r2
 8007ec2:	42aa      	cmp	r2, r5
 8007ec4:	d303      	bcc.n	8007ece <_malloc_r+0x1de>
 8007ec6:	1b53      	subs	r3, r2, r5
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	dd00      	ble.n	8007ece <_malloc_r+0x1de>
 8007ecc:	e086      	b.n	8007fdc <_malloc_r+0x2ec>
 8007ece:	0023      	movs	r3, r4
 8007ed0:	4443      	add	r3, r8
 8007ed2:	4a6f      	ldr	r2, [pc, #444]	; (8008090 <_malloc_r+0x3a0>)
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	4b6f      	ldr	r3, [pc, #444]	; (8008094 <_malloc_r+0x3a4>)
 8007ed8:	4693      	mov	fp, r2
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	18eb      	adds	r3, r5, r3
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	d100      	bne.n	8007ee6 <_malloc_r+0x1f6>
 8007ee4:	e168      	b.n	80081b8 <_malloc_r+0x4c8>
 8007ee6:	4a6c      	ldr	r2, [pc, #432]	; (8008098 <_malloc_r+0x3a8>)
 8007ee8:	4694      	mov	ip, r2
 8007eea:	4463      	add	r3, ip
 8007eec:	0b1b      	lsrs	r3, r3, #12
 8007eee:	031b      	lsls	r3, r3, #12
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	9900      	ldr	r1, [sp, #0]
 8007ef4:	0038      	movs	r0, r7
 8007ef6:	f000 fd73 	bl	80089e0 <_sbrk_r>
 8007efa:	0003      	movs	r3, r0
 8007efc:	4681      	mov	r9, r0
 8007efe:	3301      	adds	r3, #1
 8007f00:	d061      	beq.n	8007fc6 <_malloc_r+0x2d6>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	4283      	cmp	r3, r0
 8007f06:	d900      	bls.n	8007f0a <_malloc_r+0x21a>
 8007f08:	e0ff      	b.n	800810a <_malloc_r+0x41a>
 8007f0a:	4b64      	ldr	r3, [pc, #400]	; (800809c <_malloc_r+0x3ac>)
 8007f0c:	9a00      	ldr	r2, [sp, #0]
 8007f0e:	469a      	mov	sl, r3
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	469c      	mov	ip, r3
 8007f14:	4653      	mov	r3, sl
 8007f16:	4462      	add	r2, ip
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	0011      	movs	r1, r2
 8007f1e:	4283      	cmp	r3, r0
 8007f20:	d100      	bne.n	8007f24 <_malloc_r+0x234>
 8007f22:	e155      	b.n	80081d0 <_malloc_r+0x4e0>
 8007f24:	465b      	mov	r3, fp
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	d100      	bne.n	8007f2e <_malloc_r+0x23e>
 8007f2c:	e16c      	b.n	8008208 <_malloc_r+0x518>
 8007f2e:	464b      	mov	r3, r9
 8007f30:	9a01      	ldr	r2, [sp, #4]
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	1859      	adds	r1, r3, r1
 8007f36:	4653      	mov	r3, sl
 8007f38:	6019      	str	r1, [r3, #0]
 8007f3a:	2307      	movs	r3, #7
 8007f3c:	464a      	mov	r2, r9
 8007f3e:	4013      	ands	r3, r2
 8007f40:	d100      	bne.n	8007f44 <_malloc_r+0x254>
 8007f42:	e124      	b.n	800818e <_malloc_r+0x49e>
 8007f44:	2108      	movs	r1, #8
 8007f46:	4689      	mov	r9, r1
 8007f48:	4955      	ldr	r1, [pc, #340]	; (80080a0 <_malloc_r+0x3b0>)
 8007f4a:	1ad2      	subs	r2, r2, r3
 8007f4c:	4491      	add	r9, r2
 8007f4e:	1acb      	subs	r3, r1, r3
 8007f50:	9a00      	ldr	r2, [sp, #0]
 8007f52:	0038      	movs	r0, r7
 8007f54:	444a      	add	r2, r9
 8007f56:	0511      	lsls	r1, r2, #20
 8007f58:	0d09      	lsrs	r1, r1, #20
 8007f5a:	1a5b      	subs	r3, r3, r1
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	469b      	mov	fp, r3
 8007f60:	f000 fd3e 	bl	80089e0 <_sbrk_r>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d100      	bne.n	8007f6a <_malloc_r+0x27a>
 8007f68:	e142      	b.n	80081f0 <_malloc_r+0x500>
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	1ac0      	subs	r0, r0, r3
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4458      	add	r0, fp
 8007f72:	4318      	orrs	r0, r3
 8007f74:	4653      	mov	r3, sl
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	445b      	add	r3, fp
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	4653      	mov	r3, sl
 8007f7e:	6019      	str	r1, [r3, #0]
 8007f80:	464b      	mov	r3, r9
 8007f82:	60b3      	str	r3, [r6, #8]
 8007f84:	6058      	str	r0, [r3, #4]
 8007f86:	42b4      	cmp	r4, r6
 8007f88:	d013      	beq.n	8007fb2 <_malloc_r+0x2c2>
 8007f8a:	4643      	mov	r3, r8
 8007f8c:	2b0f      	cmp	r3, #15
 8007f8e:	d800      	bhi.n	8007f92 <_malloc_r+0x2a2>
 8007f90:	e0e8      	b.n	8008164 <_malloc_r+0x474>
 8007f92:	4643      	mov	r3, r8
 8007f94:	2207      	movs	r2, #7
 8007f96:	6860      	ldr	r0, [r4, #4]
 8007f98:	3b0c      	subs	r3, #12
 8007f9a:	4393      	bics	r3, r2
 8007f9c:	3a06      	subs	r2, #6
 8007f9e:	4002      	ands	r2, r0
 8007fa0:	2005      	movs	r0, #5
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	6062      	str	r2, [r4, #4]
 8007fa6:	18e2      	adds	r2, r4, r3
 8007fa8:	6050      	str	r0, [r2, #4]
 8007faa:	6090      	str	r0, [r2, #8]
 8007fac:	2b0f      	cmp	r3, #15
 8007fae:	d900      	bls.n	8007fb2 <_malloc_r+0x2c2>
 8007fb0:	e122      	b.n	80081f8 <_malloc_r+0x508>
 8007fb2:	4b3c      	ldr	r3, [pc, #240]	; (80080a4 <_malloc_r+0x3b4>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4291      	cmp	r1, r2
 8007fb8:	d900      	bls.n	8007fbc <_malloc_r+0x2cc>
 8007fba:	6019      	str	r1, [r3, #0]
 8007fbc:	4b3a      	ldr	r3, [pc, #232]	; (80080a8 <_malloc_r+0x3b8>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	4291      	cmp	r1, r2
 8007fc2:	d900      	bls.n	8007fc6 <_malloc_r+0x2d6>
 8007fc4:	6019      	str	r1, [r3, #0]
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	68b4      	ldr	r4, [r6, #8]
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	439a      	bics	r2, r3
 8007fce:	1b53      	subs	r3, r2, r5
 8007fd0:	4295      	cmp	r5, r2
 8007fd2:	d900      	bls.n	8007fd6 <_malloc_r+0x2e6>
 8007fd4:	e0c9      	b.n	800816a <_malloc_r+0x47a>
 8007fd6:	2b0f      	cmp	r3, #15
 8007fd8:	dc00      	bgt.n	8007fdc <_malloc_r+0x2ec>
 8007fda:	e0c6      	b.n	800816a <_malloc_r+0x47a>
 8007fdc:	2201      	movs	r2, #1
 8007fde:	0029      	movs	r1, r5
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	4311      	orrs	r1, r2
 8007fe4:	1965      	adds	r5, r4, r5
 8007fe6:	6061      	str	r1, [r4, #4]
 8007fe8:	0038      	movs	r0, r7
 8007fea:	60b5      	str	r5, [r6, #8]
 8007fec:	606b      	str	r3, [r5, #4]
 8007fee:	f000 f97f 	bl	80082f0 <__malloc_unlock>
 8007ff2:	0020      	movs	r0, r4
 8007ff4:	3008      	adds	r0, #8
 8007ff6:	e74a      	b.n	8007e8e <_malloc_r+0x19e>
 8007ff8:	2814      	cmp	r0, #20
 8007ffa:	d97a      	bls.n	80080f2 <_malloc_r+0x402>
 8007ffc:	2854      	cmp	r0, #84	; 0x54
 8007ffe:	d900      	bls.n	8008002 <_malloc_r+0x312>
 8008000:	e0ba      	b.n	8008178 <_malloc_r+0x488>
 8008002:	236e      	movs	r3, #110	; 0x6e
 8008004:	4698      	mov	r8, r3
 8008006:	0b28      	lsrs	r0, r5, #12
 8008008:	4480      	add	r8, r0
 800800a:	306f      	adds	r0, #111	; 0x6f
 800800c:	00c1      	lsls	r1, r0, #3
 800800e:	e696      	b.n	8007d3e <_malloc_r+0x4e>
 8008010:	0a5a      	lsrs	r2, r3, #9
 8008012:	2a04      	cmp	r2, #4
 8008014:	d973      	bls.n	80080fe <_malloc_r+0x40e>
 8008016:	2a14      	cmp	r2, #20
 8008018:	d900      	bls.n	800801c <_malloc_r+0x32c>
 800801a:	e0d0      	b.n	80081be <_malloc_r+0x4ce>
 800801c:	0011      	movs	r1, r2
 800801e:	325c      	adds	r2, #92	; 0x5c
 8008020:	315b      	adds	r1, #91	; 0x5b
 8008022:	00d2      	lsls	r2, r2, #3
 8008024:	2308      	movs	r3, #8
 8008026:	425b      	negs	r3, r3
 8008028:	469c      	mov	ip, r3
 800802a:	18b2      	adds	r2, r6, r2
 800802c:	4494      	add	ip, r2
 800802e:	4663      	mov	r3, ip
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	2303      	movs	r3, #3
 8008034:	4698      	mov	r8, r3
 8008036:	4594      	cmp	ip, r2
 8008038:	d100      	bne.n	800803c <_malloc_r+0x34c>
 800803a:	e0ab      	b.n	8008194 <_malloc_r+0x4a4>
 800803c:	4643      	mov	r3, r8
 800803e:	6851      	ldr	r1, [r2, #4]
 8008040:	4399      	bics	r1, r3
 8008042:	4589      	cmp	r9, r1
 8008044:	d300      	bcc.n	8008048 <_malloc_r+0x358>
 8008046:	e095      	b.n	8008174 <_malloc_r+0x484>
 8008048:	6892      	ldr	r2, [r2, #8]
 800804a:	4594      	cmp	ip, r2
 800804c:	d1f6      	bne.n	800803c <_malloc_r+0x34c>
 800804e:	4663      	mov	r3, ip
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	6873      	ldr	r3, [r6, #4]
 8008054:	4661      	mov	r1, ip
 8008056:	60e2      	str	r2, [r4, #12]
 8008058:	60a1      	str	r1, [r4, #8]
 800805a:	6094      	str	r4, [r2, #8]
 800805c:	60cc      	str	r4, [r1, #12]
 800805e:	e6b6      	b.n	8007dce <_malloc_r+0xde>
 8008060:	2301      	movs	r3, #1
 8008062:	1960      	adds	r0, r4, r5
 8008064:	431d      	orrs	r5, r3
 8008066:	6065      	str	r5, [r4, #4]
 8008068:	6170      	str	r0, [r6, #20]
 800806a:	6130      	str	r0, [r6, #16]
 800806c:	60c2      	str	r2, [r0, #12]
 800806e:	6082      	str	r2, [r0, #8]
 8008070:	001a      	movs	r2, r3
 8008072:	464b      	mov	r3, r9
 8008074:	430a      	orrs	r2, r1
 8008076:	6042      	str	r2, [r0, #4]
 8008078:	0038      	movs	r0, r7
 800807a:	50e1      	str	r1, [r4, r3]
 800807c:	f000 f938 	bl	80082f0 <__malloc_unlock>
 8008080:	0020      	movs	r0, r4
 8008082:	3008      	adds	r0, #8
 8008084:	e703      	b.n	8007e8e <_malloc_r+0x19e>
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	20001040 	.word	0x20001040
 800808c:	000001ff 	.word	0x000001ff
 8008090:	20001448 	.word	0x20001448
 8008094:	20001618 	.word	0x20001618
 8008098:	0000100f 	.word	0x0000100f
 800809c:	200015e8 	.word	0x200015e8
 80080a0:	00001008 	.word	0x00001008
 80080a4:	20001610 	.word	0x20001610
 80080a8:	20001614 	.word	0x20001614
 80080ac:	6873      	ldr	r3, [r6, #4]
 80080ae:	e68e      	b.n	8007dce <_malloc_r+0xde>
 80080b0:	2308      	movs	r3, #8
 80080b2:	469b      	mov	fp, r3
 80080b4:	3b07      	subs	r3, #7
 80080b6:	44dc      	add	ip, fp
 80080b8:	469b      	mov	fp, r3
 80080ba:	44da      	add	sl, fp
 80080bc:	4643      	mov	r3, r8
 80080be:	4652      	mov	r2, sl
 80080c0:	4213      	tst	r3, r2
 80080c2:	d000      	beq.n	80080c6 <_malloc_r+0x3d6>
 80080c4:	e697      	b.n	8007df6 <_malloc_r+0x106>
 80080c6:	e037      	b.n	8008138 <_malloc_r+0x448>
 80080c8:	68dc      	ldr	r4, [r3, #12]
 80080ca:	3002      	adds	r0, #2
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d100      	bne.n	80080d2 <_malloc_r+0x3e2>
 80080d0:	e655      	b.n	8007d7e <_malloc_r+0x8e>
 80080d2:	e6ca      	b.n	8007e6a <_malloc_r+0x17a>
 80080d4:	2201      	movs	r2, #1
 80080d6:	18e3      	adds	r3, r4, r3
 80080d8:	6859      	ldr	r1, [r3, #4]
 80080da:	0038      	movs	r0, r7
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	68e3      	ldr	r3, [r4, #12]
 80080e2:	68a2      	ldr	r2, [r4, #8]
 80080e4:	60d3      	str	r3, [r2, #12]
 80080e6:	609a      	str	r2, [r3, #8]
 80080e8:	f000 f902 	bl	80082f0 <__malloc_unlock>
 80080ec:	0020      	movs	r0, r4
 80080ee:	3008      	adds	r0, #8
 80080f0:	e6cd      	b.n	8007e8e <_malloc_r+0x19e>
 80080f2:	235b      	movs	r3, #91	; 0x5b
 80080f4:	4698      	mov	r8, r3
 80080f6:	4480      	add	r8, r0
 80080f8:	305c      	adds	r0, #92	; 0x5c
 80080fa:	00c1      	lsls	r1, r0, #3
 80080fc:	e61f      	b.n	8007d3e <_malloc_r+0x4e>
 80080fe:	099a      	lsrs	r2, r3, #6
 8008100:	0011      	movs	r1, r2
 8008102:	3239      	adds	r2, #57	; 0x39
 8008104:	3138      	adds	r1, #56	; 0x38
 8008106:	00d2      	lsls	r2, r2, #3
 8008108:	e78c      	b.n	8008024 <_malloc_r+0x334>
 800810a:	42b4      	cmp	r4, r6
 800810c:	d000      	beq.n	8008110 <_malloc_r+0x420>
 800810e:	e75a      	b.n	8007fc6 <_malloc_r+0x2d6>
 8008110:	4b4f      	ldr	r3, [pc, #316]	; (8008250 <_malloc_r+0x560>)
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	469a      	mov	sl, r3
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	469c      	mov	ip, r3
 800811a:	4653      	mov	r3, sl
 800811c:	4462      	add	r2, ip
 800811e:	0011      	movs	r1, r2
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	e6ff      	b.n	8007f24 <_malloc_r+0x234>
 8008124:	2308      	movs	r3, #8
 8008126:	425b      	negs	r3, r3
 8008128:	469c      	mov	ip, r3
 800812a:	44e1      	add	r9, ip
 800812c:	464b      	mov	r3, r9
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	3801      	subs	r0, #1
 8008132:	4599      	cmp	r9, r3
 8008134:	d000      	beq.n	8008138 <_malloc_r+0x448>
 8008136:	e084      	b.n	8008242 <_malloc_r+0x552>
 8008138:	4643      	mov	r3, r8
 800813a:	4203      	tst	r3, r0
 800813c:	d1f2      	bne.n	8008124 <_malloc_r+0x434>
 800813e:	6873      	ldr	r3, [r6, #4]
 8008140:	438b      	bics	r3, r1
 8008142:	6073      	str	r3, [r6, #4]
 8008144:	0049      	lsls	r1, r1, #1
 8008146:	4299      	cmp	r1, r3
 8008148:	d900      	bls.n	800814c <_malloc_r+0x45c>
 800814a:	e6b5      	b.n	8007eb8 <_malloc_r+0x1c8>
 800814c:	2900      	cmp	r1, #0
 800814e:	d100      	bne.n	8008152 <_malloc_r+0x462>
 8008150:	e6b2      	b.n	8007eb8 <_malloc_r+0x1c8>
 8008152:	4650      	mov	r0, sl
 8008154:	420b      	tst	r3, r1
 8008156:	d000      	beq.n	800815a <_malloc_r+0x46a>
 8008158:	e648      	b.n	8007dec <_malloc_r+0xfc>
 800815a:	0049      	lsls	r1, r1, #1
 800815c:	3004      	adds	r0, #4
 800815e:	420b      	tst	r3, r1
 8008160:	d0fb      	beq.n	800815a <_malloc_r+0x46a>
 8008162:	e643      	b.n	8007dec <_malloc_r+0xfc>
 8008164:	2301      	movs	r3, #1
 8008166:	464a      	mov	r2, r9
 8008168:	6053      	str	r3, [r2, #4]
 800816a:	0038      	movs	r0, r7
 800816c:	f000 f8c0 	bl	80082f0 <__malloc_unlock>
 8008170:	2000      	movs	r0, #0
 8008172:	e68c      	b.n	8007e8e <_malloc_r+0x19e>
 8008174:	4694      	mov	ip, r2
 8008176:	e76a      	b.n	800804e <_malloc_r+0x35e>
 8008178:	23aa      	movs	r3, #170	; 0xaa
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	4298      	cmp	r0, r3
 800817e:	d811      	bhi.n	80081a4 <_malloc_r+0x4b4>
 8008180:	3bdd      	subs	r3, #221	; 0xdd
 8008182:	4698      	mov	r8, r3
 8008184:	0be8      	lsrs	r0, r5, #15
 8008186:	4480      	add	r8, r0
 8008188:	3078      	adds	r0, #120	; 0x78
 800818a:	00c1      	lsls	r1, r0, #3
 800818c:	e5d7      	b.n	8007d3e <_malloc_r+0x4e>
 800818e:	2380      	movs	r3, #128	; 0x80
 8008190:	015b      	lsls	r3, r3, #5
 8008192:	e6dd      	b.n	8007f50 <_malloc_r+0x260>
 8008194:	1089      	asrs	r1, r1, #2
 8008196:	3b02      	subs	r3, #2
 8008198:	408b      	lsls	r3, r1
 800819a:	6872      	ldr	r2, [r6, #4]
 800819c:	4313      	orrs	r3, r2
 800819e:	6073      	str	r3, [r6, #4]
 80081a0:	4662      	mov	r2, ip
 80081a2:	e757      	b.n	8008054 <_malloc_r+0x364>
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <_malloc_r+0x564>)
 80081a6:	4298      	cmp	r0, r3
 80081a8:	d81c      	bhi.n	80081e4 <_malloc_r+0x4f4>
 80081aa:	237c      	movs	r3, #124	; 0x7c
 80081ac:	4698      	mov	r8, r3
 80081ae:	0ca8      	lsrs	r0, r5, #18
 80081b0:	4480      	add	r8, r0
 80081b2:	307d      	adds	r0, #125	; 0x7d
 80081b4:	00c1      	lsls	r1, r0, #3
 80081b6:	e5c2      	b.n	8007d3e <_malloc_r+0x4e>
 80081b8:	3310      	adds	r3, #16
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	e699      	b.n	8007ef2 <_malloc_r+0x202>
 80081be:	2a54      	cmp	r2, #84	; 0x54
 80081c0:	d826      	bhi.n	8008210 <_malloc_r+0x520>
 80081c2:	464b      	mov	r3, r9
 80081c4:	0b1a      	lsrs	r2, r3, #12
 80081c6:	0011      	movs	r1, r2
 80081c8:	326f      	adds	r2, #111	; 0x6f
 80081ca:	316e      	adds	r1, #110	; 0x6e
 80081cc:	00d2      	lsls	r2, r2, #3
 80081ce:	e729      	b.n	8008024 <_malloc_r+0x334>
 80081d0:	051b      	lsls	r3, r3, #20
 80081d2:	d000      	beq.n	80081d6 <_malloc_r+0x4e6>
 80081d4:	e6a6      	b.n	8007f24 <_malloc_r+0x234>
 80081d6:	2001      	movs	r0, #1
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	68b2      	ldr	r2, [r6, #8]
 80081dc:	4443      	add	r3, r8
 80081de:	4303      	orrs	r3, r0
 80081e0:	6053      	str	r3, [r2, #4]
 80081e2:	e6e6      	b.n	8007fb2 <_malloc_r+0x2c2>
 80081e4:	21fe      	movs	r1, #254	; 0xfe
 80081e6:	237e      	movs	r3, #126	; 0x7e
 80081e8:	207f      	movs	r0, #127	; 0x7f
 80081ea:	0089      	lsls	r1, r1, #2
 80081ec:	4698      	mov	r8, r3
 80081ee:	e5a6      	b.n	8007d3e <_malloc_r+0x4e>
 80081f0:	2300      	movs	r3, #0
 80081f2:	2001      	movs	r0, #1
 80081f4:	469b      	mov	fp, r3
 80081f6:	e6bd      	b.n	8007f74 <_malloc_r+0x284>
 80081f8:	0021      	movs	r1, r4
 80081fa:	0038      	movs	r0, r7
 80081fc:	3108      	adds	r1, #8
 80081fe:	f7ff fc87 	bl	8007b10 <_free_r>
 8008202:	4653      	mov	r3, sl
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	e6d4      	b.n	8007fb2 <_malloc_r+0x2c2>
 8008208:	465b      	mov	r3, fp
 800820a:	464a      	mov	r2, r9
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e694      	b.n	8007f3a <_malloc_r+0x24a>
 8008210:	21aa      	movs	r1, #170	; 0xaa
 8008212:	0049      	lsls	r1, r1, #1
 8008214:	428a      	cmp	r2, r1
 8008216:	d806      	bhi.n	8008226 <_malloc_r+0x536>
 8008218:	464b      	mov	r3, r9
 800821a:	0bda      	lsrs	r2, r3, #15
 800821c:	0011      	movs	r1, r2
 800821e:	3278      	adds	r2, #120	; 0x78
 8008220:	3177      	adds	r1, #119	; 0x77
 8008222:	00d2      	lsls	r2, r2, #3
 8008224:	e6fe      	b.n	8008024 <_malloc_r+0x334>
 8008226:	490b      	ldr	r1, [pc, #44]	; (8008254 <_malloc_r+0x564>)
 8008228:	428a      	cmp	r2, r1
 800822a:	d806      	bhi.n	800823a <_malloc_r+0x54a>
 800822c:	464b      	mov	r3, r9
 800822e:	0c9a      	lsrs	r2, r3, #18
 8008230:	0011      	movs	r1, r2
 8008232:	327d      	adds	r2, #125	; 0x7d
 8008234:	317c      	adds	r1, #124	; 0x7c
 8008236:	00d2      	lsls	r2, r2, #3
 8008238:	e6f4      	b.n	8008024 <_malloc_r+0x334>
 800823a:	22fe      	movs	r2, #254	; 0xfe
 800823c:	217e      	movs	r1, #126	; 0x7e
 800823e:	0092      	lsls	r2, r2, #2
 8008240:	e6f0      	b.n	8008024 <_malloc_r+0x334>
 8008242:	6873      	ldr	r3, [r6, #4]
 8008244:	e77e      	b.n	8008144 <_malloc_r+0x454>
 8008246:	002b      	movs	r3, r5
 8008248:	08e8      	lsrs	r0, r5, #3
 800824a:	3308      	adds	r3, #8
 800824c:	e605      	b.n	8007e5a <_malloc_r+0x16a>
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	200015e8 	.word	0x200015e8
 8008254:	00000554 	.word	0x00000554
	...

08008260 <memchr>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	b2cd      	uxtb	r5, r1
 8008264:	0783      	lsls	r3, r0, #30
 8008266:	d034      	beq.n	80082d2 <memchr+0x72>
 8008268:	1e54      	subs	r4, r2, #1
 800826a:	2a00      	cmp	r2, #0
 800826c:	d01b      	beq.n	80082a6 <memchr+0x46>
 800826e:	7803      	ldrb	r3, [r0, #0]
 8008270:	42ab      	cmp	r3, r5
 8008272:	d019      	beq.n	80082a8 <memchr+0x48>
 8008274:	2203      	movs	r2, #3
 8008276:	e004      	b.n	8008282 <memchr+0x22>
 8008278:	3c01      	subs	r4, #1
 800827a:	d314      	bcc.n	80082a6 <memchr+0x46>
 800827c:	7803      	ldrb	r3, [r0, #0]
 800827e:	42ab      	cmp	r3, r5
 8008280:	d012      	beq.n	80082a8 <memchr+0x48>
 8008282:	3001      	adds	r0, #1
 8008284:	4210      	tst	r0, r2
 8008286:	d1f7      	bne.n	8008278 <memchr+0x18>
 8008288:	2c03      	cmp	r4, #3
 800828a:	d80e      	bhi.n	80082aa <memchr+0x4a>
 800828c:	2c00      	cmp	r4, #0
 800828e:	d00a      	beq.n	80082a6 <memchr+0x46>
 8008290:	7803      	ldrb	r3, [r0, #0]
 8008292:	42ab      	cmp	r3, r5
 8008294:	d008      	beq.n	80082a8 <memchr+0x48>
 8008296:	1904      	adds	r4, r0, r4
 8008298:	e002      	b.n	80082a0 <memchr+0x40>
 800829a:	7803      	ldrb	r3, [r0, #0]
 800829c:	42ab      	cmp	r3, r5
 800829e:	d003      	beq.n	80082a8 <memchr+0x48>
 80082a0:	3001      	adds	r0, #1
 80082a2:	4284      	cmp	r4, r0
 80082a4:	d1f9      	bne.n	800829a <memchr+0x3a>
 80082a6:	2000      	movs	r0, #0
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
 80082aa:	22ff      	movs	r2, #255	; 0xff
 80082ac:	060b      	lsls	r3, r1, #24
 80082ae:	0c1b      	lsrs	r3, r3, #16
 80082b0:	4011      	ands	r1, r2
 80082b2:	4319      	orrs	r1, r3
 80082b4:	040b      	lsls	r3, r1, #16
 80082b6:	4e08      	ldr	r6, [pc, #32]	; (80082d8 <memchr+0x78>)
 80082b8:	4319      	orrs	r1, r3
 80082ba:	6803      	ldr	r3, [r0, #0]
 80082bc:	4a07      	ldr	r2, [pc, #28]	; (80082dc <memchr+0x7c>)
 80082be:	404b      	eors	r3, r1
 80082c0:	189a      	adds	r2, r3, r2
 80082c2:	439a      	bics	r2, r3
 80082c4:	4232      	tst	r2, r6
 80082c6:	d1e3      	bne.n	8008290 <memchr+0x30>
 80082c8:	3c04      	subs	r4, #4
 80082ca:	3004      	adds	r0, #4
 80082cc:	2c03      	cmp	r4, #3
 80082ce:	d8f4      	bhi.n	80082ba <memchr+0x5a>
 80082d0:	e7dc      	b.n	800828c <memchr+0x2c>
 80082d2:	0014      	movs	r4, r2
 80082d4:	e7d8      	b.n	8008288 <memchr+0x28>
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	80808080 	.word	0x80808080
 80082dc:	fefefeff 	.word	0xfefefeff

080082e0 <__malloc_lock>:
 80082e0:	b510      	push	{r4, lr}
 80082e2:	4802      	ldr	r0, [pc, #8]	; (80082ec <__malloc_lock+0xc>)
 80082e4:	f000 fc8c 	bl	8008c00 <__retarget_lock_acquire_recursive>
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	20001e54 	.word	0x20001e54

080082f0 <__malloc_unlock>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	4802      	ldr	r0, [pc, #8]	; (80082fc <__malloc_unlock+0xc>)
 80082f4:	f000 fc8c 	bl	8008c10 <__retarget_lock_release_recursive>
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	20001e54 	.word	0x20001e54

08008300 <_Balloc>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	0004      	movs	r4, r0
 8008304:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008306:	000d      	movs	r5, r1
 8008308:	2800      	cmp	r0, #0
 800830a:	d00a      	beq.n	8008322 <_Balloc+0x22>
 800830c:	00ab      	lsls	r3, r5, #2
 800830e:	18c3      	adds	r3, r0, r3
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	2800      	cmp	r0, #0
 8008314:	d00f      	beq.n	8008336 <_Balloc+0x36>
 8008316:	6802      	ldr	r2, [r0, #0]
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	6103      	str	r3, [r0, #16]
 800831e:	60c3      	str	r3, [r0, #12]
 8008320:	bd70      	pop	{r4, r5, r6, pc}
 8008322:	2221      	movs	r2, #33	; 0x21
 8008324:	2104      	movs	r1, #4
 8008326:	0020      	movs	r0, r4
 8008328:	f000 fc3a 	bl	8008ba0 <_calloc_r>
 800832c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800832e:	2800      	cmp	r0, #0
 8008330:	d1ec      	bne.n	800830c <_Balloc+0xc>
 8008332:	2000      	movs	r0, #0
 8008334:	e7f4      	b.n	8008320 <_Balloc+0x20>
 8008336:	2601      	movs	r6, #1
 8008338:	40ae      	lsls	r6, r5
 800833a:	1d72      	adds	r2, r6, #5
 800833c:	0092      	lsls	r2, r2, #2
 800833e:	2101      	movs	r1, #1
 8008340:	0020      	movs	r0, r4
 8008342:	f000 fc2d 	bl	8008ba0 <_calloc_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	d0f3      	beq.n	8008332 <_Balloc+0x32>
 800834a:	6045      	str	r5, [r0, #4]
 800834c:	6086      	str	r6, [r0, #8]
 800834e:	e7e4      	b.n	800831a <_Balloc+0x1a>

08008350 <_Bfree>:
 8008350:	2900      	cmp	r1, #0
 8008352:	d006      	beq.n	8008362 <_Bfree+0x12>
 8008354:	684b      	ldr	r3, [r1, #4]
 8008356:	009a      	lsls	r2, r3, #2
 8008358:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800835a:	189b      	adds	r3, r3, r2
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	600a      	str	r2, [r1, #0]
 8008360:	6019      	str	r1, [r3, #0]
 8008362:	4770      	bx	lr
	...

08008370 <__multadd>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	46ce      	mov	lr, r9
 8008374:	4647      	mov	r7, r8
 8008376:	4681      	mov	r9, r0
 8008378:	0008      	movs	r0, r1
 800837a:	b580      	push	{r7, lr}
 800837c:	000d      	movs	r5, r1
 800837e:	690c      	ldr	r4, [r1, #16]
 8008380:	001f      	movs	r7, r3
 8008382:	2100      	movs	r1, #0
 8008384:	3014      	adds	r0, #20
 8008386:	6803      	ldr	r3, [r0, #0]
 8008388:	3101      	adds	r1, #1
 800838a:	041e      	lsls	r6, r3, #16
 800838c:	0c36      	lsrs	r6, r6, #16
 800838e:	4356      	muls	r6, r2
 8008390:	0c1b      	lsrs	r3, r3, #16
 8008392:	4353      	muls	r3, r2
 8008394:	19f6      	adds	r6, r6, r7
 8008396:	0c37      	lsrs	r7, r6, #16
 8008398:	19db      	adds	r3, r3, r7
 800839a:	0436      	lsls	r6, r6, #16
 800839c:	0c1f      	lsrs	r7, r3, #16
 800839e:	0c36      	lsrs	r6, r6, #16
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	199b      	adds	r3, r3, r6
 80083a4:	c008      	stmia	r0!, {r3}
 80083a6:	428c      	cmp	r4, r1
 80083a8:	dced      	bgt.n	8008386 <__multadd+0x16>
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	d008      	beq.n	80083c0 <__multadd+0x50>
 80083ae:	68ab      	ldr	r3, [r5, #8]
 80083b0:	429c      	cmp	r4, r3
 80083b2:	da0a      	bge.n	80083ca <__multadd+0x5a>
 80083b4:	1d23      	adds	r3, r4, #4
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	18eb      	adds	r3, r5, r3
 80083ba:	3401      	adds	r4, #1
 80083bc:	605f      	str	r7, [r3, #4]
 80083be:	612c      	str	r4, [r5, #16]
 80083c0:	0028      	movs	r0, r5
 80083c2:	bc0c      	pop	{r2, r3}
 80083c4:	4690      	mov	r8, r2
 80083c6:	4699      	mov	r9, r3
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ca:	686b      	ldr	r3, [r5, #4]
 80083cc:	4648      	mov	r0, r9
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	f7ff ff96 	bl	8008300 <_Balloc>
 80083d4:	0029      	movs	r1, r5
 80083d6:	692b      	ldr	r3, [r5, #16]
 80083d8:	4680      	mov	r8, r0
 80083da:	1c9a      	adds	r2, r3, #2
 80083dc:	0092      	lsls	r2, r2, #2
 80083de:	310c      	adds	r1, #12
 80083e0:	300c      	adds	r0, #12
 80083e2:	f7fc ff5d 	bl	80052a0 <memcpy>
 80083e6:	686b      	ldr	r3, [r5, #4]
 80083e8:	009a      	lsls	r2, r3, #2
 80083ea:	464b      	mov	r3, r9
 80083ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	602a      	str	r2, [r5, #0]
 80083f4:	601d      	str	r5, [r3, #0]
 80083f6:	4645      	mov	r5, r8
 80083f8:	e7dc      	b.n	80083b4 <__multadd+0x44>
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	0000      	movs	r0, r0
	...

08008400 <__hi0bits>:
 8008400:	0003      	movs	r3, r0
 8008402:	0c02      	lsrs	r2, r0, #16
 8008404:	2000      	movs	r0, #0
 8008406:	2a00      	cmp	r2, #0
 8008408:	d101      	bne.n	800840e <__hi0bits+0xe>
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	3010      	adds	r0, #16
 800840e:	0e1a      	lsrs	r2, r3, #24
 8008410:	d101      	bne.n	8008416 <__hi0bits+0x16>
 8008412:	3008      	adds	r0, #8
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	0f1a      	lsrs	r2, r3, #28
 8008418:	d101      	bne.n	800841e <__hi0bits+0x1e>
 800841a:	3004      	adds	r0, #4
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	0f9a      	lsrs	r2, r3, #30
 8008420:	d101      	bne.n	8008426 <__hi0bits+0x26>
 8008422:	3002      	adds	r0, #2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	db03      	blt.n	8008432 <__hi0bits+0x32>
 800842a:	3001      	adds	r0, #1
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	d400      	bmi.n	8008432 <__hi0bits+0x32>
 8008430:	2020      	movs	r0, #32
 8008432:	4770      	bx	lr
	...

08008440 <__lo0bits>:
 8008440:	6803      	ldr	r3, [r0, #0]
 8008442:	075a      	lsls	r2, r3, #29
 8008444:	d009      	beq.n	800845a <__lo0bits+0x1a>
 8008446:	2200      	movs	r2, #0
 8008448:	07d9      	lsls	r1, r3, #31
 800844a:	d404      	bmi.n	8008456 <__lo0bits+0x16>
 800844c:	079a      	lsls	r2, r3, #30
 800844e:	d420      	bmi.n	8008492 <__lo0bits+0x52>
 8008450:	2202      	movs	r2, #2
 8008452:	089b      	lsrs	r3, r3, #2
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	0010      	movs	r0, r2
 8008458:	4770      	bx	lr
 800845a:	0419      	lsls	r1, r3, #16
 800845c:	2200      	movs	r2, #0
 800845e:	2900      	cmp	r1, #0
 8008460:	d101      	bne.n	8008466 <__lo0bits+0x26>
 8008462:	0c1b      	lsrs	r3, r3, #16
 8008464:	3210      	adds	r2, #16
 8008466:	21ff      	movs	r1, #255	; 0xff
 8008468:	4219      	tst	r1, r3
 800846a:	d101      	bne.n	8008470 <__lo0bits+0x30>
 800846c:	3208      	adds	r2, #8
 800846e:	0a1b      	lsrs	r3, r3, #8
 8008470:	0719      	lsls	r1, r3, #28
 8008472:	d101      	bne.n	8008478 <__lo0bits+0x38>
 8008474:	3204      	adds	r2, #4
 8008476:	091b      	lsrs	r3, r3, #4
 8008478:	0799      	lsls	r1, r3, #30
 800847a:	d101      	bne.n	8008480 <__lo0bits+0x40>
 800847c:	3202      	adds	r2, #2
 800847e:	089b      	lsrs	r3, r3, #2
 8008480:	07d9      	lsls	r1, r3, #31
 8008482:	d404      	bmi.n	800848e <__lo0bits+0x4e>
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	d101      	bne.n	800848c <__lo0bits+0x4c>
 8008488:	2220      	movs	r2, #32
 800848a:	e7e4      	b.n	8008456 <__lo0bits+0x16>
 800848c:	3201      	adds	r2, #1
 800848e:	6003      	str	r3, [r0, #0]
 8008490:	e7e1      	b.n	8008456 <__lo0bits+0x16>
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	2201      	movs	r2, #1
 8008498:	e7dd      	b.n	8008456 <__lo0bits+0x16>
 800849a:	46c0      	nop			; (mov r8, r8)
 800849c:	0000      	movs	r0, r0
	...

080084a0 <__i2b>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	000c      	movs	r4, r1
 80084a4:	2101      	movs	r1, #1
 80084a6:	f7ff ff2b 	bl	8008300 <_Balloc>
 80084aa:	2301      	movs	r3, #1
 80084ac:	6144      	str	r4, [r0, #20]
 80084ae:	6103      	str	r3, [r0, #16]
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	46c0      	nop			; (mov r8, r8)
	...

080084c0 <__multiply>:
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c2:	4657      	mov	r7, sl
 80084c4:	464e      	mov	r6, r9
 80084c6:	4645      	mov	r5, r8
 80084c8:	46de      	mov	lr, fp
 80084ca:	b5e0      	push	{r5, r6, r7, lr}
 80084cc:	6914      	ldr	r4, [r2, #16]
 80084ce:	690e      	ldr	r6, [r1, #16]
 80084d0:	b085      	sub	sp, #20
 80084d2:	000f      	movs	r7, r1
 80084d4:	0015      	movs	r5, r2
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	da04      	bge.n	80084e4 <__multiply+0x24>
 80084da:	0033      	movs	r3, r6
 80084dc:	0017      	movs	r7, r2
 80084de:	0026      	movs	r6, r4
 80084e0:	000d      	movs	r5, r1
 80084e2:	001c      	movs	r4, r3
 80084e4:	1933      	adds	r3, r6, r4
 80084e6:	4698      	mov	r8, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4598      	cmp	r8, r3
 80084ee:	dd00      	ble.n	80084f2 <__multiply+0x32>
 80084f0:	3101      	adds	r1, #1
 80084f2:	f7ff ff05 	bl	8008300 <_Balloc>
 80084f6:	2214      	movs	r2, #20
 80084f8:	0003      	movs	r3, r0
 80084fa:	4694      	mov	ip, r2
 80084fc:	4463      	add	r3, ip
 80084fe:	469b      	mov	fp, r3
 8008500:	4643      	mov	r3, r8
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	445b      	add	r3, fp
 8008506:	0019      	movs	r1, r3
 8008508:	9302      	str	r3, [sp, #8]
 800850a:	9003      	str	r0, [sp, #12]
 800850c:	465b      	mov	r3, fp
 800850e:	2200      	movs	r2, #0
 8008510:	458b      	cmp	fp, r1
 8008512:	d203      	bcs.n	800851c <__multiply+0x5c>
 8008514:	9902      	ldr	r1, [sp, #8]
 8008516:	c304      	stmia	r3!, {r2}
 8008518:	4299      	cmp	r1, r3
 800851a:	d8fc      	bhi.n	8008516 <__multiply+0x56>
 800851c:	2314      	movs	r3, #20
 800851e:	00a4      	lsls	r4, r4, #2
 8008520:	469a      	mov	sl, r3
 8008522:	3714      	adds	r7, #20
 8008524:	0023      	movs	r3, r4
 8008526:	46bc      	mov	ip, r7
 8008528:	44aa      	add	sl, r5
 800852a:	00b6      	lsls	r6, r6, #2
 800852c:	4453      	add	r3, sl
 800852e:	9700      	str	r7, [sp, #0]
 8008530:	44b4      	add	ip, r6
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	459a      	cmp	sl, r3
 8008536:	d24f      	bcs.n	80085d8 <__multiply+0x118>
 8008538:	4653      	mov	r3, sl
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	041e      	lsls	r6, r3, #16
 800853e:	0c36      	lsrs	r6, r6, #16
 8008540:	d020      	beq.n	8008584 <__multiply+0xc4>
 8008542:	465c      	mov	r4, fp
 8008544:	2700      	movs	r7, #0
 8008546:	9d00      	ldr	r5, [sp, #0]
 8008548:	0021      	movs	r1, r4
 800854a:	cc08      	ldmia	r4!, {r3}
 800854c:	cd04      	ldmia	r5!, {r2}
 800854e:	4699      	mov	r9, r3
 8008550:	4648      	mov	r0, r9
 8008552:	0413      	lsls	r3, r2, #16
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	4373      	muls	r3, r6
 8008558:	0400      	lsls	r0, r0, #16
 800855a:	0c00      	lsrs	r0, r0, #16
 800855c:	181b      	adds	r3, r3, r0
 800855e:	19d8      	adds	r0, r3, r7
 8008560:	0c13      	lsrs	r3, r2, #16
 8008562:	464a      	mov	r2, r9
 8008564:	4373      	muls	r3, r6
 8008566:	0c12      	lsrs	r2, r2, #16
 8008568:	189b      	adds	r3, r3, r2
 800856a:	0c02      	lsrs	r2, r0, #16
 800856c:	189b      	adds	r3, r3, r2
 800856e:	0402      	lsls	r2, r0, #16
 8008570:	0c1f      	lsrs	r7, r3, #16
 8008572:	0c12      	lsrs	r2, r2, #16
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	4313      	orrs	r3, r2
 8008578:	600b      	str	r3, [r1, #0]
 800857a:	45ac      	cmp	ip, r5
 800857c:	d8e4      	bhi.n	8008548 <__multiply+0x88>
 800857e:	4653      	mov	r3, sl
 8008580:	6027      	str	r7, [r4, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	0c1e      	lsrs	r6, r3, #16
 8008586:	d020      	beq.n	80085ca <__multiply+0x10a>
 8008588:	465b      	mov	r3, fp
 800858a:	2100      	movs	r1, #0
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	465c      	mov	r4, fp
 8008590:	0018      	movs	r0, r3
 8008592:	000f      	movs	r7, r1
 8008594:	4662      	mov	r2, ip
 8008596:	9d00      	ldr	r5, [sp, #0]
 8008598:	8829      	ldrh	r1, [r5, #0]
 800859a:	0c00      	lsrs	r0, r0, #16
 800859c:	4371      	muls	r1, r6
 800859e:	1809      	adds	r1, r1, r0
 80085a0:	19c9      	adds	r1, r1, r7
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	0408      	lsls	r0, r1, #16
 80085a6:	0c1b      	lsrs	r3, r3, #16
 80085a8:	4303      	orrs	r3, r0
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	cd08      	ldmia	r5!, {r3}
 80085ae:	6860      	ldr	r0, [r4, #4]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	4373      	muls	r3, r6
 80085b4:	0407      	lsls	r7, r0, #16
 80085b6:	0c3f      	lsrs	r7, r7, #16
 80085b8:	19db      	adds	r3, r3, r7
 80085ba:	0c09      	lsrs	r1, r1, #16
 80085bc:	185b      	adds	r3, r3, r1
 80085be:	0c1f      	lsrs	r7, r3, #16
 80085c0:	3404      	adds	r4, #4
 80085c2:	42aa      	cmp	r2, r5
 80085c4:	d8e8      	bhi.n	8008598 <__multiply+0xd8>
 80085c6:	4694      	mov	ip, r2
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2304      	movs	r3, #4
 80085cc:	4699      	mov	r9, r3
 80085ce:	9b01      	ldr	r3, [sp, #4]
 80085d0:	44ca      	add	sl, r9
 80085d2:	44cb      	add	fp, r9
 80085d4:	4553      	cmp	r3, sl
 80085d6:	d8af      	bhi.n	8008538 <__multiply+0x78>
 80085d8:	4643      	mov	r3, r8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd0e      	ble.n	80085fc <__multiply+0x13c>
 80085de:	9b02      	ldr	r3, [sp, #8]
 80085e0:	3b04      	subs	r3, #4
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	d109      	bne.n	80085fc <__multiply+0x13c>
 80085e8:	4642      	mov	r2, r8
 80085ea:	e003      	b.n	80085f4 <__multiply+0x134>
 80085ec:	3b04      	subs	r3, #4
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d102      	bne.n	80085fa <__multiply+0x13a>
 80085f4:	3a01      	subs	r2, #1
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	d1f8      	bne.n	80085ec <__multiply+0x12c>
 80085fa:	4690      	mov	r8, r2
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	4642      	mov	r2, r8
 8008600:	0018      	movs	r0, r3
 8008602:	611a      	str	r2, [r3, #16]
 8008604:	b005      	add	sp, #20
 8008606:	bc3c      	pop	{r2, r3, r4, r5}
 8008608:	4690      	mov	r8, r2
 800860a:	4699      	mov	r9, r3
 800860c:	46a2      	mov	sl, r4
 800860e:	46ab      	mov	fp, r5
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	46c0      	nop			; (mov r8, r8)
	...

08008620 <__pow5mult>:
 8008620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008622:	4647      	mov	r7, r8
 8008624:	46ce      	mov	lr, r9
 8008626:	2303      	movs	r3, #3
 8008628:	b580      	push	{r7, lr}
 800862a:	4680      	mov	r8, r0
 800862c:	000f      	movs	r7, r1
 800862e:	0014      	movs	r4, r2
 8008630:	4013      	ands	r3, r2
 8008632:	d13a      	bne.n	80086aa <__pow5mult+0x8a>
 8008634:	10a4      	asrs	r4, r4, #2
 8008636:	003e      	movs	r6, r7
 8008638:	2c00      	cmp	r4, #0
 800863a:	d025      	beq.n	8008688 <__pow5mult+0x68>
 800863c:	4643      	mov	r3, r8
 800863e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8008640:	2d00      	cmp	r5, #0
 8008642:	d03b      	beq.n	80086bc <__pow5mult+0x9c>
 8008644:	003e      	movs	r6, r7
 8008646:	2300      	movs	r3, #0
 8008648:	2701      	movs	r7, #1
 800864a:	4699      	mov	r9, r3
 800864c:	4227      	tst	r7, r4
 800864e:	d107      	bne.n	8008660 <__pow5mult+0x40>
 8008650:	1064      	asrs	r4, r4, #1
 8008652:	d019      	beq.n	8008688 <__pow5mult+0x68>
 8008654:	6828      	ldr	r0, [r5, #0]
 8008656:	2800      	cmp	r0, #0
 8008658:	d01b      	beq.n	8008692 <__pow5mult+0x72>
 800865a:	0005      	movs	r5, r0
 800865c:	4227      	tst	r7, r4
 800865e:	d0f7      	beq.n	8008650 <__pow5mult+0x30>
 8008660:	002a      	movs	r2, r5
 8008662:	0031      	movs	r1, r6
 8008664:	4640      	mov	r0, r8
 8008666:	f7ff ff2b 	bl	80084c0 <__multiply>
 800866a:	2e00      	cmp	r6, #0
 800866c:	d01b      	beq.n	80086a6 <__pow5mult+0x86>
 800866e:	4642      	mov	r2, r8
 8008670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008672:	6873      	ldr	r3, [r6, #4]
 8008674:	4694      	mov	ip, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4463      	add	r3, ip
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	1064      	asrs	r4, r4, #1
 800867e:	6032      	str	r2, [r6, #0]
 8008680:	601e      	str	r6, [r3, #0]
 8008682:	0006      	movs	r6, r0
 8008684:	2c00      	cmp	r4, #0
 8008686:	d1e5      	bne.n	8008654 <__pow5mult+0x34>
 8008688:	0030      	movs	r0, r6
 800868a:	bc0c      	pop	{r2, r3}
 800868c:	4690      	mov	r8, r2
 800868e:	4699      	mov	r9, r3
 8008690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008692:	002a      	movs	r2, r5
 8008694:	0029      	movs	r1, r5
 8008696:	4640      	mov	r0, r8
 8008698:	f7ff ff12 	bl	80084c0 <__multiply>
 800869c:	464b      	mov	r3, r9
 800869e:	6028      	str	r0, [r5, #0]
 80086a0:	6003      	str	r3, [r0, #0]
 80086a2:	0005      	movs	r5, r0
 80086a4:	e7da      	b.n	800865c <__pow5mult+0x3c>
 80086a6:	0006      	movs	r6, r0
 80086a8:	e7d2      	b.n	8008650 <__pow5mult+0x30>
 80086aa:	4a0b      	ldr	r2, [pc, #44]	; (80086d8 <__pow5mult+0xb8>)
 80086ac:	3b01      	subs	r3, #1
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	589a      	ldr	r2, [r3, r2]
 80086b2:	2300      	movs	r3, #0
 80086b4:	f7ff fe5c 	bl	8008370 <__multadd>
 80086b8:	0007      	movs	r7, r0
 80086ba:	e7bb      	b.n	8008634 <__pow5mult+0x14>
 80086bc:	2101      	movs	r1, #1
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fe1e 	bl	8008300 <_Balloc>
 80086c4:	4b05      	ldr	r3, [pc, #20]	; (80086dc <__pow5mult+0xbc>)
 80086c6:	0005      	movs	r5, r0
 80086c8:	6143      	str	r3, [r0, #20]
 80086ca:	2301      	movs	r3, #1
 80086cc:	6103      	str	r3, [r0, #16]
 80086ce:	4643      	mov	r3, r8
 80086d0:	6498      	str	r0, [r3, #72]	; 0x48
 80086d2:	2300      	movs	r3, #0
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	e7b5      	b.n	8008644 <__pow5mult+0x24>
 80086d8:	08009850 	.word	0x08009850
 80086dc:	00000271 	.word	0x00000271

080086e0 <__lshift>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	464e      	mov	r6, r9
 80086e4:	4645      	mov	r5, r8
 80086e6:	46de      	mov	lr, fp
 80086e8:	4657      	mov	r7, sl
 80086ea:	b5e0      	push	{r5, r6, r7, lr}
 80086ec:	000e      	movs	r6, r1
 80086ee:	6933      	ldr	r3, [r6, #16]
 80086f0:	1154      	asrs	r4, r2, #5
 80086f2:	4698      	mov	r8, r3
 80086f4:	44a0      	add	r8, r4
 80086f6:	4643      	mov	r3, r8
 80086f8:	1c5d      	adds	r5, r3, #1
 80086fa:	68b3      	ldr	r3, [r6, #8]
 80086fc:	4683      	mov	fp, r0
 80086fe:	4691      	mov	r9, r2
 8008700:	6849      	ldr	r1, [r1, #4]
 8008702:	429d      	cmp	r5, r3
 8008704:	dd03      	ble.n	800870e <__lshift+0x2e>
 8008706:	3101      	adds	r1, #1
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	429d      	cmp	r5, r3
 800870c:	dcfb      	bgt.n	8008706 <__lshift+0x26>
 800870e:	4658      	mov	r0, fp
 8008710:	f7ff fdf6 	bl	8008300 <_Balloc>
 8008714:	0003      	movs	r3, r0
 8008716:	4684      	mov	ip, r0
 8008718:	3314      	adds	r3, #20
 800871a:	2c00      	cmp	r4, #0
 800871c:	dd06      	ble.n	800872c <__lshift+0x4c>
 800871e:	2100      	movs	r1, #0
 8008720:	00a4      	lsls	r4, r4, #2
 8008722:	001a      	movs	r2, r3
 8008724:	191b      	adds	r3, r3, r4
 8008726:	c202      	stmia	r2!, {r1}
 8008728:	4293      	cmp	r3, r2
 800872a:	d1fc      	bne.n	8008726 <__lshift+0x46>
 800872c:	6932      	ldr	r2, [r6, #16]
 800872e:	4648      	mov	r0, r9
 8008730:	0097      	lsls	r7, r2, #2
 8008732:	0031      	movs	r1, r6
 8008734:	221f      	movs	r2, #31
 8008736:	3114      	adds	r1, #20
 8008738:	4010      	ands	r0, r2
 800873a:	19cf      	adds	r7, r1, r7
 800873c:	4681      	mov	r9, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d025      	beq.n	800878e <__lshift+0xae>
 8008742:	2220      	movs	r2, #32
 8008744:	1a12      	subs	r2, r2, r0
 8008746:	4692      	mov	sl, r2
 8008748:	2200      	movs	r2, #0
 800874a:	4648      	mov	r0, r9
 800874c:	680c      	ldr	r4, [r1, #0]
 800874e:	4084      	lsls	r4, r0
 8008750:	4650      	mov	r0, sl
 8008752:	4314      	orrs	r4, r2
 8008754:	601c      	str	r4, [r3, #0]
 8008756:	c904      	ldmia	r1!, {r2}
 8008758:	3304      	adds	r3, #4
 800875a:	40c2      	lsrs	r2, r0
 800875c:	428f      	cmp	r7, r1
 800875e:	d8f4      	bhi.n	800874a <__lshift+0x6a>
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	2a00      	cmp	r2, #0
 8008764:	d001      	beq.n	800876a <__lshift+0x8a>
 8008766:	4645      	mov	r5, r8
 8008768:	3502      	adds	r5, #2
 800876a:	4663      	mov	r3, ip
 800876c:	3d01      	subs	r5, #1
 800876e:	611d      	str	r5, [r3, #16]
 8008770:	6873      	ldr	r3, [r6, #4]
 8008772:	4660      	mov	r0, ip
 8008774:	009a      	lsls	r2, r3, #2
 8008776:	465b      	mov	r3, fp
 8008778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877a:	189b      	adds	r3, r3, r2
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	6032      	str	r2, [r6, #0]
 8008780:	601e      	str	r6, [r3, #0]
 8008782:	bc3c      	pop	{r2, r3, r4, r5}
 8008784:	4690      	mov	r8, r2
 8008786:	4699      	mov	r9, r3
 8008788:	46a2      	mov	sl, r4
 800878a:	46ab      	mov	fp, r5
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	c904      	ldmia	r1!, {r2}
 8008790:	c304      	stmia	r3!, {r2}
 8008792:	428f      	cmp	r7, r1
 8008794:	d9e9      	bls.n	800876a <__lshift+0x8a>
 8008796:	c904      	ldmia	r1!, {r2}
 8008798:	c304      	stmia	r3!, {r2}
 800879a:	428f      	cmp	r7, r1
 800879c:	d8f7      	bhi.n	800878e <__lshift+0xae>
 800879e:	e7e4      	b.n	800876a <__lshift+0x8a>

080087a0 <__mcmp>:
 80087a0:	690a      	ldr	r2, [r1, #16]
 80087a2:	6903      	ldr	r3, [r0, #16]
 80087a4:	b530      	push	{r4, r5, lr}
 80087a6:	0005      	movs	r5, r0
 80087a8:	1a98      	subs	r0, r3, r2
 80087aa:	d111      	bne.n	80087d0 <__mcmp+0x30>
 80087ac:	0092      	lsls	r2, r2, #2
 80087ae:	3514      	adds	r5, #20
 80087b0:	3114      	adds	r1, #20
 80087b2:	18ab      	adds	r3, r5, r2
 80087b4:	1889      	adds	r1, r1, r2
 80087b6:	e001      	b.n	80087bc <__mcmp+0x1c>
 80087b8:	429d      	cmp	r5, r3
 80087ba:	d209      	bcs.n	80087d0 <__mcmp+0x30>
 80087bc:	3b04      	subs	r3, #4
 80087be:	3904      	subs	r1, #4
 80087c0:	681c      	ldr	r4, [r3, #0]
 80087c2:	680a      	ldr	r2, [r1, #0]
 80087c4:	4294      	cmp	r4, r2
 80087c6:	d0f7      	beq.n	80087b8 <__mcmp+0x18>
 80087c8:	4294      	cmp	r4, r2
 80087ca:	4180      	sbcs	r0, r0
 80087cc:	2201      	movs	r2, #1
 80087ce:	4310      	orrs	r0, r2
 80087d0:	bd30      	pop	{r4, r5, pc}
 80087d2:	46c0      	nop			; (mov r8, r8)
	...

080087e0 <__mdiff>:
 80087e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e2:	4645      	mov	r5, r8
 80087e4:	46de      	mov	lr, fp
 80087e6:	4657      	mov	r7, sl
 80087e8:	464e      	mov	r6, r9
 80087ea:	0014      	movs	r4, r2
 80087ec:	690b      	ldr	r3, [r1, #16]
 80087ee:	6912      	ldr	r2, [r2, #16]
 80087f0:	b5e0      	push	{r5, r6, r7, lr}
 80087f2:	4688      	mov	r8, r1
 80087f4:	1a9d      	subs	r5, r3, r2
 80087f6:	d11a      	bne.n	800882e <__mdiff+0x4e>
 80087f8:	000f      	movs	r7, r1
 80087fa:	2114      	movs	r1, #20
 80087fc:	468c      	mov	ip, r1
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	3714      	adds	r7, #20
 8008802:	44a4      	add	ip, r4
 8008804:	18bb      	adds	r3, r7, r2
 8008806:	4462      	add	r2, ip
 8008808:	e002      	b.n	8008810 <__mdiff+0x30>
 800880a:	429f      	cmp	r7, r3
 800880c:	d300      	bcc.n	8008810 <__mdiff+0x30>
 800880e:	e070      	b.n	80088f2 <__mdiff+0x112>
 8008810:	3b04      	subs	r3, #4
 8008812:	3a04      	subs	r2, #4
 8008814:	681e      	ldr	r6, [r3, #0]
 8008816:	6811      	ldr	r1, [r2, #0]
 8008818:	428e      	cmp	r6, r1
 800881a:	d0f6      	beq.n	800880a <__mdiff+0x2a>
 800881c:	d300      	bcc.n	8008820 <__mdiff+0x40>
 800881e:	e071      	b.n	8008904 <__mdiff+0x124>
 8008820:	4643      	mov	r3, r8
 8008822:	003e      	movs	r6, r7
 8008824:	46a0      	mov	r8, r4
 8008826:	4667      	mov	r7, ip
 8008828:	001c      	movs	r4, r3
 800882a:	2501      	movs	r5, #1
 800882c:	e006      	b.n	800883c <__mdiff+0x5c>
 800882e:	2d00      	cmp	r5, #0
 8008830:	db6a      	blt.n	8008908 <__mdiff+0x128>
 8008832:	4647      	mov	r7, r8
 8008834:	0026      	movs	r6, r4
 8008836:	2500      	movs	r5, #0
 8008838:	3714      	adds	r7, #20
 800883a:	3614      	adds	r6, #20
 800883c:	4643      	mov	r3, r8
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	f7ff fd5e 	bl	8008300 <_Balloc>
 8008844:	4643      	mov	r3, r8
 8008846:	4681      	mov	r9, r0
 8008848:	60c5      	str	r5, [r0, #12]
 800884a:	6918      	ldr	r0, [r3, #16]
 800884c:	464d      	mov	r5, r9
 800884e:	0083      	lsls	r3, r0, #2
 8008850:	469c      	mov	ip, r3
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	44bc      	add	ip, r7
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4698      	mov	r8, r3
 800885a:	2300      	movs	r3, #0
 800885c:	44b0      	add	r8, r6
 800885e:	3514      	adds	r5, #20
 8008860:	469a      	mov	sl, r3
 8008862:	e000      	b.n	8008866 <__mdiff+0x86>
 8008864:	0027      	movs	r7, r4
 8008866:	ce04      	ldmia	r6!, {r2}
 8008868:	003c      	movs	r4, r7
 800886a:	4693      	mov	fp, r2
 800886c:	4659      	mov	r1, fp
 800886e:	cc08      	ldmia	r4!, {r3}
 8008870:	0409      	lsls	r1, r1, #16
 8008872:	041a      	lsls	r2, r3, #16
 8008874:	0c12      	lsrs	r2, r2, #16
 8008876:	4452      	add	r2, sl
 8008878:	0c09      	lsrs	r1, r1, #16
 800887a:	1a52      	subs	r2, r2, r1
 800887c:	0c19      	lsrs	r1, r3, #16
 800887e:	465b      	mov	r3, fp
 8008880:	0c1b      	lsrs	r3, r3, #16
 8008882:	1acb      	subs	r3, r1, r3
 8008884:	1411      	asrs	r1, r2, #16
 8008886:	185b      	adds	r3, r3, r1
 8008888:	0412      	lsls	r2, r2, #16
 800888a:	1419      	asrs	r1, r3, #16
 800888c:	0c12      	lsrs	r2, r2, #16
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	468a      	mov	sl, r1
 8008892:	4313      	orrs	r3, r2
 8008894:	1d29      	adds	r1, r5, #4
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	000d      	movs	r5, r1
 800889a:	45b0      	cmp	r8, r6
 800889c:	d8e2      	bhi.n	8008864 <__mdiff+0x84>
 800889e:	45a4      	cmp	ip, r4
 80088a0:	d916      	bls.n	80088d0 <__mdiff+0xf0>
 80088a2:	cc08      	ldmia	r4!, {r3}
 80088a4:	041a      	lsls	r2, r3, #16
 80088a6:	0c12      	lsrs	r2, r2, #16
 80088a8:	4452      	add	r2, sl
 80088aa:	1416      	asrs	r6, r2, #16
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	199b      	adds	r3, r3, r6
 80088b0:	0412      	lsls	r2, r2, #16
 80088b2:	141e      	asrs	r6, r3, #16
 80088b4:	0c12      	lsrs	r2, r2, #16
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	4313      	orrs	r3, r2
 80088ba:	46b2      	mov	sl, r6
 80088bc:	c508      	stmia	r5!, {r3}
 80088be:	45a4      	cmp	ip, r4
 80088c0:	d8ef      	bhi.n	80088a2 <__mdiff+0xc2>
 80088c2:	4662      	mov	r2, ip
 80088c4:	2403      	movs	r4, #3
 80088c6:	1bd2      	subs	r2, r2, r7
 80088c8:	3a05      	subs	r2, #5
 80088ca:	43a2      	bics	r2, r4
 80088cc:	3204      	adds	r2, #4
 80088ce:	1889      	adds	r1, r1, r2
 80088d0:	3904      	subs	r1, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <__mdiff+0x100>
 80088d6:	3904      	subs	r1, #4
 80088d8:	680b      	ldr	r3, [r1, #0]
 80088da:	3801      	subs	r0, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0fa      	beq.n	80088d6 <__mdiff+0xf6>
 80088e0:	464b      	mov	r3, r9
 80088e2:	6118      	str	r0, [r3, #16]
 80088e4:	4648      	mov	r0, r9
 80088e6:	bc3c      	pop	{r2, r3, r4, r5}
 80088e8:	4690      	mov	r8, r2
 80088ea:	4699      	mov	r9, r3
 80088ec:	46a2      	mov	sl, r4
 80088ee:	46ab      	mov	fp, r5
 80088f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f2:	2100      	movs	r1, #0
 80088f4:	f7ff fd04 	bl	8008300 <_Balloc>
 80088f8:	2301      	movs	r3, #1
 80088fa:	6103      	str	r3, [r0, #16]
 80088fc:	2300      	movs	r3, #0
 80088fe:	4681      	mov	r9, r0
 8008900:	6143      	str	r3, [r0, #20]
 8008902:	e7ef      	b.n	80088e4 <__mdiff+0x104>
 8008904:	4666      	mov	r6, ip
 8008906:	e799      	b.n	800883c <__mdiff+0x5c>
 8008908:	0027      	movs	r7, r4
 800890a:	000e      	movs	r6, r1
 800890c:	46a0      	mov	r8, r4
 800890e:	3714      	adds	r7, #20
 8008910:	3614      	adds	r6, #20
 8008912:	000c      	movs	r4, r1
 8008914:	2501      	movs	r5, #1
 8008916:	e791      	b.n	800883c <__mdiff+0x5c>
	...

08008920 <__d2b>:
 8008920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008922:	2101      	movs	r1, #1
 8008924:	001c      	movs	r4, r3
 8008926:	b083      	sub	sp, #12
 8008928:	9e08      	ldr	r6, [sp, #32]
 800892a:	0015      	movs	r5, r2
 800892c:	f7ff fce8 	bl	8008300 <_Balloc>
 8008930:	0323      	lsls	r3, r4, #12
 8008932:	0064      	lsls	r4, r4, #1
 8008934:	0007      	movs	r7, r0
 8008936:	0b1b      	lsrs	r3, r3, #12
 8008938:	0d64      	lsrs	r4, r4, #21
 800893a:	d002      	beq.n	8008942 <__d2b+0x22>
 800893c:	2280      	movs	r2, #128	; 0x80
 800893e:	0352      	lsls	r2, r2, #13
 8008940:	4313      	orrs	r3, r2
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	2d00      	cmp	r5, #0
 8008946:	d019      	beq.n	800897c <__d2b+0x5c>
 8008948:	4668      	mov	r0, sp
 800894a:	9500      	str	r5, [sp, #0]
 800894c:	f7ff fd78 	bl	8008440 <__lo0bits>
 8008950:	2800      	cmp	r0, #0
 8008952:	d130      	bne.n	80089b6 <__d2b+0x96>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	61bb      	str	r3, [r7, #24]
 800895c:	1e5a      	subs	r2, r3, #1
 800895e:	4193      	sbcs	r3, r2
 8008960:	1c5d      	adds	r5, r3, #1
 8008962:	613d      	str	r5, [r7, #16]
 8008964:	2c00      	cmp	r4, #0
 8008966:	d014      	beq.n	8008992 <__d2b+0x72>
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <__d2b+0xb0>)
 800896a:	469c      	mov	ip, r3
 800896c:	2335      	movs	r3, #53	; 0x35
 800896e:	4464      	add	r4, ip
 8008970:	1824      	adds	r4, r4, r0
 8008972:	1a18      	subs	r0, r3, r0
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	6034      	str	r4, [r6, #0]
 8008978:	6018      	str	r0, [r3, #0]
 800897a:	e019      	b.n	80089b0 <__d2b+0x90>
 800897c:	a801      	add	r0, sp, #4
 800897e:	f7ff fd5f 	bl	8008440 <__lo0bits>
 8008982:	9b01      	ldr	r3, [sp, #4]
 8008984:	3020      	adds	r0, #32
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	2301      	movs	r3, #1
 800898a:	2501      	movs	r5, #1
 800898c:	613b      	str	r3, [r7, #16]
 800898e:	2c00      	cmp	r4, #0
 8008990:	d1ea      	bne.n	8008968 <__d2b+0x48>
 8008992:	4b10      	ldr	r3, [pc, #64]	; (80089d4 <__d2b+0xb4>)
 8008994:	469c      	mov	ip, r3
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <__d2b+0xb8>)
 8008998:	4460      	add	r0, ip
 800899a:	18eb      	adds	r3, r5, r3
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	6030      	str	r0, [r6, #0]
 80089a2:	6958      	ldr	r0, [r3, #20]
 80089a4:	f7ff fd2c 	bl	8008400 <__hi0bits>
 80089a8:	016b      	lsls	r3, r5, #5
 80089aa:	1a18      	subs	r0, r3, r0
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	6018      	str	r0, [r3, #0]
 80089b0:	0038      	movs	r0, r7
 80089b2:	b003      	add	sp, #12
 80089b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	0019      	movs	r1, r3
 80089bc:	1a12      	subs	r2, r2, r0
 80089be:	4091      	lsls	r1, r2
 80089c0:	000a      	movs	r2, r1
 80089c2:	40c3      	lsrs	r3, r0
 80089c4:	9900      	ldr	r1, [sp, #0]
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	617a      	str	r2, [r7, #20]
 80089cc:	e7c5      	b.n	800895a <__d2b+0x3a>
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	fffffbcd 	.word	0xfffffbcd
 80089d4:	fffffbce 	.word	0xfffffbce
 80089d8:	3fffffff 	.word	0x3fffffff
 80089dc:	00000000 	.word	0x00000000

080089e0 <_sbrk_r>:
 80089e0:	2300      	movs	r3, #0
 80089e2:	b570      	push	{r4, r5, r6, lr}
 80089e4:	4c06      	ldr	r4, [pc, #24]	; (8008a00 <_sbrk_r+0x20>)
 80089e6:	0005      	movs	r5, r0
 80089e8:	0008      	movs	r0, r1
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	f000 fba0 	bl	8009130 <_sbrk>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d000      	beq.n	80089f6 <_sbrk_r+0x16>
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0fb      	beq.n	80089f4 <_sbrk_r+0x14>
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	e7f9      	b.n	80089f4 <_sbrk_r+0x14>
 8008a00:	20001e40 	.word	0x20001e40
	...

08008a10 <strlen>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	0783      	lsls	r3, r0, #30
 8008a14:	d025      	beq.n	8008a62 <strlen+0x52>
 8008a16:	7803      	ldrb	r3, [r0, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d024      	beq.n	8008a66 <strlen+0x56>
 8008a1c:	0003      	movs	r3, r0
 8008a1e:	2103      	movs	r1, #3
 8008a20:	e002      	b.n	8008a28 <strlen+0x18>
 8008a22:	781a      	ldrb	r2, [r3, #0]
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	d01a      	beq.n	8008a5e <strlen+0x4e>
 8008a28:	3301      	adds	r3, #1
 8008a2a:	420b      	tst	r3, r1
 8008a2c:	d1f9      	bne.n	8008a22 <strlen+0x12>
 8008a2e:	6819      	ldr	r1, [r3, #0]
 8008a30:	4a0e      	ldr	r2, [pc, #56]	; (8008a6c <strlen+0x5c>)
 8008a32:	4c0f      	ldr	r4, [pc, #60]	; (8008a70 <strlen+0x60>)
 8008a34:	188a      	adds	r2, r1, r2
 8008a36:	438a      	bics	r2, r1
 8008a38:	4222      	tst	r2, r4
 8008a3a:	d106      	bne.n	8008a4a <strlen+0x3a>
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <strlen+0x5c>)
 8008a42:	188a      	adds	r2, r1, r2
 8008a44:	438a      	bics	r2, r1
 8008a46:	4222      	tst	r2, r4
 8008a48:	d0f8      	beq.n	8008a3c <strlen+0x2c>
 8008a4a:	001a      	movs	r2, r3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <strlen+0x4a>
 8008a52:	3201      	adds	r2, #1
 8008a54:	7811      	ldrb	r1, [r2, #0]
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d1fb      	bne.n	8008a52 <strlen+0x42>
 8008a5a:	1a10      	subs	r0, r2, r0
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	1a18      	subs	r0, r3, r0
 8008a60:	e7fc      	b.n	8008a5c <strlen+0x4c>
 8008a62:	0003      	movs	r3, r0
 8008a64:	e7e3      	b.n	8008a2e <strlen+0x1e>
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7f8      	b.n	8008a5c <strlen+0x4c>
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	fefefeff 	.word	0xfefefeff
 8008a70:	80808080 	.word	0x80808080
	...

08008a80 <__ssprint_r>:
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	4657      	mov	r7, sl
 8008a84:	464e      	mov	r6, r9
 8008a86:	46de      	mov	lr, fp
 8008a88:	4645      	mov	r5, r8
 8008a8a:	b5e0      	push	{r5, r6, r7, lr}
 8008a8c:	6893      	ldr	r3, [r2, #8]
 8008a8e:	b083      	sub	sp, #12
 8008a90:	9001      	str	r0, [sp, #4]
 8008a92:	000e      	movs	r6, r1
 8008a94:	4692      	mov	sl, r2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d070      	beq.n	8008b7c <__ssprint_r+0xfc>
 8008a9a:	688d      	ldr	r5, [r1, #8]
 8008a9c:	6813      	ldr	r3, [r2, #0]
 8008a9e:	002c      	movs	r4, r5
 8008aa0:	6808      	ldr	r0, [r1, #0]
 8008aa2:	001d      	movs	r5, r3
 8008aa4:	e046      	b.n	8008b34 <__ssprint_r+0xb4>
 8008aa6:	2290      	movs	r2, #144	; 0x90
 8008aa8:	89b3      	ldrh	r3, [r6, #12]
 8008aaa:	00d2      	lsls	r2, r2, #3
 8008aac:	4213      	tst	r3, r2
 8008aae:	d030      	beq.n	8008b12 <__ssprint_r+0x92>
 8008ab0:	6931      	ldr	r1, [r6, #16]
 8008ab2:	1a42      	subs	r2, r0, r1
 8008ab4:	4693      	mov	fp, r2
 8008ab6:	6970      	ldr	r0, [r6, #20]
 8008ab8:	0042      	lsls	r2, r0, #1
 8008aba:	1812      	adds	r2, r2, r0
 8008abc:	0fd0      	lsrs	r0, r2, #31
 8008abe:	1882      	adds	r2, r0, r2
 8008ac0:	1052      	asrs	r2, r2, #1
 8008ac2:	4690      	mov	r8, r2
 8008ac4:	465a      	mov	r2, fp
 8008ac6:	1c50      	adds	r0, r2, #1
 8008ac8:	19c0      	adds	r0, r0, r7
 8008aca:	4642      	mov	r2, r8
 8008acc:	4540      	cmp	r0, r8
 8008ace:	d901      	bls.n	8008ad4 <__ssprint_r+0x54>
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	0002      	movs	r2, r0
 8008ad4:	2080      	movs	r0, #128	; 0x80
 8008ad6:	00c0      	lsls	r0, r0, #3
 8008ad8:	4203      	tst	r3, r0
 8008ada:	d038      	beq.n	8008b4e <__ssprint_r+0xce>
 8008adc:	0011      	movs	r1, r2
 8008ade:	9801      	ldr	r0, [sp, #4]
 8008ae0:	f7ff f906 	bl	8007cf0 <_malloc_r>
 8008ae4:	1e04      	subs	r4, r0, #0
 8008ae6:	d054      	beq.n	8008b92 <__ssprint_r+0x112>
 8008ae8:	465a      	mov	r2, fp
 8008aea:	6931      	ldr	r1, [r6, #16]
 8008aec:	f7fc fbd8 	bl	80052a0 <memcpy>
 8008af0:	89b3      	ldrh	r3, [r6, #12]
 8008af2:	4a2a      	ldr	r2, [pc, #168]	; (8008b9c <__ssprint_r+0x11c>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	4313      	orrs	r3, r2
 8008afa:	81b3      	strh	r3, [r6, #12]
 8008afc:	4643      	mov	r3, r8
 8008afe:	0020      	movs	r0, r4
 8008b00:	465a      	mov	r2, fp
 8008b02:	6134      	str	r4, [r6, #16]
 8008b04:	46b8      	mov	r8, r7
 8008b06:	003c      	movs	r4, r7
 8008b08:	4458      	add	r0, fp
 8008b0a:	6173      	str	r3, [r6, #20]
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	6030      	str	r0, [r6, #0]
 8008b10:	60b3      	str	r3, [r6, #8]
 8008b12:	4642      	mov	r2, r8
 8008b14:	4649      	mov	r1, r9
 8008b16:	f000 f89b 	bl	8008c50 <memmove>
 8008b1a:	68b3      	ldr	r3, [r6, #8]
 8008b1c:	1b1c      	subs	r4, r3, r4
 8008b1e:	6833      	ldr	r3, [r6, #0]
 8008b20:	60b4      	str	r4, [r6, #8]
 8008b22:	4443      	add	r3, r8
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	0018      	movs	r0, r3
 8008b28:	4653      	mov	r3, sl
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	1bdf      	subs	r7, r3, r7
 8008b2e:	4653      	mov	r3, sl
 8008b30:	609f      	str	r7, [r3, #8]
 8008b32:	d023      	beq.n	8008b7c <__ssprint_r+0xfc>
 8008b34:	686f      	ldr	r7, [r5, #4]
 8008b36:	002b      	movs	r3, r5
 8008b38:	3508      	adds	r5, #8
 8008b3a:	2f00      	cmp	r7, #0
 8008b3c:	d0fa      	beq.n	8008b34 <__ssprint_r+0xb4>
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	46a0      	mov	r8, r4
 8008b42:	4699      	mov	r9, r3
 8008b44:	42a7      	cmp	r7, r4
 8008b46:	d2ae      	bcs.n	8008aa6 <__ssprint_r+0x26>
 8008b48:	003c      	movs	r4, r7
 8008b4a:	46b8      	mov	r8, r7
 8008b4c:	e7e1      	b.n	8008b12 <__ssprint_r+0x92>
 8008b4e:	9801      	ldr	r0, [sp, #4]
 8008b50:	f000 f91e 	bl	8008d90 <_realloc_r>
 8008b54:	1e04      	subs	r4, r0, #0
 8008b56:	d1d1      	bne.n	8008afc <__ssprint_r+0x7c>
 8008b58:	9c01      	ldr	r4, [sp, #4]
 8008b5a:	6931      	ldr	r1, [r6, #16]
 8008b5c:	0020      	movs	r0, r4
 8008b5e:	f7fe ffd7 	bl	8007b10 <_free_r>
 8008b62:	230c      	movs	r3, #12
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	2240      	movs	r2, #64	; 0x40
 8008b68:	89b3      	ldrh	r3, [r6, #12]
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	81b3      	strh	r3, [r6, #12]
 8008b70:	4652      	mov	r2, sl
 8008b72:	2300      	movs	r3, #0
 8008b74:	4240      	negs	r0, r0
 8008b76:	6093      	str	r3, [r2, #8]
 8008b78:	6053      	str	r3, [r2, #4]
 8008b7a:	e003      	b.n	8008b84 <__ssprint_r+0x104>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4652      	mov	r2, sl
 8008b80:	2000      	movs	r0, #0
 8008b82:	6053      	str	r3, [r2, #4]
 8008b84:	b003      	add	sp, #12
 8008b86:	bc3c      	pop	{r2, r3, r4, r5}
 8008b88:	4690      	mov	r8, r2
 8008b8a:	4699      	mov	r9, r3
 8008b8c:	46a2      	mov	sl, r4
 8008b8e:	46ab      	mov	fp, r5
 8008b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b92:	230c      	movs	r3, #12
 8008b94:	9a01      	ldr	r2, [sp, #4]
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e7e5      	b.n	8008b66 <__ssprint_r+0xe6>
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	fffffb7f 	.word	0xfffffb7f

08008ba0 <_calloc_r>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4351      	muls	r1, r2
 8008ba4:	f7ff f8a4 	bl	8007cf0 <_malloc_r>
 8008ba8:	1e04      	subs	r4, r0, #0
 8008baa:	d01c      	beq.n	8008be6 <_calloc_r+0x46>
 8008bac:	0003      	movs	r3, r0
 8008bae:	3b08      	subs	r3, #8
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	439a      	bics	r2, r3
 8008bb6:	3a04      	subs	r2, #4
 8008bb8:	2a24      	cmp	r2, #36	; 0x24
 8008bba:	d816      	bhi.n	8008bea <_calloc_r+0x4a>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	2a13      	cmp	r2, #19
 8008bc0:	d90d      	bls.n	8008bde <_calloc_r+0x3e>
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	6001      	str	r1, [r0, #0]
 8008bc8:	6041      	str	r1, [r0, #4]
 8008bca:	2a1b      	cmp	r2, #27
 8008bcc:	d907      	bls.n	8008bde <_calloc_r+0x3e>
 8008bce:	6081      	str	r1, [r0, #8]
 8008bd0:	60c1      	str	r1, [r0, #12]
 8008bd2:	2a24      	cmp	r2, #36	; 0x24
 8008bd4:	d10d      	bne.n	8008bf2 <_calloc_r+0x52>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	6101      	str	r1, [r0, #16]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	6141      	str	r1, [r0, #20]
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	609a      	str	r2, [r3, #8]
 8008be6:	0020      	movs	r0, r4
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	2100      	movs	r1, #0
 8008bec:	f000 f880 	bl	8008cf0 <memset>
 8008bf0:	e7f9      	b.n	8008be6 <_calloc_r+0x46>
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	3310      	adds	r3, #16
 8008bf6:	e7f2      	b.n	8008bde <_calloc_r+0x3e>
	...

08008c00 <__retarget_lock_acquire_recursive>:
 8008c00:	4770      	bx	lr
 8008c02:	46c0      	nop			; (mov r8, r8)
	...

08008c10 <__retarget_lock_release_recursive>:
 8008c10:	4770      	bx	lr
 8008c12:	46c0      	nop			; (mov r8, r8)
	...

08008c20 <__ascii_mbtowc>:
 8008c20:	b082      	sub	sp, #8
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d00a      	beq.n	8008c3c <__ascii_mbtowc+0x1c>
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	d00b      	beq.n	8008c42 <__ascii_mbtowc+0x22>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <__ascii_mbtowc+0x26>
 8008c2e:	7813      	ldrb	r3, [r2, #0]
 8008c30:	600b      	str	r3, [r1, #0]
 8008c32:	7810      	ldrb	r0, [r2, #0]
 8008c34:	1e43      	subs	r3, r0, #1
 8008c36:	4198      	sbcs	r0, r3
 8008c38:	b002      	add	sp, #8
 8008c3a:	4770      	bx	lr
 8008c3c:	a901      	add	r1, sp, #4
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	d1f3      	bne.n	8008c2a <__ascii_mbtowc+0xa>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e7f8      	b.n	8008c38 <__ascii_mbtowc+0x18>
 8008c46:	2002      	movs	r0, #2
 8008c48:	4240      	negs	r0, r0
 8008c4a:	e7f5      	b.n	8008c38 <__ascii_mbtowc+0x18>
 8008c4c:	0000      	movs	r0, r0
	...

08008c50 <memmove>:
 8008c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c52:	4288      	cmp	r0, r1
 8008c54:	d90a      	bls.n	8008c6c <memmove+0x1c>
 8008c56:	188b      	adds	r3, r1, r2
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	d207      	bcs.n	8008c6c <memmove+0x1c>
 8008c5c:	1e53      	subs	r3, r2, #1
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d003      	beq.n	8008c6a <memmove+0x1a>
 8008c62:	5cca      	ldrb	r2, [r1, r3]
 8008c64:	54c2      	strb	r2, [r0, r3]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	d2fb      	bcs.n	8008c62 <memmove+0x12>
 8008c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6c:	0005      	movs	r5, r0
 8008c6e:	2a0f      	cmp	r2, #15
 8008c70:	d808      	bhi.n	8008c84 <memmove+0x34>
 8008c72:	2a00      	cmp	r2, #0
 8008c74:	d0f9      	beq.n	8008c6a <memmove+0x1a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	5ccc      	ldrb	r4, [r1, r3]
 8008c7a:	54ec      	strb	r4, [r5, r3]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d1fa      	bne.n	8008c78 <memmove+0x28>
 8008c82:	e7f2      	b.n	8008c6a <memmove+0x1a>
 8008c84:	000b      	movs	r3, r1
 8008c86:	4303      	orrs	r3, r0
 8008c88:	079b      	lsls	r3, r3, #30
 8008c8a:	d12d      	bne.n	8008ce8 <memmove+0x98>
 8008c8c:	0015      	movs	r5, r2
 8008c8e:	000c      	movs	r4, r1
 8008c90:	0003      	movs	r3, r0
 8008c92:	3d10      	subs	r5, #16
 8008c94:	092f      	lsrs	r7, r5, #4
 8008c96:	3701      	adds	r7, #1
 8008c98:	013f      	lsls	r7, r7, #4
 8008c9a:	19c7      	adds	r7, r0, r7
 8008c9c:	6826      	ldr	r6, [r4, #0]
 8008c9e:	601e      	str	r6, [r3, #0]
 8008ca0:	6866      	ldr	r6, [r4, #4]
 8008ca2:	605e      	str	r6, [r3, #4]
 8008ca4:	68a6      	ldr	r6, [r4, #8]
 8008ca6:	609e      	str	r6, [r3, #8]
 8008ca8:	68e6      	ldr	r6, [r4, #12]
 8008caa:	3410      	adds	r4, #16
 8008cac:	60de      	str	r6, [r3, #12]
 8008cae:	3310      	adds	r3, #16
 8008cb0:	429f      	cmp	r7, r3
 8008cb2:	d1f3      	bne.n	8008c9c <memmove+0x4c>
 8008cb4:	240f      	movs	r4, #15
 8008cb6:	43a5      	bics	r5, r4
 8008cb8:	3510      	adds	r5, #16
 8008cba:	1949      	adds	r1, r1, r5
 8008cbc:	4014      	ands	r4, r2
 8008cbe:	1945      	adds	r5, r0, r5
 8008cc0:	2c03      	cmp	r4, #3
 8008cc2:	d913      	bls.n	8008cec <memmove+0x9c>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	1f27      	subs	r7, r4, #4
 8008cc8:	08be      	lsrs	r6, r7, #2
 8008cca:	3601      	adds	r6, #1
 8008ccc:	00b6      	lsls	r6, r6, #2
 8008cce:	58cc      	ldr	r4, [r1, r3]
 8008cd0:	50ec      	str	r4, [r5, r3]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	42b3      	cmp	r3, r6
 8008cd6:	d1fa      	bne.n	8008cce <memmove+0x7e>
 8008cd8:	2603      	movs	r6, #3
 8008cda:	43b7      	bics	r7, r6
 8008cdc:	1d3c      	adds	r4, r7, #4
 8008cde:	1909      	adds	r1, r1, r4
 8008ce0:	192d      	adds	r5, r5, r4
 8008ce2:	4032      	ands	r2, r6
 8008ce4:	d1c7      	bne.n	8008c76 <memmove+0x26>
 8008ce6:	e7c0      	b.n	8008c6a <memmove+0x1a>
 8008ce8:	0005      	movs	r5, r0
 8008cea:	e7c4      	b.n	8008c76 <memmove+0x26>
 8008cec:	0022      	movs	r2, r4
 8008cee:	e7c0      	b.n	8008c72 <memmove+0x22>

08008cf0 <memset>:
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	0783      	lsls	r3, r0, #30
 8008cf4:	d043      	beq.n	8008d7e <memset+0x8e>
 8008cf6:	1e54      	subs	r4, r2, #1
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d03f      	beq.n	8008d7c <memset+0x8c>
 8008cfc:	b2ce      	uxtb	r6, r1
 8008cfe:	0002      	movs	r2, r0
 8008d00:	2503      	movs	r5, #3
 8008d02:	e002      	b.n	8008d0a <memset+0x1a>
 8008d04:	001a      	movs	r2, r3
 8008d06:	3c01      	subs	r4, #1
 8008d08:	d338      	bcc.n	8008d7c <memset+0x8c>
 8008d0a:	1c53      	adds	r3, r2, #1
 8008d0c:	7016      	strb	r6, [r2, #0]
 8008d0e:	422b      	tst	r3, r5
 8008d10:	d1f8      	bne.n	8008d04 <memset+0x14>
 8008d12:	2c03      	cmp	r4, #3
 8008d14:	d92a      	bls.n	8008d6c <memset+0x7c>
 8008d16:	22ff      	movs	r2, #255	; 0xff
 8008d18:	400a      	ands	r2, r1
 8008d1a:	0215      	lsls	r5, r2, #8
 8008d1c:	4315      	orrs	r5, r2
 8008d1e:	042a      	lsls	r2, r5, #16
 8008d20:	4315      	orrs	r5, r2
 8008d22:	2c0f      	cmp	r4, #15
 8008d24:	d914      	bls.n	8008d50 <memset+0x60>
 8008d26:	0027      	movs	r7, r4
 8008d28:	001a      	movs	r2, r3
 8008d2a:	3f10      	subs	r7, #16
 8008d2c:	093e      	lsrs	r6, r7, #4
 8008d2e:	3601      	adds	r6, #1
 8008d30:	0136      	lsls	r6, r6, #4
 8008d32:	199e      	adds	r6, r3, r6
 8008d34:	6015      	str	r5, [r2, #0]
 8008d36:	6055      	str	r5, [r2, #4]
 8008d38:	6095      	str	r5, [r2, #8]
 8008d3a:	60d5      	str	r5, [r2, #12]
 8008d3c:	3210      	adds	r2, #16
 8008d3e:	4296      	cmp	r6, r2
 8008d40:	d1f8      	bne.n	8008d34 <memset+0x44>
 8008d42:	220f      	movs	r2, #15
 8008d44:	4397      	bics	r7, r2
 8008d46:	3710      	adds	r7, #16
 8008d48:	19db      	adds	r3, r3, r7
 8008d4a:	4014      	ands	r4, r2
 8008d4c:	2c03      	cmp	r4, #3
 8008d4e:	d90d      	bls.n	8008d6c <memset+0x7c>
 8008d50:	001a      	movs	r2, r3
 8008d52:	1f27      	subs	r7, r4, #4
 8008d54:	08be      	lsrs	r6, r7, #2
 8008d56:	3601      	adds	r6, #1
 8008d58:	00b6      	lsls	r6, r6, #2
 8008d5a:	199e      	adds	r6, r3, r6
 8008d5c:	c220      	stmia	r2!, {r5}
 8008d5e:	42b2      	cmp	r2, r6
 8008d60:	d1fc      	bne.n	8008d5c <memset+0x6c>
 8008d62:	2203      	movs	r2, #3
 8008d64:	4397      	bics	r7, r2
 8008d66:	3704      	adds	r7, #4
 8008d68:	19db      	adds	r3, r3, r7
 8008d6a:	4014      	ands	r4, r2
 8008d6c:	2c00      	cmp	r4, #0
 8008d6e:	d005      	beq.n	8008d7c <memset+0x8c>
 8008d70:	b2c9      	uxtb	r1, r1
 8008d72:	191c      	adds	r4, r3, r4
 8008d74:	7019      	strb	r1, [r3, #0]
 8008d76:	3301      	adds	r3, #1
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d1fb      	bne.n	8008d74 <memset+0x84>
 8008d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d7e:	0014      	movs	r4, r2
 8008d80:	0003      	movs	r3, r0
 8008d82:	e7c6      	b.n	8008d12 <memset+0x22>
	...

08008d90 <_realloc_r>:
 8008d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d92:	464e      	mov	r6, r9
 8008d94:	4645      	mov	r5, r8
 8008d96:	46de      	mov	lr, fp
 8008d98:	4657      	mov	r7, sl
 8008d9a:	b5e0      	push	{r5, r6, r7, lr}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	9001      	str	r0, [sp, #4]
 8008da0:	000e      	movs	r6, r1
 8008da2:	0015      	movs	r5, r2
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d100      	bne.n	8008daa <_realloc_r+0x1a>
 8008da8:	e09e      	b.n	8008ee8 <_realloc_r+0x158>
 8008daa:	0037      	movs	r7, r6
 8008dac:	9801      	ldr	r0, [sp, #4]
 8008dae:	3f08      	subs	r7, #8
 8008db0:	f7ff fa96 	bl	80082e0 <__malloc_lock>
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	2303      	movs	r3, #3
 8008db8:	0014      	movs	r4, r2
 8008dba:	439c      	bics	r4, r3
 8008dbc:	002b      	movs	r3, r5
 8008dbe:	330b      	adds	r3, #11
 8008dc0:	46b9      	mov	r9, r7
 8008dc2:	2b16      	cmp	r3, #22
 8008dc4:	d847      	bhi.n	8008e56 <_realloc_r+0xc6>
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	2310      	movs	r3, #16
 8008dca:	4688      	mov	r8, r1
 8008dcc:	4545      	cmp	r5, r8
 8008dce:	d846      	bhi.n	8008e5e <_realloc_r+0xce>
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	da49      	bge.n	8008e68 <_realloc_r+0xd8>
 8008dd4:	49cc      	ldr	r1, [pc, #816]	; (8009108 <_realloc_r+0x378>)
 8008dd6:	1938      	adds	r0, r7, r4
 8008dd8:	468b      	mov	fp, r1
 8008dda:	6889      	ldr	r1, [r1, #8]
 8008ddc:	9002      	str	r0, [sp, #8]
 8008dde:	4288      	cmp	r0, r1
 8008de0:	d100      	bne.n	8008de4 <_realloc_r+0x54>
 8008de2:	e0c2      	b.n	8008f6a <_realloc_r+0x1da>
 8008de4:	2101      	movs	r1, #1
 8008de6:	468a      	mov	sl, r1
 8008de8:	6840      	ldr	r0, [r0, #4]
 8008dea:	0001      	movs	r1, r0
 8008dec:	9003      	str	r0, [sp, #12]
 8008dee:	4650      	mov	r0, sl
 8008df0:	4381      	bics	r1, r0
 8008df2:	468c      	mov	ip, r1
 8008df4:	9902      	ldr	r1, [sp, #8]
 8008df6:	468b      	mov	fp, r1
 8008df8:	44dc      	add	ip, fp
 8008dfa:	4661      	mov	r1, ip
 8008dfc:	6849      	ldr	r1, [r1, #4]
 8008dfe:	4201      	tst	r1, r0
 8008e00:	d04d      	beq.n	8008e9e <_realloc_r+0x10e>
 8008e02:	4210      	tst	r0, r2
 8008e04:	d100      	bne.n	8008e08 <_realloc_r+0x78>
 8008e06:	e0a2      	b.n	8008f4e <_realloc_r+0x1be>
 8008e08:	0029      	movs	r1, r5
 8008e0a:	9801      	ldr	r0, [sp, #4]
 8008e0c:	f7fe ff70 	bl	8007cf0 <_malloc_r>
 8008e10:	1e05      	subs	r5, r0, #0
 8008e12:	d039      	beq.n	8008e88 <_realloc_r+0xf8>
 8008e14:	2301      	movs	r3, #1
 8008e16:	0002      	movs	r2, r0
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	3a08      	subs	r2, #8
 8008e1c:	4399      	bics	r1, r3
 8008e1e:	187f      	adds	r7, r7, r1
 8008e20:	42ba      	cmp	r2, r7
 8008e22:	d100      	bne.n	8008e26 <_realloc_r+0x96>
 8008e24:	e12e      	b.n	8009084 <_realloc_r+0x2f4>
 8008e26:	1f22      	subs	r2, r4, #4
 8008e28:	2a24      	cmp	r2, #36	; 0x24
 8008e2a:	d900      	bls.n	8008e2e <_realloc_r+0x9e>
 8008e2c:	e114      	b.n	8009058 <_realloc_r+0x2c8>
 8008e2e:	2a13      	cmp	r2, #19
 8008e30:	d900      	bls.n	8008e34 <_realloc_r+0xa4>
 8008e32:	e0e8      	b.n	8009006 <_realloc_r+0x276>
 8008e34:	0003      	movs	r3, r0
 8008e36:	0032      	movs	r2, r6
 8008e38:	6811      	ldr	r1, [r2, #0]
 8008e3a:	6019      	str	r1, [r3, #0]
 8008e3c:	6851      	ldr	r1, [r2, #4]
 8008e3e:	6059      	str	r1, [r3, #4]
 8008e40:	6892      	ldr	r2, [r2, #8]
 8008e42:	609a      	str	r2, [r3, #8]
 8008e44:	9c01      	ldr	r4, [sp, #4]
 8008e46:	0031      	movs	r1, r6
 8008e48:	0020      	movs	r0, r4
 8008e4a:	f7fe fe61 	bl	8007b10 <_free_r>
 8008e4e:	0020      	movs	r0, r4
 8008e50:	f7ff fa4e 	bl	80082f0 <__malloc_unlock>
 8008e54:	e01b      	b.n	8008e8e <_realloc_r+0xfe>
 8008e56:	2107      	movs	r1, #7
 8008e58:	438b      	bics	r3, r1
 8008e5a:	4698      	mov	r8, r3
 8008e5c:	d5b6      	bpl.n	8008dcc <_realloc_r+0x3c>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	9a01      	ldr	r2, [sp, #4]
 8008e62:	2500      	movs	r5, #0
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e012      	b.n	8008e8e <_realloc_r+0xfe>
 8008e68:	0035      	movs	r5, r6
 8008e6a:	4643      	mov	r3, r8
 8008e6c:	1ae3      	subs	r3, r4, r3
 8008e6e:	2b0f      	cmp	r3, #15
 8008e70:	d825      	bhi.n	8008ebe <_realloc_r+0x12e>
 8008e72:	464b      	mov	r3, r9
 8008e74:	2201      	movs	r2, #1
 8008e76:	4649      	mov	r1, r9
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	4323      	orrs	r3, r4
 8008e7e:	604b      	str	r3, [r1, #4]
 8008e80:	444c      	add	r4, r9
 8008e82:	6863      	ldr	r3, [r4, #4]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	6062      	str	r2, [r4, #4]
 8008e88:	9801      	ldr	r0, [sp, #4]
 8008e8a:	f7ff fa31 	bl	80082f0 <__malloc_unlock>
 8008e8e:	0028      	movs	r0, r5
 8008e90:	b005      	add	sp, #20
 8008e92:	bc3c      	pop	{r2, r3, r4, r5}
 8008e94:	4690      	mov	r8, r2
 8008e96:	4699      	mov	r9, r3
 8008e98:	46a2      	mov	sl, r4
 8008e9a:	46ab      	mov	fp, r5
 8008e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9e:	2103      	movs	r1, #3
 8008ea0:	9803      	ldr	r0, [sp, #12]
 8008ea2:	468c      	mov	ip, r1
 8008ea4:	4388      	bics	r0, r1
 8008ea6:	1821      	adds	r1, r4, r0
 8008ea8:	468b      	mov	fp, r1
 8008eaa:	4299      	cmp	r1, r3
 8008eac:	db21      	blt.n	8008ef2 <_realloc_r+0x162>
 8008eae:	9a02      	ldr	r2, [sp, #8]
 8008eb0:	0035      	movs	r5, r6
 8008eb2:	68d3      	ldr	r3, [r2, #12]
 8008eb4:	6892      	ldr	r2, [r2, #8]
 8008eb6:	465c      	mov	r4, fp
 8008eb8:	60d3      	str	r3, [r2, #12]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	e7d5      	b.n	8008e6a <_realloc_r+0xda>
 8008ebe:	464a      	mov	r2, r9
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	4646      	mov	r6, r8
 8008ec4:	6852      	ldr	r2, [r2, #4]
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4002      	ands	r2, r0
 8008eca:	4332      	orrs	r2, r6
 8008ecc:	464e      	mov	r6, r9
 8008ece:	4441      	add	r1, r8
 8008ed0:	4303      	orrs	r3, r0
 8008ed2:	6072      	str	r2, [r6, #4]
 8008ed4:	444c      	add	r4, r9
 8008ed6:	604b      	str	r3, [r1, #4]
 8008ed8:	6863      	ldr	r3, [r4, #4]
 8008eda:	3108      	adds	r1, #8
 8008edc:	4318      	orrs	r0, r3
 8008ede:	6060      	str	r0, [r4, #4]
 8008ee0:	9801      	ldr	r0, [sp, #4]
 8008ee2:	f7fe fe15 	bl	8007b10 <_free_r>
 8008ee6:	e7cf      	b.n	8008e88 <_realloc_r+0xf8>
 8008ee8:	0011      	movs	r1, r2
 8008eea:	f7fe ff01 	bl	8007cf0 <_malloc_r>
 8008eee:	0005      	movs	r5, r0
 8008ef0:	e7cd      	b.n	8008e8e <_realloc_r+0xfe>
 8008ef2:	4651      	mov	r1, sl
 8008ef4:	4211      	tst	r1, r2
 8008ef6:	d000      	beq.n	8008efa <_realloc_r+0x16a>
 8008ef8:	e786      	b.n	8008e08 <_realloc_r+0x78>
 8008efa:	4661      	mov	r1, ip
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	1aba      	subs	r2, r7, r2
 8008f00:	4692      	mov	sl, r2
 8008f02:	6852      	ldr	r2, [r2, #4]
 8008f04:	438a      	bics	r2, r1
 8008f06:	1880      	adds	r0, r0, r2
 8008f08:	4683      	mov	fp, r0
 8008f0a:	44a3      	add	fp, r4
 8008f0c:	459b      	cmp	fp, r3
 8008f0e:	db26      	blt.n	8008f5e <_realloc_r+0x1ce>
 8008f10:	9a02      	ldr	r2, [sp, #8]
 8008f12:	68d3      	ldr	r3, [r2, #12]
 8008f14:	6892      	ldr	r2, [r2, #8]
 8008f16:	60d3      	str	r3, [r2, #12]
 8008f18:	609a      	str	r2, [r3, #8]
 8008f1a:	4653      	mov	r3, sl
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	4655      	mov	r5, sl
 8008f20:	6892      	ldr	r2, [r2, #8]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	3508      	adds	r5, #8
 8008f26:	60d3      	str	r3, [r2, #12]
 8008f28:	609a      	str	r2, [r3, #8]
 8008f2a:	1f22      	subs	r2, r4, #4
 8008f2c:	2a24      	cmp	r2, #36	; 0x24
 8008f2e:	d900      	bls.n	8008f32 <_realloc_r+0x1a2>
 8008f30:	e096      	b.n	8009060 <_realloc_r+0x2d0>
 8008f32:	2a13      	cmp	r2, #19
 8008f34:	d972      	bls.n	800901c <_realloc_r+0x28c>
 8008f36:	4653      	mov	r3, sl
 8008f38:	6831      	ldr	r1, [r6, #0]
 8008f3a:	6099      	str	r1, [r3, #8]
 8008f3c:	6871      	ldr	r1, [r6, #4]
 8008f3e:	60d9      	str	r1, [r3, #12]
 8008f40:	2a1b      	cmp	r2, #27
 8008f42:	d900      	bls.n	8008f46 <_realloc_r+0x1b6>
 8008f44:	e0a4      	b.n	8009090 <_realloc_r+0x300>
 8008f46:	0032      	movs	r2, r6
 8008f48:	3310      	adds	r3, #16
 8008f4a:	3208      	adds	r2, #8
 8008f4c:	e068      	b.n	8009020 <_realloc_r+0x290>
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	1aba      	subs	r2, r7, r2
 8008f52:	4692      	mov	sl, r2
 8008f54:	4651      	mov	r1, sl
 8008f56:	2203      	movs	r2, #3
 8008f58:	6849      	ldr	r1, [r1, #4]
 8008f5a:	4391      	bics	r1, r2
 8008f5c:	000a      	movs	r2, r1
 8008f5e:	4693      	mov	fp, r2
 8008f60:	44a3      	add	fp, r4
 8008f62:	459b      	cmp	fp, r3
 8008f64:	da00      	bge.n	8008f68 <_realloc_r+0x1d8>
 8008f66:	e74f      	b.n	8008e08 <_realloc_r+0x78>
 8008f68:	e7d7      	b.n	8008f1a <_realloc_r+0x18a>
 8008f6a:	2003      	movs	r0, #3
 8008f6c:	9902      	ldr	r1, [sp, #8]
 8008f6e:	4684      	mov	ip, r0
 8008f70:	6849      	ldr	r1, [r1, #4]
 8008f72:	4381      	bics	r1, r0
 8008f74:	4640      	mov	r0, r8
 8008f76:	1909      	adds	r1, r1, r4
 8008f78:	3010      	adds	r0, #16
 8008f7a:	9002      	str	r0, [sp, #8]
 8008f7c:	4281      	cmp	r1, r0
 8008f7e:	da58      	bge.n	8009032 <_realloc_r+0x2a2>
 8008f80:	07d2      	lsls	r2, r2, #31
 8008f82:	d500      	bpl.n	8008f86 <_realloc_r+0x1f6>
 8008f84:	e740      	b.n	8008e08 <_realloc_r+0x78>
 8008f86:	4660      	mov	r0, ip
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	1aba      	subs	r2, r7, r2
 8008f8c:	4692      	mov	sl, r2
 8008f8e:	6852      	ldr	r2, [r2, #4]
 8008f90:	4382      	bics	r2, r0
 8008f92:	9802      	ldr	r0, [sp, #8]
 8008f94:	1851      	adds	r1, r2, r1
 8008f96:	9103      	str	r1, [sp, #12]
 8008f98:	4288      	cmp	r0, r1
 8008f9a:	dce0      	bgt.n	8008f5e <_realloc_r+0x1ce>
 8008f9c:	4653      	mov	r3, sl
 8008f9e:	4652      	mov	r2, sl
 8008fa0:	4655      	mov	r5, sl
 8008fa2:	6892      	ldr	r2, [r2, #8]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	60d3      	str	r3, [r2, #12]
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	1f22      	subs	r2, r4, #4
 8008fae:	2a24      	cmp	r2, #36	; 0x24
 8008fb0:	d900      	bls.n	8008fb4 <_realloc_r+0x224>
 8008fb2:	e08e      	b.n	80090d2 <_realloc_r+0x342>
 8008fb4:	2a13      	cmp	r2, #19
 8008fb6:	d800      	bhi.n	8008fba <_realloc_r+0x22a>
 8008fb8:	e088      	b.n	80090cc <_realloc_r+0x33c>
 8008fba:	4653      	mov	r3, sl
 8008fbc:	6831      	ldr	r1, [r6, #0]
 8008fbe:	6099      	str	r1, [r3, #8]
 8008fc0:	6871      	ldr	r1, [r6, #4]
 8008fc2:	60d9      	str	r1, [r3, #12]
 8008fc4:	2a1b      	cmp	r2, #27
 8008fc6:	d900      	bls.n	8008fca <_realloc_r+0x23a>
 8008fc8:	e088      	b.n	80090dc <_realloc_r+0x34c>
 8008fca:	0032      	movs	r2, r6
 8008fcc:	3310      	adds	r3, #16
 8008fce:	3208      	adds	r2, #8
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	6019      	str	r1, [r3, #0]
 8008fd4:	6851      	ldr	r1, [r2, #4]
 8008fd6:	6059      	str	r1, [r3, #4]
 8008fd8:	6892      	ldr	r2, [r2, #8]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	4651      	mov	r1, sl
 8008fde:	465b      	mov	r3, fp
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4441      	add	r1, r8
 8008fe4:	6099      	str	r1, [r3, #8]
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	9801      	ldr	r0, [sp, #4]
 8008fea:	1a9a      	subs	r2, r3, r2
 8008fec:	2301      	movs	r3, #1
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	604a      	str	r2, [r1, #4]
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	6852      	ldr	r2, [r2, #4]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	4652      	mov	r2, sl
 8008ffe:	6053      	str	r3, [r2, #4]
 8009000:	f7ff f976 	bl	80082f0 <__malloc_unlock>
 8009004:	e743      	b.n	8008e8e <_realloc_r+0xfe>
 8009006:	6833      	ldr	r3, [r6, #0]
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	6873      	ldr	r3, [r6, #4]
 800900c:	6043      	str	r3, [r0, #4]
 800900e:	2a1b      	cmp	r2, #27
 8009010:	d82d      	bhi.n	800906e <_realloc_r+0x2de>
 8009012:	0003      	movs	r3, r0
 8009014:	0032      	movs	r2, r6
 8009016:	3308      	adds	r3, #8
 8009018:	3208      	adds	r2, #8
 800901a:	e70d      	b.n	8008e38 <_realloc_r+0xa8>
 800901c:	002b      	movs	r3, r5
 800901e:	0032      	movs	r2, r6
 8009020:	6811      	ldr	r1, [r2, #0]
 8009022:	465c      	mov	r4, fp
 8009024:	6019      	str	r1, [r3, #0]
 8009026:	6851      	ldr	r1, [r2, #4]
 8009028:	46d1      	mov	r9, sl
 800902a:	6059      	str	r1, [r3, #4]
 800902c:	6892      	ldr	r2, [r2, #8]
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	e71b      	b.n	8008e6a <_realloc_r+0xda>
 8009032:	4643      	mov	r3, r8
 8009034:	18fa      	adds	r2, r7, r3
 8009036:	465b      	mov	r3, fp
 8009038:	609a      	str	r2, [r3, #8]
 800903a:	4643      	mov	r3, r8
 800903c:	1ac9      	subs	r1, r1, r3
 800903e:	2301      	movs	r3, #1
 8009040:	4319      	orrs	r1, r3
 8009042:	6051      	str	r1, [r2, #4]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	9801      	ldr	r0, [sp, #4]
 8009048:	4013      	ands	r3, r2
 800904a:	4642      	mov	r2, r8
 800904c:	4313      	orrs	r3, r2
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	f7ff f94e 	bl	80082f0 <__malloc_unlock>
 8009054:	0035      	movs	r5, r6
 8009056:	e71a      	b.n	8008e8e <_realloc_r+0xfe>
 8009058:	0031      	movs	r1, r6
 800905a:	f7ff fdf9 	bl	8008c50 <memmove>
 800905e:	e6f1      	b.n	8008e44 <_realloc_r+0xb4>
 8009060:	0031      	movs	r1, r6
 8009062:	0028      	movs	r0, r5
 8009064:	f7ff fdf4 	bl	8008c50 <memmove>
 8009068:	465c      	mov	r4, fp
 800906a:	46d1      	mov	r9, sl
 800906c:	e6fd      	b.n	8008e6a <_realloc_r+0xda>
 800906e:	68b3      	ldr	r3, [r6, #8]
 8009070:	6083      	str	r3, [r0, #8]
 8009072:	68f3      	ldr	r3, [r6, #12]
 8009074:	60c3      	str	r3, [r0, #12]
 8009076:	2a24      	cmp	r2, #36	; 0x24
 8009078:	d015      	beq.n	80090a6 <_realloc_r+0x316>
 800907a:	0003      	movs	r3, r0
 800907c:	0032      	movs	r2, r6
 800907e:	3310      	adds	r3, #16
 8009080:	3210      	adds	r2, #16
 8009082:	e6d9      	b.n	8008e38 <_realloc_r+0xa8>
 8009084:	6853      	ldr	r3, [r2, #4]
 8009086:	2203      	movs	r2, #3
 8009088:	4393      	bics	r3, r2
 800908a:	18e4      	adds	r4, r4, r3
 800908c:	0035      	movs	r5, r6
 800908e:	e6ec      	b.n	8008e6a <_realloc_r+0xda>
 8009090:	4653      	mov	r3, sl
 8009092:	68b1      	ldr	r1, [r6, #8]
 8009094:	6119      	str	r1, [r3, #16]
 8009096:	68f1      	ldr	r1, [r6, #12]
 8009098:	6159      	str	r1, [r3, #20]
 800909a:	2a24      	cmp	r2, #36	; 0x24
 800909c:	d00c      	beq.n	80090b8 <_realloc_r+0x328>
 800909e:	0032      	movs	r2, r6
 80090a0:	3318      	adds	r3, #24
 80090a2:	3210      	adds	r2, #16
 80090a4:	e7bc      	b.n	8009020 <_realloc_r+0x290>
 80090a6:	6933      	ldr	r3, [r6, #16]
 80090a8:	0032      	movs	r2, r6
 80090aa:	6103      	str	r3, [r0, #16]
 80090ac:	0003      	movs	r3, r0
 80090ae:	6971      	ldr	r1, [r6, #20]
 80090b0:	3318      	adds	r3, #24
 80090b2:	3218      	adds	r2, #24
 80090b4:	6141      	str	r1, [r0, #20]
 80090b6:	e6bf      	b.n	8008e38 <_realloc_r+0xa8>
 80090b8:	4653      	mov	r3, sl
 80090ba:	6932      	ldr	r2, [r6, #16]
 80090bc:	4651      	mov	r1, sl
 80090be:	619a      	str	r2, [r3, #24]
 80090c0:	0032      	movs	r2, r6
 80090c2:	6970      	ldr	r0, [r6, #20]
 80090c4:	3320      	adds	r3, #32
 80090c6:	3218      	adds	r2, #24
 80090c8:	61c8      	str	r0, [r1, #28]
 80090ca:	e7a9      	b.n	8009020 <_realloc_r+0x290>
 80090cc:	002b      	movs	r3, r5
 80090ce:	0032      	movs	r2, r6
 80090d0:	e77e      	b.n	8008fd0 <_realloc_r+0x240>
 80090d2:	0031      	movs	r1, r6
 80090d4:	0028      	movs	r0, r5
 80090d6:	f7ff fdbb 	bl	8008c50 <memmove>
 80090da:	e77f      	b.n	8008fdc <_realloc_r+0x24c>
 80090dc:	4653      	mov	r3, sl
 80090de:	68b1      	ldr	r1, [r6, #8]
 80090e0:	6119      	str	r1, [r3, #16]
 80090e2:	68f1      	ldr	r1, [r6, #12]
 80090e4:	6159      	str	r1, [r3, #20]
 80090e6:	2a24      	cmp	r2, #36	; 0x24
 80090e8:	d003      	beq.n	80090f2 <_realloc_r+0x362>
 80090ea:	0032      	movs	r2, r6
 80090ec:	3318      	adds	r3, #24
 80090ee:	3210      	adds	r2, #16
 80090f0:	e76e      	b.n	8008fd0 <_realloc_r+0x240>
 80090f2:	4653      	mov	r3, sl
 80090f4:	6932      	ldr	r2, [r6, #16]
 80090f6:	4651      	mov	r1, sl
 80090f8:	619a      	str	r2, [r3, #24]
 80090fa:	0032      	movs	r2, r6
 80090fc:	6970      	ldr	r0, [r6, #20]
 80090fe:	3320      	adds	r3, #32
 8009100:	3218      	adds	r2, #24
 8009102:	61c8      	str	r0, [r1, #28]
 8009104:	e764      	b.n	8008fd0 <_realloc_r+0x240>
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	20001040 	.word	0x20001040
 800910c:	00000000 	.word	0x00000000

08009110 <__ascii_wctomb>:
 8009110:	2900      	cmp	r1, #0
 8009112:	d004      	beq.n	800911e <__ascii_wctomb+0xe>
 8009114:	2aff      	cmp	r2, #255	; 0xff
 8009116:	d804      	bhi.n	8009122 <__ascii_wctomb+0x12>
 8009118:	2001      	movs	r0, #1
 800911a:	700a      	strb	r2, [r1, #0]
 800911c:	4770      	bx	lr
 800911e:	2000      	movs	r0, #0
 8009120:	e7fc      	b.n	800911c <__ascii_wctomb+0xc>
 8009122:	238a      	movs	r3, #138	; 0x8a
 8009124:	6003      	str	r3, [r0, #0]
 8009126:	2001      	movs	r0, #1
 8009128:	4240      	negs	r0, r0
 800912a:	e7f7      	b.n	800911c <__ascii_wctomb+0xc>
 800912c:	0000      	movs	r0, r0
	...

08009130 <_sbrk>:
 8009130:	4a04      	ldr	r2, [pc, #16]	; (8009144 <_sbrk+0x14>)
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <_sbrk+0x10>
 8009138:	1818      	adds	r0, r3, r0
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	0018      	movs	r0, r3
 800913e:	4770      	bx	lr
 8009140:	4b01      	ldr	r3, [pc, #4]	; (8009148 <_sbrk+0x18>)
 8009142:	e7f9      	b.n	8009138 <_sbrk+0x8>
 8009144:	2000161c 	.word	0x2000161c
 8009148:	20001e68 	.word	0x20001e68
 800914c:	00000000 	.word	0x00000000
 8009150:	656c6469 	.word	0x656c6469
	...
 8009160:	31235653 	.word	0x31235653
 8009164:	00000000 	.word	0x00000000
 8009168:	32235653 	.word	0x32235653
 800916c:	00000000 	.word	0x00000000
 8009170:	33235653 	.word	0x33235653
 8009174:	00000000 	.word	0x00000000
 8009178:	34235653 	.word	0x34235653
 800917c:	00000000 	.word	0x00000000
 8009180:	35235653 	.word	0x35235653
 8009184:	00000000 	.word	0x00000000
 8009188:	36235653 	.word	0x36235653
 800918c:	00000000 	.word	0x00000000
 8009190:	37235653 	.word	0x37235653
 8009194:	00000000 	.word	0x00000000
 8009198:	38235653 	.word	0x38235653
 800919c:	00000000 	.word	0x00000000
 80091a0:	39235653 	.word	0x39235653
 80091a4:	00000000 	.word	0x00000000
 80091a8:	31235653 	.word	0x31235653
 80091ac:	00000030 	.word	0x00000030
 80091b0:	31235653 	.word	0x31235653
 80091b4:	00000031 	.word	0x00000031
	...
 80091c0:	63617473 	.word	0x63617473
 80091c4:	766f206b 	.word	0x766f206b
 80091c8:	6c667265 	.word	0x6c667265
 80091cc:	0000776f 	.word	0x0000776f
 80091d0:	00006425 	.word	0x00006425
	...
 80091e0:	08000f48 	.word	0x08000f48
 80091e4:	08000f2a 	.word	0x08000f2a
 80091e8:	08000ee4 	.word	0x08000ee4
 80091ec:	08000e02 	.word	0x08000e02
 80091f0:	08000ee4 	.word	0x08000ee4
 80091f4:	08000f1c 	.word	0x08000f1c
 80091f8:	08000ee4 	.word	0x08000ee4
 80091fc:	08000e02 	.word	0x08000e02
 8009200:	08000f2a 	.word	0x08000f2a
 8009204:	08000f2a 	.word	0x08000f2a
 8009208:	08000f1c 	.word	0x08000f1c
 800920c:	08000e02 	.word	0x08000e02
 8009210:	08000dfa 	.word	0x08000dfa
 8009214:	08000dfa 	.word	0x08000dfa
 8009218:	08000dfa 	.word	0x08000dfa
 800921c:	08001160 	.word	0x08001160
 8009220:	080017d0 	.word	0x080017d0
 8009224:	08001690 	.word	0x08001690
 8009228:	08001690 	.word	0x08001690
 800922c:	0800168c 	.word	0x0800168c
 8009230:	080017a8 	.word	0x080017a8
 8009234:	080017a8 	.word	0x080017a8
 8009238:	0800179a 	.word	0x0800179a
 800923c:	0800168c 	.word	0x0800168c
 8009240:	080017a8 	.word	0x080017a8
 8009244:	0800179a 	.word	0x0800179a
 8009248:	080017a8 	.word	0x080017a8
 800924c:	0800168c 	.word	0x0800168c
 8009250:	080017b0 	.word	0x080017b0
 8009254:	080017b0 	.word	0x080017b0
 8009258:	080017b0 	.word	0x080017b0
 800925c:	080019b4 	.word	0x080019b4

08009260 <ram_areas>:
 8009260:	0800a34c 20001e68 20001e68 20001e68     L...h.. h.. h.. 
 8009270:	0800a34c 00000000 00000000 00000000     L...............
 8009280:	0800a34c 00000000 00000000 00000000     L...............
 8009290:	0800a34c 00000000 00000000 00000000     L...............
 80092a0:	0800a34c 00000000 00000000 00000000     L...............
 80092b0:	0800a34c 00000000 00000000 00000000     L...............
 80092c0:	0800a34c 00000000 00000000 00000000     L...............
 80092d0:	0800a34c 00000000 00000000 00000000     L...............

080092e0 <__func__.5082>:
 80092e0:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....

080092f0 <__func__.5704>:
 80092f0:	54566863 65536f44 00004974 00000000     chVTDoSetI......

08009300 <__func__.5712>:
 8009300:	54566863 65526f44 49746573 00000000     chVTDoResetI....
 8009310:	08003092 080030b6 080030b6 08003098     .0...0...0...0..
 8009320:	080030ac 080030a2 080030b6 080030ac     .0...0...0...0..

08009330 <__func__.5701>:
 8009330:	63536863 61655268 00497964 00000000     chSchReadyI.....

08009340 <__func__.5729>:
 8009340:	63536863 6b615768 53707565 00000000     chSchWakeupS....

08009350 <__func__.5713>:
 8009350:	68546863 65724364 49657461 00000000     chThdCreateI....

08009360 <__func__.4993>:
 8009360:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009370 <__func__.5167>:
 8009370:	68546863 656c5364 00537065 00000000     chThdSleepS.....

08009380 <__func__.5757>:
 8009380:	68546863 69784564 00005374 00000000     chThdExitS......

08009390 <__func__.5179>:
 8009390:	68546863 446f4464 65757165 654e6575     chThdDoDequeueNe
 80093a0:	00497478 00000000 00000000 00000000     xtI.............

080093b0 <ch_debug>:
 80093b0:	6e69616d 18801600 08480204 1814100c     main......H.....
 80093c0:	2221201c 00000000 00000000 00000000     . !"............

080093d0 <__func__.5696>:
 80093d0:	744d6863 6a624f78 49746365 0074696e     chMtxObjectInit.

080093e0 <__func__.5721>:
 80093e0:	76456863 6f724274 61636461 6c467473     chEvtBroadcastFl
 80093f0:	49736761 00000000 00000000 00000000     agsI............

08009400 <__func__.5738>:
 8009400:	76456863 67695374 496c616e 00000000     chEvtSignalI....

08009410 <__func__.4993>:
 8009410:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009420 <__func__.5724>:
 8009420:	51496863 64616552 656d6954 0074756f     chIQReadTimeout.

08009430 <__func__.5760>:
 8009430:	514f6863 74697257 6d695465 74756f65     chOQWriteTimeout
	...

08009450 <__func__.4993>:
 8009450:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

08009460 <__func__.6212>:
 8009460:	74537473 41747261 6d72616c 00000000     stStartAlarm....

08009470 <__func__.6219>:
 8009470:	65537473 616c4174 00006d72 00000000     stSetAlarm......

08009480 <vmt>:
 8009480:	08004361 08004391 080043c1 080043f1     aC...C...C...C..
 8009490:	08004411 08004451 08004481 080044b1     .D..QD...D...D..

080094a0 <__func__.6257>:
 80094a0:	74536473 00747261 00000000 00000000     sdStart.........

080094b0 <__func__.4993>:
 80094b0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080094c0 <__func__.6266>:
 80094c0:	6e496473 696d6f63 6144676e 00496174     sdIncomingDataI.

080094d0 <default_config>:
 80094d0:	00002580 00000000 00004000 00000000     .%.......@......

080094e0 <pal_default_config>:
 80094e0:	69553faa 00000070 3c00c000 a6aa0000     .?Uip......<....
 80094f0:	000060ff 00001111 00002222 500a5685     .`......""...V.P
 8009500:	00000300 000f0000 a550a81a 00003f1c     ..........P..?..
 8009510:	00044000 00000011 54050000 00000000     .@.........T....
 8009520:	c00f0000 29505555 00009cff 00000000     ....UUP)........
 8009530:	00000000 00000005 00000000 00000000     ................
 8009540:	5555555a 0000fffc 00000000 00000000     ZUUU............

08009550 <_ZZL11chSysUnlockvE8__func__>:
 8009550:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....
 8009560:	080059dc 08005a50 08005a50 080059c0     .Y..PZ..PZ...Y..
 8009570:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 8009580:	08005a50 08005a50 080059c8 080054aa     PZ..PZ...Y...T..
 8009590:	08005a50 08005464 080054b4 08005a50     PZ..dT...T..PZ..
 80095a0:	08005500 080056ea 080056ea 080056ea     .U...V...V...V..
 80095b0:	080056ea 080056ea 080056ea 080056ea     .V...V...V...V..
 80095c0:	080056ea 080056ea 08005a50 08005a50     .V...V..PZ..PZ..
 80095d0:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 80095e0:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 80095f0:	08005508 08005650 08005a50 08005650     .U..PV..PZ..PV..
 8009600:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 8009610:	0800571a 08005a50 08005a50 08005722     .W..PZ..PZ.."W..
 8009620:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 8009630:	08005a50 080057c4 08005a50 08005a50     PZ...W..PZ..PZ..
 8009640:	080057f6 08005a50 08005a50 08005a50     .W..PZ..PZ..PZ..
 8009650:	08005a50 08005a50 08005a50 08005a50     PZ..PZ..PZ..PZ..
 8009660:	08005a50 08005a50 08005a50 080058f0     PZ..PZ..PZ...X..
 8009670:	08005924 08005650 08005650 08005650     $Y..PV..PV..PV..
 8009680:	08005936 08005924 08005a50 08005a50     6Y..$Y..PZ..PZ..
 8009690:	0800593e 08005a50 08005858 08005a1e     >Y..PZ..XX...Z..
 80096a0:	08005994 0800588e 08005a50 08005896     .Y...X..PZ...X..
 80096b0:	08005a50 080059ec 08005a50 08005a50     PZ...Y..PZ..PZ..
 80096c0:	0800594e 00000000 00000000 00000000     NY..............
 80096d0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80096e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80096f0:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009700:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009710:	00000030 00000000 00000000 00000000     0...............

08009720 <blanks.7228>:
 8009720:	20202020 20202020 20202020 20202020                     

08009730 <zeroes.7229>:
 8009730:	30303030 30303030 30303030 30303030     0000000000000000
 8009740:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

08009750 <__mprec_bigtens>:
 8009750:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009760:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009770:	7f73bf3c 75154fdd 00000000 00000000     <.s..O.u........

08009780 <__mprec_tens>:
 8009780:	00000000 3ff00000 00000000 40240000     .......?......$@
 8009790:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80097a0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80097b0:	00000000 412e8480 00000000 416312d0     .......A......cA
 80097c0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80097d0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80097e0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80097f0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009800:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009810:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009820:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009830:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009840:	79d99db4 44ea7843 00000000 00000000     ...yCx.D........

08009850 <p05.6060>:
 8009850:	00000005 00000019 0000007d 00000000     ........}.......
 8009860:	00000043 49534f50 00000058 00000000     C...POSIX.......
 8009870:	0000002e 00000000 00000000 00000000     ................

08009880 <_ctype_>:
 8009880:	20202000 20202020 28282020 20282828     .         ((((( 
 8009890:	20202020 20202020 20202020 20202020                     
 80098a0:	10108820 10101010 10101010 10101010      ...............
 80098b0:	04040410 04040404 10040404 10101010     ................
 80098c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80098d0:	01010101 01010101 01010101 10101010     ................
 80098e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80098f0:	02020202 02020202 02020202 10101010     ................
 8009900:	00000020 00000000 00000000 00000000      ...............
	...
